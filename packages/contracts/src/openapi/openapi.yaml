openapi: 3.0.3
info:
  title: Arrakis OMS API
  description: Enterprise-level Ontology Management System API
  version: 1.0.0
  contact:
    name: Arrakis Team
    url: https://github.com/ludia8888/Arrakis-Project
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:4000/api
    description: Development server
  - url: https://api.arrakis.io/api
    description: Production server

tags:
  - name: ObjectType
    description: Object Type management
  - name: Property
    description: Property management
  - name: LinkType
    description: Link Type management
  - name: Auth
    description: Authentication and authorization

paths:
  /object-type:
    get:
      tags:
        - ObjectType
      summary: List object types
      operationId: listObjectTypes
      parameters:
        - $ref: "#/components/parameters/QueryParam"
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/SortByParam"
        - $ref: "#/components/parameters/SortOrderParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectTypeListResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalError"

    post:
      tags:
        - ObjectType
      summary: Create object type
      operationId: createObjectType
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateObjectType"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectType"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/ConflictError"
        "500":
          $ref: "#/components/responses/InternalError"

  /object-type/{rid}:
    get:
      tags:
        - ObjectType
      summary: Get object type by ID
      operationId: getObjectType
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectType"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"

    put:
      tags:
        - ObjectType
      summary: Update object type
      operationId: updateObjectType
      parameters:
        - $ref: "#/components/parameters/ResourceId"
        - $ref: "#/components/parameters/VersionParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateObjectType"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectType"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          $ref: "#/components/responses/ConflictError"
        "500":
          $ref: "#/components/responses/InternalError"

    delete:
      tags:
        - ObjectType
      summary: Delete object type
      operationId: deleteObjectType
      parameters:
        - $ref: "#/components/parameters/ResourceId"
      responses:
        "204":
          description: Deleted
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"

components:
  parameters:
    ResourceId:
      name: rid
      in: path
      required: true
      description: Resource ID (UUID)
      schema:
        type: string
        format: uuid

    QueryParam:
      name: q
      in: query
      description: Search query
      schema:
        type: string

    PageParam:
      name: page
      in: query
      description: Page number
      schema:
        type: integer
        minimum: 1
        default: 1

    LimitParam:
      name: limit
      in: query
      description: Items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    SortByParam:
      name: sortBy
      in: query
      description: Sort field
      schema:
        type: string
        enum: [createdAt, updatedAt, displayName, apiName]

    SortOrderParam:
      name: sortOrder
      in: query
      description: Sort order
      schema:
        type: string
        enum: [asc, desc]
        default: asc

    VersionParam:
      name: version
      in: query
      description: Version for optimistic locking
      schema:
        type: integer

  schemas:
    ObjectType:
      type: object
      required:
        - rid
        - apiName
        - displayName
        - visibility
        - status
        - version
        - createdAt
        - updatedAt
        - createdBy
        - updatedBy
      properties:
        rid:
          type: string
          format: uuid
        apiName:
          type: string
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
        displayName:
          type: string
        description:
          type: string
        icon:
          type: string
        color:
          type: string
          pattern: "^#[0-9A-F]{6}$"
        groups:
          type: array
          items:
            type: string
        visibility:
          $ref: "#/components/schemas/NodeVisibility"
        status:
          $ref: "#/components/schemas/NodeStatus"
        version:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedBy:
          type: string

    CreateObjectType:
      type: object
      required:
        - apiName
        - displayName
      properties:
        apiName:
          type: string
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          minLength: 1
          maxLength: 100
        displayName:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        icon:
          type: string
          maxLength: 50
        color:
          type: string
          pattern: "^#[0-9A-F]{6}$"
        groups:
          type: array
          maxItems: 10
          items:
            type: string
            maxLength: 50
        visibility:
          $ref: "#/components/schemas/NodeVisibility"
        status:
          $ref: "#/components/schemas/NodeStatus"

    UpdateObjectType:
      type: object
      properties:
        displayName:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        icon:
          type: string
          maxLength: 50
        color:
          type: string
          pattern: "^#[0-9A-F]{6}$"
        groups:
          type: array
          maxItems: 10
          items:
            type: string
            maxLength: 50
        visibility:
          $ref: "#/components/schemas/NodeVisibility"
        status:
          $ref: "#/components/schemas/NodeStatus"

    ObjectTypeListResponse:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ObjectType"
        pagination:
          $ref: "#/components/schemas/Pagination"

    NodeVisibility:
      type: string
      enum: [prominent, normal, hidden]

    NodeStatus:
      type: string
      enum: [active, experimental, deprecated]

    Pagination:
      type: object
      required:
        - total
        - page
        - limit
        - totalPages
      properties:
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer
        totalPages:
          type: integer

    ErrorResponse:
      type: object
      required:
        - error
        - timestamp
        - path
        - requestId
      properties:
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: array
              items:
                type: string
        timestamp:
          type: string
          format: date-time
        path:
          type: string
        requestId:
          type: string

  responses:
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    NotFoundError:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    ConflictError:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
