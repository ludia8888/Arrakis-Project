# Pre-commit hooks for Arrakis Platform
# Install: pip install pre-commit && pre-commit install

repos:
  # Standard pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
        args: ["--allow-multiple-documents"]
      - id: check-json
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ["--maxkb=1000"]
      - id: mixed-line-ending
        args: ["--fix=lf"]

  # Python linting and formatting
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3
        files: \.py$
        args: ["--check", "--diff"]  # Check mode for pre-commit

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ["--profile", "black", "--check-only", "--diff"]

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: ["--max-line-length=88", "--extend-ignore=E203,W503,E501"]
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions

  # Type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies:
          - types-requests
          - types-PyYAML
          - types-setuptools
          - types-redis
          - types-python-dateutil
          - types-protobuf
        args: ["--ignore-missing-imports", "--allow-untyped-defs", "--no-strict-optional"]
        files: \.py$
        exclude: |
          (?x)^(
            migrations/|
            tests/|
            __pycache__/|
            venv/|
            .venv/|
            build/|
            dist/
          )

  # Docker
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: ["--ignore", "DL3008", "--ignore", "DL3009"]

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        files: \.(yaml|yml)$
        args: ["--tab-width=2"]

  # Custom hooks for Arrakis Platform
  - repo: local
    hooks:
      # Python indentation validation
      - id: python-indentation-check
        name: Python Indentation Check
        entry: python scripts/check_python_indentation.py
        language: system
        files: '\.py$'
        pass_filenames: true
        description: "Validate Python files use consistent 4-space indentation"

      # Python type hints validation
      - id: python-type-hints-check
        name: Python Type Hints Check
        entry: python scripts/check_type_hints.py
        language: system
        files: '\.py$'
        pass_filenames: true
        description: "Check for missing type hints in Python functions (warning only)"

      # Python naming pattern validation
      - id: python-naming-patterns
        name: Python Naming Pattern Check
        entry: python scripts/check-naming-patterns.py
        language: system
        files: '\.py$'
        args: ["--path", "."]
        pass_filenames: false
        stages: [pre-commit]
        verbose: true
        description: "Check for consistent class, function, and variable naming patterns"
      # Update architecture diagrams when code changes
      - id: update-architecture-diagrams
        name: Update Architecture Diagrams
        entry: bash
        args:
          - -c
          - |
            echo "🎨 Checking if architecture diagrams need updating..."

            # Generate Mermaid diagrams
            if [[ -f "scripts/generate-mermaid-diagrams.py" ]]; then
              echo "🎨 Generating Mermaid diagrams..."

              if python3 scripts/generate-mermaid-diagrams.py >/dev/null 2>&1; then
                echo "✅ Mermaid diagrams updated successfully"
                git add docs/diagrams/mermaid/ || true
              else
                echo "⚠️ Mermaid diagram generation failed, but continuing..."
              fi
            fi

            # Check if infrastructure diagram generation script exists
            if [[ -f "scripts/infrastructure-diagrams/generate-diagrams.sh" ]]; then
              echo "📊 Regenerating infrastructure diagrams..."

              # Make script executable
              chmod +x scripts/infrastructure-diagrams/generate-diagrams.sh

              # Run diagram generation (suppress output for pre-commit)
              if ./scripts/infrastructure-diagrams/generate-diagrams.sh >/dev/null 2>&1; then
                echo "✅ Infrastructure diagrams updated successfully"

                # Stage any generated diagram files
                git add docs/diagrams/ || true
              else
                echo "⚠️ Infrastructure diagram generation failed, but continuing..."
                # Don't fail the pre-commit hook due to diagram issues
              fi
            else
              echo "ℹ️ Infrastructure diagram generation script not found, skipping..."
            fi
        language: system
        files: '(\.py$|\.ya?ml$|docker-compose.*\.yml$|catalog-info\.yaml$|terraform/.*\.tf$)'
        pass_filenames: false
        stages: [pre-commit]
        verbose: true
        description: "Auto-generate architecture diagrams when relevant files change"

      # Validate OpenAPI specs if they exist
      - id: validate-openapi-specs
        name: Validate OpenAPI Specifications
        entry: bash
        language: system
        files: '.*\.openapi\.(json|yaml|yml)$'
        args:
          - -c
          - |
            if command -v redocly &> /dev/null; then
              echo "🔍 Validating OpenAPI specifications..."
              for file in "$@"; do
                echo "Validating $file..."
                if redocly lint "$file"; then
                  echo "✅ $file is valid"
                else
                  echo "❌ $file has validation errors"
                  exit 1
                fi
              done
            else
              echo "⚠️  Redocly CLI not found. Skipping OpenAPI validation."
              echo "Install with: npm install -g @redocly/cli"
            fi
        pass_filenames: true
        description: "Validate OpenAPI specifications with Redocly"

      # Check for secrets and sensitive information
      - id: check-secrets
        name: Check for Secrets
        entry: bash
        language: system
        files: '.*\.(py|yml|yaml|json|sh|env)$'
        args:
          - -c
          - |
            echo "🔍 Checking for potential secrets..."

            # Patterns to look for
            secret_patterns=(
              "password\s*=\s*['\"][^'\"]*['\"]"
              "secret\s*=\s*['\"][^'\"]*['\"]"
              "token\s*=\s*['\"][^'\"]*['\"]"
              "api_key\s*=\s*['\"][^'\"]*['\"]"
              "private_key"
              "-----BEGIN.*PRIVATE KEY-----"
            )

            found_secrets=false
            for file in "$@"; do
              for pattern in "${secret_patterns[@]}"; do
                if grep -iE "$pattern" "$file" >/dev/null 2>&1; then
                  echo "⚠️  Potential secret found in $file"
                  found_secrets=true
                fi
              done
            done

            if [ "$found_secrets" = true ]; then
              echo "❌ Potential secrets detected. Please review and remove them."
              echo "💡 Use environment variables or secret management systems instead."
              exit 1
            fi

            echo "✅ No secrets detected"
        pass_filenames: true
        description: "Check for hardcoded secrets and sensitive information"

      # Validate docker-compose files
      - id: validate-docker-compose
        name: Validate Docker Compose
        entry: bash
        language: system
        files: 'docker-compose.*\.ya?ml$'
        args:
          - -c
          - |
            echo "🐳 Validating Docker Compose files..."
            for file in "$@"; do
              echo "Validating $file..."
              if docker-compose -f "$file" config >/dev/null 2>&1; then
                echo "✅ $file is valid"
              else
                echo "❌ $file has validation errors"
                docker-compose -f "$file" config
                exit 1
              fi
            done
        pass_filenames: true
        description: "Validate Docker Compose file syntax"

      # Update package.json scripts when new scripts are added
      - id: sync-package-scripts
        name: Sync Package.json Scripts
        entry: bash
        language: system
        files: 'scripts/.*\.(sh|py)$'
        args:
          - -c
          - |
            echo "📦 Checking package.json scripts..."

            if [ -f "package.json" ]; then
              echo "✅ package.json exists and scripts are managed"
            else
              echo "⚠️  No package.json found"
            fi
        pass_filenames: false
        description: "Ensure package.json scripts are up to date"

      # Enhanced Terraform validation
      - id: terraform-validate-enhanced
        name: Enhanced Terraform Validation
        entry: bash
        language: system
        files: 'terraform/.*\.tf$'
        args:
          - -c
          - |
            echo "🔍 Enhanced Terraform validation..."

            # Check if terraform is installed
            if ! command -v terraform &> /dev/null; then
              echo "⚠️  Terraform not installed. Skipping validation."
              echo "ℹ️  To enable Terraform validation, install terraform: https://www.terraform.io/downloads"
              exit 0
            fi

            # Find all Terraform directories
            tf_dirs=$(find . -name "*.tf" -type f 2>/dev/null | xargs dirname 2>/dev/null | sort -u)

            # Check if any terraform files exist
            if [ -z "$tf_dirs" ]; then
              echo "ℹ️  No Terraform files found. Skipping validation."
              exit 0
            fi

            # Validate each terraform directory
            validation_failed=false
            for tf_dir in $tf_dirs; do
              echo "Validating Terraform in: $tf_dir"
              pushd "$tf_dir" > /dev/null

              # Format check
              if ! terraform fmt -check=true -diff=true .; then
                echo "❌ Terraform formatting issues in $tf_dir"
                echo "💡 Run 'terraform fmt' to fix formatting"
                validation_failed=true
              fi

              # Initialize if needed (suppress output)
              if [[ ! -d ".terraform" ]]; then
                if ! terraform init -backend=false > /dev/null 2>&1; then
                  echo "⚠️  Failed to initialize Terraform in $tf_dir"
                  # Continue validation anyway
                fi
              fi

              # Validate
              if ! terraform validate; then
                echo "❌ Terraform validation failed in $tf_dir"
                validation_failed=true
              fi

              popd > /dev/null
            done

            if [ "$validation_failed" = true ]; then
              exit 1
            fi

            echo "✅ Enhanced Terraform validation passed"
        pass_filenames: false
        description: "Enhanced Terraform validation with formatting and syntax checks"

      # Python security audit
      - id: python-security-audit
        name: Python Security Audit
        entry: bash
        language: system
        files: '\.py$'
        args:
          - -c
          - |
            echo "🔒 Running Python security audit..."

            # Install security tools if not present
            pip install --quiet bandit safety semgrep || true

            # Run bandit security scan
            echo "🔍 Running Bandit security scan..."
            if command -v bandit &> /dev/null; then
              bandit -r . -f json -o /tmp/bandit-report.json -ll || {
                echo "⚠️ Bandit found security issues"
                if [[ -f "/tmp/bandit-report.json" ]]; then
                  echo "📋 Security issues summary:"
                  jq -r '.results[] | "- \(.test_name): \(.filename):\(.line_number)"' /tmp/bandit-report.json 2>/dev/null || cat /tmp/bandit-report.json
                fi
                echo "❌ Security scan failed - please review issues"
                exit 1
              }
            fi

            # Run safety check for known vulnerabilities
            echo "🛡️ Checking for known vulnerabilities..."
            if command -v safety &> /dev/null; then
              safety check --json || {
                echo "⚠️ Known vulnerabilities found in dependencies"
                echo "❌ Vulnerability check failed - please update dependencies"
                exit 1
              }
            fi

            echo "✅ Python security audit passed"
        pass_filenames: false
        description: "Comprehensive Python security audit with Bandit and Safety"

      # Infrastructure secret scanning
      - id: infrastructure-secret-scan
        name: Infrastructure Secret Scanning
        entry: bash
        language: system
        files: '(terraform/.*\.tf$|\.ya?ml$|\.json$|docker-compose.*\.yml$)'
        args:
          - -c
          - |
            echo "🔐 Scanning infrastructure files for secrets..."

            # Enhanced secret patterns for infrastructure
            secret_patterns=(
              "aws_access_key_id\s*=\s*['\"][A-Z0-9]{20}['\"]"
              "aws_secret_access_key\s*=\s*['\"][A-Za-z0-9/+=]{40}['\"]"
              "password\s*=\s*['\"][^'\"]{8,}['\"]"
              "secret\s*=\s*['\"][^'\"]{8,}['\"]"
              "token\s*=\s*['\"][^'\"]{8,}['\"]"
              "api_key\s*=\s*['\"][^'\"]{8,}['\"]"
              "private_key"
              "-----BEGIN.*PRIVATE KEY-----"
              "jwt_secret\s*=\s*['\"][^'\"]{8,}['\"]"
              "encryption_key\s*=\s*['\"][^'\"]{8,}['\"]"
              "database_password\s*=\s*['\"][^'\"]{8,}['\"]"
              "grafana_admin_password\s*=\s*['\"][^'\"]{8,}['\"]"
            )

            found_secrets=false
            for file in "$@"; do
              if [[ -f "$file" ]]; then
                for pattern in "${secret_patterns[@]}"; do
                  if grep -iE "$pattern" "$file" >/dev/null 2>&1; then
                    echo "⚠️ Potential secret found in $file"
                    # Show context (without revealing the secret)
                    grep -iE "$pattern" "$file" | sed 's/=.*/=***REDACTED***/' || true
                    found_secrets=true
                  fi
                done
              fi
            done

            if [ "$found_secrets" = true ]; then
              echo "❌ Potential secrets detected in infrastructure files"
              echo "💡 Use variables, AWS Secrets Manager, or environment variables instead"
              exit 1
            fi

            echo "✅ No secrets detected in infrastructure files"
        pass_filenames: true
        description: "Enhanced secret scanning for infrastructure files"

      # Kubernetes manifest validation
      - id: kubernetes-manifest-validation
        name: Kubernetes Manifest Validation
        entry: bash
        language: system
        files: '(k8s/.*\.ya?ml$|kubernetes/.*\.ya?ml$|manifests/.*\.ya?ml$)'
        args:
          - -c
          - |
            echo "☸️ Validating Kubernetes manifests..."

            # Install kubectl if not present (for validation)
            if ! command -v kubectl &> /dev/null; then
              echo "ℹ️ kubectl not found, installing for validation..."
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" > /dev/null 2>&1
              chmod +x kubectl
              sudo mv kubectl /usr/local/bin/ 2>/dev/null || mv kubectl ~/bin/ 2>/dev/null || true
            fi

            validation_failed=false
            for file in "$@"; do
              if [[ -f "$file" ]]; then
                echo "Validating: $file"

                # Basic YAML syntax check
                if ! python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
                  echo "❌ YAML syntax error in $file"
                  validation_failed=true
                  continue
                fi

                # Kubernetes validation if kubectl is available
                if command -v kubectl &> /dev/null; then
                  if ! kubectl apply --dry-run=client -f "$file" >/dev/null 2>&1; then
                    echo "❌ Kubernetes validation failed for $file"
                    validation_failed=true
                  fi
                fi
              fi
            done

            if [ "$validation_failed" = true ]; then
              echo "❌ Kubernetes manifest validation failed"
              exit 1
            fi

            echo "✅ Kubernetes manifest validation passed"
        pass_filenames: true
        description: "Validate Kubernetes manifests for syntax and structure"

# Configuration for specific tools
ci:
  autofix_commit_msg: |
    🔧 [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ""
  autoupdate_commit_msg: "🔄 [pre-commit.ci] pre-commit autoupdate"
  autoupdate_schedule: weekly
  skip: []
  submodules: false
