{
  "deprecated_patterns": [],
  "duplicate_functionality": [
    {
      "category": "validation",
      "files": [
        "analyze_validation_issue.py",
        "api/v1/validation_routes.py",
        "core/auth/resource_permission_checker.py",
        "core/health/health_checker.py",
        "core/traversal/merge_validator.py",
        "core/traversal/semantic_validator.py",
        "core/validation/merge_validation_service.py",
        "core/validation/rules/terminus_redundant_check.py",
        "core/validation/schema_validator.py",
        "core/validation/validation_logging.py",
        "middleware/enterprise_validation.py",
        "scripts/backup_validation_files.py",
        "scripts/check_enum_compatibility.py",
        "scripts/check_schema_completeness.py",
        "scripts/ci/validate_oms_changes.py",
        "scripts/cleanup_duplicate_validation.py",
        "scripts/enhanced_import_check.py",
        "scripts/production_readiness_check.py",
        "scripts/quick_verify.py",
        "scripts/refactor_enterprise_validation.py",
        "scripts/refactor_models_validation.py",
        "scripts/remove_validators_only.py",
        "scripts/test_enterprise_validation.py",
        "scripts/test_validation.py",
        "scripts/test_validation_cleanup.py",
        "scripts/test_validation_final.py",
        "scripts/test_validation_gaps.py",
        "scripts/test_validation_simple.py",
        "scripts/validate_complete_system.py",
        "scripts/verify_deployment.py",
        "scripts/verify_imports.py",
        "scripts/verify_msa_setup.py",
        "test_basic_validation.py",
        "test_enterprise_validation_trace.py",
        "test_enterprise_validation_trace_auth.py",
        "test_validation_bypass.py",
        "test_validation_simple.py"
      ],
      "count": 37
    },
    {
      "category": "test",
      "files": [
        "scripts/create_test_db.py",
        "scripts/dev/create_test_user.py",
        "scripts/dev/quick_test.py",
        "scripts/run_all_tests.py",
        "scripts/run_phase6_tests.py",
        "scripts/simple_schema_test.py",
        "scripts/test_all_apis.py",
        "scripts/test_enterprise_validation.py",
        "scripts/test_foundry_alerting.py",
        "scripts/test_oms_api.py",
        "scripts/test_p1_foundry_rules.py",
        "scripts/test_p2_implementation.py",
        "scripts/test_p2_integration.py",
        "scripts/test_p2_mock_integration.py",
        "scripts/test_schema_api.py",
        "scripts/test_schema_management.py",
        "scripts/test_simple.py",
        "scripts/test_simple_foundry.py",
        "scripts/test_terminus_integration.py",
        "scripts/test_terminus_native.py",
        "scripts/test_terminus_traversal.py",
        "scripts/test_unified_merge.py",
        "scripts/test_validation.py",
        "scripts/test_validation_cleanup.py",
        "scripts/test_validation_final.py",
        "scripts/test_validation_gaps.py",
        "scripts/test_validation_simple.py",
        "test_basic_validation.py",
        "test_enterprise_validation_trace.py",
        "test_enterprise_validation_trace_auth.py",
        "test_load.py",
        "test_validation_bypass.py",
        "test_validation_simple.py"
      ],
      "count": 33
    },
    {
      "category": "auth",
      "files": [
        "api/auth_examples.py",
        "api/gateway/auth.py",
        "api/graphql/auth.py",
        "core/auth.py",
        "core/auth/resource_permission_checker.py",
        "middleware/auth_middleware.py",
        "middleware/auth_msa.py",
        "middleware/auth_secure.py",
        "middleware/mock_auth_middleware.py",
        "models/permissions.py",
        "scripts/migrate_to_msa_auth.py",
        "test_enterprise_validation_trace_auth.py"
      ],
      "count": 12
    },
    {
      "category": "config",
      "files": [
        "config/msa_config.py",
        "core/config/environment.py",
        "core/event_publisher/nats_config.py",
        "core/traversal/config.py",
        "core/validation/config.py",
        "core/validation/naming_config.py",
        "infra/siem/config.py",
        "middleware/service_config.py",
        "shared/config.py",
        "shared/security/mtls_config.py"
      ],
      "count": 10
    },
    {
      "category": "cache",
      "files": [
        "api/graphql/cache.py",
        "core/event_publisher/state_store.py",
        "core/traversal/caching.py",
        "middleware/event_state_store.py",
        "shared/cache/smart_cache.py",
        "shared/cache/terminusdb_cache.py"
      ],
      "count": 6
    },
    {
      "category": "database",
      "files": [
        "core/audit/audit_database.py",
        "core/integrations/iam_service_client.py",
        "core/integrations/iam_service_client_with_fallback.py",
        "core/integrations/user_service_client.py",
        "core/issue_tracking/issue_database.py",
        "core/traversal/query_planner.py",
        "database/clients/redis_ha_client.py",
        "database/clients/secure_http_client.py",
        "database/clients/service_client.py",
        "database/clients/terminus_db.py",
        "scripts/clear_terminusdb.py",
        "scripts/create_test_db.py",
        "scripts/init_databases.py",
        "sdks/python/oms_event_sdk/client.py",
        "sdks/python/oms_event_sdk_py/client.py",
        "shared/cache/terminusdb_cache.py",
        "shared/clients/redis_ha_client.py",
        "shared/clients/secure_http_client.py",
        "shared/clients/service_client.py",
        "shared/clients/terminus_db.py",
        "shared/database/connection_pool.py",
        "shared/infrastructure/nats_client.py",
        "shared/infrastructure/real_nats_client.py"
      ],
      "count": 23
    },
    {
      "category": "utils",
      "files": [
        "core/validation/rules/shared_property.py",
        "shared/utils.py",
        "utils/git_utils.py"
      ],
      "count": 3
    },
    {
      "category": "database_clients",
      "files": [
        "database/clients/redis_ha_client.py",
        "database/clients/__init__.py",
        "database/clients/terminus_db.py"
      ],
      "note": "Multiple database client implementations found"
    }
  ],
  "dead_code": [],
  "overlapping_modules": [
    {
      "type": "duplicate_endpoint",
      "route": "/health",
      "definitions": [
        {
          "file": "api/v1/audit_routes.py",
          "method": "get"
        },
        {
          "file": "api/v1/traversal_routes.py",
          "method": "get"
        },
        {
          "file": "api/v1/validation_routes.py",
          "method": "get"
        },
        {
          "file": "api/graphql/main.py",
          "method": "get"
        },
        {
          "file": "api/graphql/enhanced_main.py",
          "method": "get"
        }
      ]
    },
    {
      "type": "duplicate_endpoint",
      "route": "/metrics",
      "definitions": [
        {
          "file": "api/v1/traversal_routes.py",
          "method": "get"
        },
        {
          "file": "api/v1/validation_routes.py",
          "method": "get"
        },
        {
          "file": "api/v1/batch_routes.py",
          "method": "get"
        },
        {
          "file": "api/graphql/enhanced_main.py",
          "method": "get"
        }
      ]
    },
    {
      "type": "duplicate_endpoint",
      "route": "/locks/{lock_id}",
      "definitions": [
        {
          "file": "api/v1/branch_lock_routes.py",
          "method": "get"
        },
        {
          "file": "api/v1/branch_lock_routes.py",
          "method": "delete"
        }
      ]
    },
    {
      "type": "duplicate_endpoint",
      "route": "/dashboard",
      "definitions": [
        {
          "file": "api/v1/branch_lock_routes.py",
          "method": "get"
        },
        {
          "file": "api/v1/shadow_index_routes.py",
          "method": "get"
        }
      ]
    },
    {
      "type": "duplicate_endpoint",
      "route": "/validate",
      "definitions": [
        {
          "file": "api/v1/validation_routes.py",
          "method": "post"
        },
        {
          "file": "api/v1/issue_tracking_routes.py",
          "method": "post"
        },
        {
          "file": "api/v1/version_routes.py",
          "method": "post"
        }
      ]
    },
    {
      "type": "duplicate_endpoint",
      "route": "/{branch}/object-types",
      "definitions": [
        {
          "file": "api/v1/schema_routes.py",
          "method": "get"
        },
        {
          "file": "api/v1/schema_routes.py",
          "method": "post"
        }
      ]
    },
    {
      "type": "duplicate_endpoint",
      "route": "/{branch}/object-types/{type_id}",
      "definitions": [
        {
          "file": "api/v1/schema_routes.py",
          "method": "get"
        },
        {
          "file": "api/v1/schema_routes.py",
          "method": "put"
        },
        {
          "file": "api/v1/schema_routes.py",
          "method": "delete"
        }
      ]
    },
    {
      "type": "duplicate_endpoint",
      "route": "/{branch}/object-types/{type_id}/properties",
      "definitions": [
        {
          "file": "api/v1/schema_routes.py",
          "method": "get"
        },
        {
          "file": "api/v1/schema_routes.py",
          "method": "post"
        }
      ]
    },
    {
      "type": "duplicate_endpoint",
      "route": "/{branch}/shared-properties",
      "definitions": [
        {
          "file": "api/v1/schema_routes.py",
          "method": "get"
        },
        {
          "file": "api/v1/schema_routes.py",
          "method": "post"
        }
      ]
    },
    {
      "type": "duplicate_endpoint",
      "route": "/{branch}/link-types",
      "definitions": [
        {
          "file": "api/v1/schema_routes.py",
          "method": "get"
        },
        {
          "file": "api/v1/schema_routes.py",
          "method": "post"
        }
      ]
    },
    {
      "type": "duplicate_endpoint",
      "route": "/{branch}/action-types",
      "definitions": [
        {
          "file": "api/v1/schema_routes.py",
          "method": "get"
        },
        {
          "file": "api/v1/schema_routes.py",
          "method": "post"
        }
      ]
    },
    {
      "type": "duplicate_endpoint",
      "route": "/{branch}/interfaces",
      "definitions": [
        {
          "file": "api/v1/schema_routes.py",
          "method": "get"
        },
        {
          "file": "api/v1/schema_routes.py",
          "method": "post"
        }
      ]
    },
    {
      "type": "duplicate_endpoint",
      "route": "/{branch}/semantic-types",
      "definitions": [
        {
          "file": "api/v1/schema_routes.py",
          "method": "get"
        },
        {
          "file": "api/v1/schema_routes.py",
          "method": "post"
        }
      ]
    },
    {
      "type": "duplicate_endpoint",
      "route": "/{branch}/struct-types",
      "definitions": [
        {
          "file": "api/v1/schema_routes.py",
          "method": "get"
        },
        {
          "file": "api/v1/schema_routes.py",
          "method": "post"
        }
      ]
    },
    {
      "type": "duplicate_endpoint",
      "route": "/",
      "definitions": [
        {
          "file": "api/v1/semantic_types/endpoints.py",
          "method": "post"
        },
        {
          "file": "api/v1/semantic_types/endpoints.py",
          "method": "get"
        },
        {
          "file": "api/v1/struct_types/endpoints.py",
          "method": "post"
        },
        {
          "file": "api/v1/struct_types/endpoints.py",
          "method": "get"
        },
        {
          "file": "api/graphql/main.py",
          "method": "get"
        }
      ]
    },
    {
      "type": "duplicate_endpoint",
      "route": "/{semantic_type_id}",
      "definitions": [
        {
          "file": "api/v1/semantic_types/endpoints.py",
          "method": "get"
        },
        {
          "file": "api/v1/semantic_types/endpoints.py",
          "method": "put"
        },
        {
          "file": "api/v1/semantic_types/endpoints.py",
          "method": "delete"
        }
      ]
    },
    {
      "type": "duplicate_endpoint",
      "route": "/{struct_type_id}",
      "definitions": [
        {
          "file": "api/v1/struct_types/endpoints.py",
          "method": "get"
        },
        {
          "file": "api/v1/struct_types/endpoints.py",
          "method": "put"
        },
        {
          "file": "api/v1/struct_types/endpoints.py",
          "method": "delete"
        }
      ]
    }
  ],
  "old_patterns": [
    {
      "file": "test_basic_validation.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          18,
          "# config \ubaa8\ub4c8\ub9cc \ub2e8\ub3c5\uc73c\ub85c import"
        ]
      ]
    },
    {
      "file": "test_validation_simple.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          11,
          "# \ud544\uc694\ud55c \ubaa8\ub4c8\ub9cc import"
        ]
      ]
    },
    {
      "file": "middleware/auth_secure.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          40,
          "\"\"\"Base class for life-critical authentication errors\"\"\""
        ],
        [
          205,
          "\"\"\"Extract JWT token from Authorization header with LIFE-CRITICAL input validation\"\"\""
        ]
      ]
    },
    {
      "file": "middleware/auth_msa.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          201,
          "# Extract resource type from path"
        ]
      ]
    },
    {
      "file": "middleware/auth_msa.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          143,
          "\"\"\"Extract bearer token from request\"\"\""
        ],
        [
          232,
          "\"\"\"Extract resource type from URL path\"\"\""
        ],
        [
          303,
          "\"\"\"Get current authenticated user from request\"\"\""
        ]
      ]
    },
    {
      "file": "middleware/rate_limiter.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          714,
          "# Get from monitoring data if available"
        ],
        [
          802,
          "# Get rate limiter from context or create default"
        ]
      ]
    },
    {
      "file": "middleware/rate_limiter.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          622,
          "\"\"\"Main rate limiter class with support for multiple algorithms and scopes.\"\"\""
        ]
      ]
    },
    {
      "file": "middleware/dlq_handler.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          240,
          "# Remove from old status index"
        ],
        [
          263,
          "# Remove from indices"
        ],
        [
          445,
          "# Create hash from queue name and payload"
        ],
        [
          582,
          "# Remove from DLQ"
        ]
      ]
    },
    {
      "file": "middleware/dlq_handler.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          88,
          "\"\"\"Create from dictionary.\"\"\""
        ],
        [
          223,
          "\"\"\"Get message from Redis.\"\"\""
        ],
        [
          256,
          "\"\"\"Delete message from Redis.\"\"\""
        ],
        [
          725,
          "\"\"\"Replay messages from DLQ.\"\"\""
        ],
        [
          757,
          "\"\"\"Purge messages from DLQ.\"\"\""
        ]
      ]
    },
    {
      "file": "middleware/issue_tracking_middleware.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          82,
          "# Extract issue references from request"
        ],
        [
          85,
          "# Extract branch name from path"
        ],
        [
          143,
          "# Extract change ID from response if available"
        ],
        [
          265,
          "# Try to get from response headers first"
        ]
      ]
    },
    {
      "file": "middleware/issue_tracking_middleware.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          170,
          "\"\"\"Extract issue references from request headers and body\"\"\""
        ],
        [
          250,
          "\"\"\"Extract branch name from path\"\"\""
        ],
        [
          263,
          "\"\"\"Extract change ID from response\"\"\""
        ]
      ]
    },
    {
      "file": "middleware/service_config.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          557,
          "# Load from Redis if not in memory"
        ],
        [
          683,
          "# Get config manager from somewhere (e.g., request context)"
        ],
        [
          703,
          "# async def analyze_with_ml(data):"
        ]
      ]
    },
    {
      "file": "middleware/service_config.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          149,
          "\"\"\"Initialize default configurations\"\"\""
        ],
        [
          276,
          "\"\"\"Load configuration from file\"\"\""
        ],
        [
          291,
          "\"\"\"Process configuration data from file\"\"\""
        ],
        [
          376,
          "\"\"\"Extract value from core.user.service config\"\"\""
        ]
      ]
    },
    {
      "file": "middleware/circuit_breaker.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          250,
          "# Check if we should close circuit from half-open"
        ]
      ]
    },
    {
      "file": "middleware/circuit_breaker.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          543,
          "\"\"\"Check if we should close circuit from half-open.\"\"\""
        ]
      ]
    },
    {
      "file": "middleware/rbac_middleware.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          148,
          "# Extract resource ID from path if available"
        ],
        [
          152,
          "# Try to extract ID from common patterns"
        ]
      ]
    },
    {
      "file": "middleware/component_middleware.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          187,
          "# Remove from phase-specific middleware"
        ],
        [
          191,
          "# Remove from global middleware"
        ],
        [
          538,
          "# Get user permissions from context"
        ]
      ]
    },
    {
      "file": "middleware/component_middleware.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          103,
          "\"\"\"Base middleware class.\"\"\""
        ],
        [
          121,
          "\"\"\"Base component class.\"\"\""
        ],
        [
          186,
          "\"\"\"Remove middleware from pipeline.\"\"\""
        ],
        [
          747,
          "\"\"\"Get metrics from metrics middleware.\"\"\""
        ]
      ]
    },
    {
      "file": "middleware/etag_middleware.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          255,
          "# Extract fields changed from request"
        ],
        [
          394,
          "# Get current counts from metrics"
        ],
        [
          398,
          "# Calculate from the counter values (this is simplified - in production"
        ]
      ]
    },
    {
      "file": "middleware/etag_middleware.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          345,
          "\"\"\"Extract resource information from path\"\"\""
        ]
      ]
    },
    {
      "file": "middleware/schema_freeze_middleware.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          31,
          "# Paths exempt from freeze checks"
        ],
        [
          67,
          "# Extract branch from request"
        ]
      ]
    },
    {
      "file": "middleware/schema_freeze_middleware.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          136,
          "\"\"\"Extract branch name from request URL or headers\"\"\""
        ],
        [
          160,
          "\"\"\"Extract resource type and ID from request\"\"\""
        ]
      ]
    },
    {
      "file": "middleware/component_health.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          617,
          "# Remove from tracking"
        ]
      ]
    },
    {
      "file": "middleware/component_health.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          53,
          "\"\"\"Get worst status from a list.\"\"\""
        ],
        [
          150,
          "\"\"\"Base health check class.\"\"\""
        ],
        [
          444,
          "\"\"\"Custom health check with user-defined function.\"\"\""
        ]
      ]
    },
    {
      "file": "middleware/enterprise_validation.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          47,
          "# Entity type mapping from URL paths"
        ],
        [
          71,
          "# Determine entity type from path"
        ],
        [
          94,
          "# Get validation level from headers"
        ]
      ]
    },
    {
      "file": "middleware/enterprise_validation.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          192,
          "\"\"\"Get validation level from request headers\"\"\""
        ]
      ]
    },
    {
      "file": "middleware/event_state_store.py",
      "pattern_type": "deprecated_methods",
      "matches": [
        [
          137,
          "def apply(self, event: Event) -> None:"
        ],
        [
          164,
          "self.apply(event)"
        ],
        [
          530,
          "aggregate.apply(event)"
        ],
        [
          648,
          "def apply(self, event: Event) -> None:"
        ]
      ]
    },
    {
      "file": "middleware/event_state_store.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          507,
          "# Try to load from snapshot"
        ]
      ]
    },
    {
      "file": "middleware/event_state_store.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          47,
          "\"\"\"Base event class.\"\"\""
        ],
        [
          78,
          "\"\"\"Create from dictionary.\"\"\""
        ],
        [
          117,
          "\"\"\"Create from dictionary.\"\"\""
        ],
        [
          129,
          "\"\"\"Base aggregate class.\"\"\""
        ],
        [
          148,
          "\"\"\"Restore from snapshot.\"\"\""
        ]
      ]
    },
    {
      "file": "middleware/service_discovery.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          239,
          "# Remove from indices"
        ]
      ]
    },
    {
      "file": "middleware/service_discovery.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          131,
          "\"\"\"Base class for service discovery providers.\"\"\""
        ],
        [
          218,
          "\"\"\"Deregister service instance from Redis.\"\"\""
        ],
        [
          261,
          "\"\"\"Discover service instances from Redis.\"\"\""
        ],
        [
          558,
          "\"\"\"Main service discovery class.\"\"\""
        ]
      ]
    },
    {
      "file": "database/clients/redis_ha_client.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          94,
          "\"\"\"Disconnect from Redis cluster\"\"\""
        ],
        [
          120,
          "\"\"\"Discover current master from Sentinel\"\"\""
        ],
        [
          249,
          "\"\"\"Get value from Redis (preferably from replica for read scalability)\"\"\""
        ],
        [
          286,
          "\"\"\"Delete keys from Redis (always uses master)\"\"\""
        ]
      ]
    },
    {
      "file": "database/clients/terminus_db.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          166,
          "\"\"\"Disconnect from TerminusDB\"\"\""
        ]
      ]
    },
    {
      "file": "migrations/migrate_to_distributed_locks.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          182,
          "# Try to acquire same lock from another \"instance\""
        ],
        [
          281,
          "# Get PostgreSQL URL from environment"
        ]
      ]
    },
    {
      "file": "infra/siem/adapter.py",
      "pattern_type": "deprecated_methods",
      "matches": [
        [
          220,
          "await self._flush_buffer()"
        ],
        [
          222,
          "async def _flush_buffer(self):"
        ],
        [
          250,
          "await self._flush_buffer()"
        ],
        [
          268,
          "await self._flush_buffer()"
        ]
      ]
    },
    {
      "file": "core/advanced/terminus_advanced.py",
      "pattern_type": "deprecated_methods",
      "matches": [
        [
          251,
          "updated = patch.apply(current)"
        ]
      ]
    },
    {
      "file": "core/branch/interfaces.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          17,
          "\"\"\"Create a new branch from parent\"\"\""
        ]
      ]
    },
    {
      "file": "core/branch/lock_manager.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          112,
          "# Get lock from core"
        ]
      ]
    },
    {
      "file": "core/branch/terminus_adapter.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          278,
          "# Handle different return types from TerminusDB"
        ]
      ]
    },
    {
      "file": "core/branch/terminus_adapter.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          358,
          "\"\"\"Determine operation type from TerminusDB change object\"\"\""
        ]
      ]
    },
    {
      "file": "core/branch/foundry_branch_service.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          292,
          "\"\"\"Get branch info from database\"\"\""
        ]
      ]
    },
    {
      "file": "core/branch/lock_manager_core.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          117,
          "# Remove from active locks"
        ]
      ]
    },
    {
      "file": "core/branch/lock_manager_core.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          176,
          "\"\"\"Get default timeout for lock type\"\"\""
        ]
      ]
    },
    {
      "file": "core/branch/lock_state_manager.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          168,
          "\"\"\"Remove a lock from branch state\"\"\""
        ]
      ]
    },
    {
      "file": "core/merge/unified_engine.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          115,
          "# Parse conflicts from TerminusDB response"
        ],
        [
          165,
          "# Create a temporary branch from target"
        ],
        [
          172,
          "# Get all changes from source"
        ]
      ]
    },
    {
      "file": "core/merge/unified_engine.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          241,
          "\"\"\"Parse conflicts from TerminusDB response\"\"\""
        ]
      ]
    },
    {
      "file": "core/merge/merge_factory.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          37,
          "# Get TerminusDB client from branch service"
        ]
      ]
    },
    {
      "file": "core/security/security_monitor.py",
      "pattern_type": "todo_patterns",
      "matches": [
        [
          128,
          "# TODO: \uc2e4\uc81c \ud658\uacbd\uc5d0\uc11c\ub294 \uc774\uba54\uc77c, SMS, Slack \ub4f1\uc73c\ub85c \uc54c\ub9bc \ubc1c\uc1a1"
        ]
      ]
    },
    {
      "file": "core/event_consumer/quiver_event_consumer.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          144,
          "\"\"\"Start consuming messages from all subjects\"\"\""
        ]
      ]
    },
    {
      "file": "core/event_consumer/iam_event_handler.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          124,
          "# Remove from old role member lists"
        ],
        [
          186,
          "# Remove from permission set"
        ],
        [
          219,
          "# Get users with this role from cache"
        ]
      ]
    },
    {
      "file": "core/event_consumer/iam_event_handler.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          252,
          "\"\"\"Remove user from role member list in cache\"\"\""
        ]
      ]
    },
    {
      "file": "core/event_consumer/funnel_indexing_handler.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          135,
          "# Extract which resource types were indexed from event data"
        ]
      ]
    },
    {
      "file": "core/event_consumer/funnel_indexing_handler.py",
      "pattern_type": "todo_patterns",
      "matches": [
        [
          265,
          "# TODO: Implement actual conflict detection logic"
        ],
        [
          367,
          "# TODO: Save to audit database"
        ],
        [
          575,
          "# TODO: Save to audit database"
        ],
        [
          595,
          "# TODO: Implement actual alerting"
        ],
        [
          629,
          "# TODO: Implement actual alerting (email, Slack, etc.)"
        ]
      ]
    },
    {
      "file": "core/idempotent/schema_event_consumer.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          299,
          "\"\"\"Handle schema import\"\"\""
        ]
      ]
    },
    {
      "file": "core/idempotent/consumer_service.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          360,
          "\"\"\"Load consumer state from database\"\"\""
        ],
        [
          575,
          "\"\"\"Deserialize state from dict\"\"\""
        ]
      ]
    },
    {
      "file": "core/issue_tracking/issue_service.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          209,
          "# Determine issue type from labels"
        ]
      ]
    },
    {
      "file": "core/issue_tracking/issue_service.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          23,
          "\"\"\"Abstract base class for issue provider integrations\"\"\""
        ],
        [
          616,
          "\"\"\"Extract issue references from text (commit message, PR description, etc)\"\"\""
        ]
      ]
    },
    {
      "file": "core/graph/index_generator.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          275,
          "# 1. Query statistics from the database"
        ]
      ]
    },
    {
      "file": "core/graph/metadata_generator.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          378,
          "# Add edge definitions from link types"
        ]
      ]
    },
    {
      "file": "core/scheduler/advanced_scheduler.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          451,
          "# Query from Redis"
        ]
      ]
    },
    {
      "file": "core/scheduler/advanced_scheduler.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          716,
          "\"\"\"Get job metadata from Redis\"\"\""
        ]
      ]
    },
    {
      "file": "core/integrations/iam_service_client.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          79,
          "\"\"\"Load configuration from environment\"\"\""
        ]
      ]
    },
    {
      "file": "core/integrations/__init__.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          48,
          "# Export unified interface (reduces confusion from multiple options)"
        ]
      ]
    },
    {
      "file": "core/integrations/__init__.py",
      "pattern_type": "todo_patterns",
      "matches": [
        [
          40,
          "# DEPRECATED functions for backward compatibility"
        ]
      ]
    },
    {
      "file": "core/integrations/iam_service_client_with_fallback.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          409,
          "\"\"\"Create UserContext from validation response\"\"\""
        ]
      ]
    },
    {
      "file": "core/action/service.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          16,
          "# Try importing from shared if available"
        ]
      ]
    },
    {
      "file": "core/action/dlq_handler.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          213,
          "# Get message from DLQ"
        ],
        [
          238,
          "# Success - remove from DLQ"
        ],
        [
          333,
          "# Get message IDs from index"
        ]
      ]
    },
    {
      "file": "core/action/dlq_handler.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          67,
          "\"\"\"Create from dictionary\"\"\""
        ],
        [
          287,
          "\"\"\"Remove message from DLQ\"\"\""
        ],
        [
          332,
          "\"\"\"Get messages from DLQ\"\"\""
        ]
      ]
    },
    {
      "file": "core/iam/iam_integration.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          20,
          "# Import IAMScope from shared contracts to avoid duplication"
        ],
        [
          65,
          "# Get signing key from JWKS"
        ],
        [
          102,
          "# Add any explicit roles from token"
        ]
      ]
    },
    {
      "file": "core/audit/audit_publisher.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          37,
          "# In production, load from configuration"
        ],
        [
          78,
          "# Create actor info from user context"
        ],
        [
          90,
          "# IP and user agent should be extracted from request context"
        ]
      ]
    },
    {
      "file": "core/audit/audit_publisher.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          36,
          "\"\"\"Load PII field definitions for masking\"\"\""
        ],
        [
          45,
          "\"\"\"Lazy load audit service to avoid circular imports\"\"\""
        ]
      ]
    },
    {
      "file": "core/audit/audit_database.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          94,
          "# For now, return from local cache"
        ]
      ]
    },
    {
      "file": "core/audit/audit_database.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          92,
          "\"\"\"Query events - returns from local cache (limited)\"\"\""
        ],
        [
          113,
          "\"\"\"Get event by ID from local cache\"\"\""
        ]
      ]
    },
    {
      "file": "core/audit/audit_service.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          384,
          "# Multiple failures from same actor"
        ],
        [
          400,
          "# Count recent failures from this actor"
        ]
      ]
    },
    {
      "file": "core/audit/audit_service.py",
      "pattern_type": "todo_patterns",
      "matches": [
        [
          396,
          "# TODO: Integrate with alerting system (Slack, email, PagerDuty, etc.)"
        ],
        [
          416,
          "# TODO: Implement automatic response (rate limiting, account suspension, etc.)"
        ]
      ]
    },
    {
      "file": "core/event_publisher/outbox_service.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          66,
          "\"\"\"Generate idempotency key from event data\"\"\""
        ],
        [
          105,
          "\"\"\"Create from TerminusDB document\"\"\""
        ],
        [
          410,
          "\"\"\"Get pending events from outbox\"\"\""
        ]
      ]
    },
    {
      "file": "core/event_publisher/__init__.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          53,
          "# Export unified interface (reduces confusion from multiple options)"
        ]
      ]
    },
    {
      "file": "core/event_publisher/__init__.py",
      "pattern_type": "todo_patterns",
      "matches": [
        [
          45,
          "# DEPRECATED: Use get_event_publisher() instead"
        ]
      ]
    },
    {
      "file": "core/event_publisher/enhanced_event_service.py",
      "pattern_type": "todo_patterns",
      "matches": [
        [
          180,
          "# TODO: NATS publisher \uc5f0\ub3d9"
        ]
      ]
    },
    {
      "file": "core/traversal/config.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          15,
          "\"\"\"Schema namespace definitions\"\"\""
        ]
      ]
    },
    {
      "file": "core/traversal/traversal_engine.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          133,
          "# Get schema URIs from configuration"
        ],
        [
          429,
          "# Extract metrics from results"
        ]
      ]
    },
    {
      "file": "core/traversal/caching.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          76,
          "\"\"\"Get value from cache\"\"\""
        ],
        [
          86,
          "\"\"\"Delete value from cache\"\"\""
        ],
        [
          127,
          "\"\"\"Get value from cache with LRU update\"\"\""
        ],
        [
          174,
          "\"\"\"Delete entry from cache\"\"\""
        ],
        [
          279,
          "\"\"\"Get value from multi-level cache\"\"\""
        ]
      ]
    },
    {
      "file": "core/traversal/merge_validator.py",
      "pattern_type": "todo_patterns",
      "matches": [
        [
          32,
          "# DEPRECATED: Use validation layer enums instead"
        ]
      ]
    },
    {
      "file": "core/traversal/query_planner.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          252,
          "# Base estimate from historical data"
        ]
      ]
    },
    {
      "file": "core/traversal/semantic_validator.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          228,
          "# Get entities from both branches"
        ]
      ]
    },
    {
      "file": "core/history/routes.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          17,
          "# from core.events.publisher import EventPublisher as HistoryEventPublisher"
        ]
      ]
    },
    {
      "file": "core/api/schema_generator.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          179,
          "# Use link name or generate from target type"
        ],
        [
          183,
          "# Generate from target type if name is empty"
        ],
        [
          191,
          "# Generate from source type if name is empty"
        ],
        [
          530,
          "# Add constraints from semantic type"
        ]
      ]
    },
    {
      "file": "core/event_subscriber/main.py",
      "pattern_type": "todo_patterns",
      "matches": [
        [
          255,
          "# TODO: \uc2e4\uc81c \uac10\uc0ac \ub85c\uadf8 \uc800\uc7a5\uc18c\uc5d0 \uc800\uc7a5"
        ],
        [
          260,
          "# TODO: \uad00\ub828 \uce90\uc2dc \ubb34\ud6a8\ud654 \ub85c\uc9c1"
        ],
        [
          265,
          "# TODO: \uc678\ubd80 \uc2dc\uc2a4\ud15c \uc6f9\ud6c5 \ud638\ucd9c"
        ],
        [
          270,
          "# TODO: \ube0c\ub79c\uce58 \ubcf4\ud638 \uaddc\uce59 \uc790\ub3d9 \uc124\uc815"
        ],
        [
          275,
          "# TODO: CI/CD \ud30c\uc774\ud504\ub77c\uc778 \ud2b8\ub9ac\uac70"
        ]
      ]
    },
    {
      "file": "core/schema_generator/sdk_generator.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          722,
          "# Default URLs from AsyncAPI spec"
        ]
      ]
    },
    {
      "file": "core/schema_generator/sdk_generator.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          641,
          "\"\"\"Unsubscribe from events\"\"\""
        ]
      ]
    },
    {
      "file": "core/versioning/dag_compaction.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          303,
          "\"\"\"Estimate space savings from compacting given chains\"\"\""
        ],
        [
          320,
          "\"\"\"Load a commit from cache or storage\"\"\""
        ]
      ]
    },
    {
      "file": "core/backup/production_backup.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          555,
          "# Delete chunks from MinIO"
        ]
      ]
    },
    {
      "file": "core/backup/production_backup.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          66,
          "\"\"\"Generate encryption key from master key and ID\"\"\""
        ],
        [
          317,
          "\"\"\"Get list of databases from TerminusDB\"\"\""
        ],
        [
          443,
          "\"\"\"Restore from backup with validation\"\"\""
        ]
      ]
    },
    {
      "file": "core/backup/main.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          315,
          "\"\"\"Restore from a specific backup\"\"\""
        ],
        [
          339,
          "\"\"\"Retrieve backup data from storage\"\"\""
        ],
        [
          480,
          "\"\"\"Restore from a specific backup\"\"\""
        ]
      ]
    },
    {
      "file": "core/validation/interfaces.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          23,
          "\"\"\"Pre-defined migration strategies\"\"\""
        ]
      ]
    },
    {
      "file": "core/validation/event_schema.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          328,
          "\"\"\"Create QuiverEvent from dictionary (e.g., from JetStream message)\"\"\""
        ]
      ]
    },
    {
      "file": "core/validation/policy_engine.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          113,
          "# Load from config file if specified"
        ],
        [
          223,
          "# Implementation would load from actual config file"
        ],
        [
          276,
          "# Get rule_id from metadata if available"
        ],
        [
          470,
          "# Determine context from environment"
        ],
        [
          485,
          "# Runtime overrides from environment"
        ]
      ]
    },
    {
      "file": "core/validation/policy_engine.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          31,
          "\"\"\"Execution contexts with different policy defaults\"\"\""
        ],
        [
          43,
          "\"\"\"Individual policy rule definition\"\"\""
        ],
        [
          108,
          "\"\"\"Load policy configuration from source with runtime overrides\"\"\""
        ],
        [
          128,
          "\"\"\"Get default policy configuration for execution context\"\"\""
        ],
        [
          222,
          "\"\"\"Load policy config from YAML/JSON file\"\"\""
        ]
      ]
    },
    {
      "file": "core/validation/schema_validator.py",
      "pattern_type": "old_imports",
      "matches": [
        [
          11,
          "from __future__ import annotations"
        ]
      ]
    },
    {
      "file": "core/validation/rule_registry.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          103,
          "# \ud328\ud0a4\uc9c0 import"
        ],
        [
          113,
          "# \ubaa8\ub4c8 \ub3d9\uc801 import"
        ]
      ]
    },
    {
      "file": "core/validation/service_refactored.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          58,
          "# \uaddc\uce59\ub4e4\uc744 \ub3d9\uc801\uc73c\ub85c \ub85c\ub4dc (import \uc21c\ud658 \ubc29\uc9c0)"
        ]
      ]
    },
    {
      "file": "core/validation/ci_integration.py",
      "pattern_type": "old_string_formatting",
      "matches": [
        [
          555,
          "output = formatter.format(results)"
        ]
      ]
    },
    {
      "file": "core/validation/__init__.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          3,
          "# Lazy import to prevent circular dependencies"
        ]
      ]
    },
    {
      "file": "core/validation/integration.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          62,
          "# Get validation level from environment"
        ],
        [
          77,
          "# Get rule count from the service"
        ]
      ]
    },
    {
      "file": "core/validation/enterprise_service.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          662,
          "# Get required fields from entity config"
        ]
      ]
    },
    {
      "file": "core/validation/enterprise_service.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          98,
          "\"\"\"Base class for validation rules\"\"\""
        ]
      ]
    },
    {
      "file": "core/validation/terminus_boundary_definition.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          209,
          "\"\"\"Get boundary definition for a specific TerminusDB feature\"\"\""
        ],
        [
          279,
          "\"\"\"Generate documentation for all boundary definitions\"\"\""
        ]
      ]
    },
    {
      "file": "core/validation/adapters.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          67,
          "# \ub7f0\ud0c0\uc784\uc5d0\ub9cc import"
        ],
        [
          158,
          "# \ub7f0\ud0c0\uc784\uc5d0\ub9cc import"
        ]
      ]
    },
    {
      "file": "core/validation/oms_rules.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          256,
          "\"\"\"Validates interface definitions and implementations\"\"\""
        ],
        [
          316,
          "\"\"\"Validates semantic type definitions\"\"\""
        ],
        [
          382,
          "\"\"\"Validates struct type field definitions\"\"\""
        ]
      ]
    },
    {
      "file": "core/validation/adapters/terminus_traversal_adapter.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          133,
          "# Get entities from both branches using traversal capabilities"
        ],
        [
          178,
          "# Start from common root entities and traverse outward"
        ],
        [
          191,
          "# Extract entity IDs from traversal result"
        ]
      ]
    },
    {
      "file": "core/validation/rules/timeseries_event_mapping_rule.py",
      "pattern_type": "deprecated_methods",
      "matches": [
        [
          274,
          "await self._process_reorder_buffer(entity_id)"
        ],
        [
          276,
          "async def _process_reorder_buffer(self, entity_id: str):"
        ]
      ]
    },
    {
      "file": "core/validation/rules/timeseries_event_mapping_rule.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          104,
          "# Get events from context"
        ],
        [
          286,
          "# Remove from buffer and process"
        ]
      ]
    },
    {
      "file": "core/validation/rules/timeseries_event_mapping_rule.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          133,
          "\"\"\"Extract Quiver events from validation context\"\"\""
        ],
        [
          277,
          "\"\"\"Process events from reorder buffer\"\"\""
        ]
      ]
    },
    {
      "file": "core/validation/rules/array_element_rule.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          451,
          "\"\"\"Get default error message for constraint violations\"\"\""
        ]
      ]
    },
    {
      "file": "core/validation/rules/foreign_ref_integrity_rule.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          465,
          "\"\"\"Get default error message for violations\"\"\""
        ]
      ]
    },
    {
      "file": "sdks/python/oms_event_sdk/models.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          25,
          "\"\"\"Unsubscribe from events\"\"\""
        ]
      ]
    },
    {
      "file": "sdks/python/oms_event_sdk/client.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          60,
          "# Default URLs from AsyncAPI spec"
        ]
      ]
    },
    {
      "file": "sdks/python/oms_event_sdk_py/models.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          25,
          "\"\"\"Unsubscribe from events\"\"\""
        ]
      ]
    },
    {
      "file": "sdks/python/oms_event_sdk_py/client.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          60,
          "# Default URLs from AsyncAPI spec"
        ]
      ]
    },
    {
      "file": "config/circuit_breaker_secure.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          440,
          "# Auto-verify on import"
        ]
      ]
    },
    {
      "file": "tests/unit/test_caching.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          593,
          "# Retrieve from cache"
        ]
      ]
    },
    {
      "file": "tests/unit/test_traversal_engine.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          248,
          "# Should be same result object from cache"
        ]
      ]
    },
    {
      "file": "shared/iam_contracts.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          48,
          "\"\"\"Response from token validation\"\"\""
        ],
        [
          70,
          "\"\"\"User information from IAM\"\"\""
        ],
        [
          109,
          "\"\"\"Response from scope check\"\"\""
        ]
      ]
    },
    {
      "file": "shared/__init__.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          32,
          "# Try to import the real module"
        ],
        [
          60,
          "# Based on comprehensive import analysis"
        ],
        [
          63,
          "# REMOVED: OMS-SHIM-001 - Fixed import in api/graphql/main.py"
        ],
        [
          72,
          "# REMOVED: dummy User class creation (no longer needed)"
        ],
        [
          75,
          "# REMOVED: OMS-SHIM-005 - Fixed import in core/action/dlq_handler.py"
        ]
      ]
    },
    {
      "file": "shared/__init__.py",
      "pattern_type": "todo_patterns",
      "matches": [
        [
          117,
          "# TODO(#OMS-SHIM-010): TerminusDB client should use database.clients path"
        ]
      ]
    },
    {
      "file": "shared/clients/redis_ha_client.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          94,
          "\"\"\"Disconnect from Redis cluster\"\"\""
        ],
        [
          120,
          "\"\"\"Discover current master from Sentinel\"\"\""
        ],
        [
          249,
          "\"\"\"Get value from Redis (preferably from replica for read scalability)\"\"\""
        ],
        [
          286,
          "\"\"\"Delete keys from Redis (always uses master)\"\"\""
        ]
      ]
    },
    {
      "file": "shared/clients/terminus_db.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          166,
          "\"\"\"Disconnect from TerminusDB\"\"\""
        ]
      ]
    },
    {
      "file": "shared/cache/terminusdb_cache.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          279,
          "# Remove from memory cache"
        ],
        [
          283,
          "# Remove from TerminusDB"
        ]
      ]
    },
    {
      "file": "shared/cache/terminusdb_cache.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          91,
          "\"\"\"Deserialize value from storage\"\"\""
        ]
      ]
    },
    {
      "file": "shared/models/domain.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          31,
          "\"\"\"Object type classification\"\"\""
        ],
        [
          304,
          "\"\"\"Interface domain model - defines contracts for ObjectTypes\"\"\""
        ],
        [
          334,
          "\"\"\"SharedProperty domain model - reusable property definitions\"\"\""
        ]
      ]
    },
    {
      "file": "shared/models/function_types.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          725,
          "# Create FunctionType instance from definition"
        ],
        [
          822,
          "# Track available outputs from previous steps"
        ]
      ]
    },
    {
      "file": "shared/models/function_types.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          53,
          "\"\"\"Function parameter definition\"\"\""
        ],
        [
          79,
          "\"\"\"Function return type definition\"\"\""
        ],
        [
          135,
          "\"\"\"Function type definition - metadata for reusable computational logic\"\"\""
        ],
        [
          676,
          "\"\"\"Validates function type definitions\"\"\""
        ],
        [
          680,
          "\"\"\"Validate function type definition\"\"\""
        ]
      ]
    },
    {
      "file": "shared/models/data_types.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          783,
          "# Create DataType instance from definition"
        ]
      ]
    },
    {
      "file": "shared/models/data_types.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          80,
          "\"\"\"Base data type definition - OMS metadata for type system\"\"\""
        ],
        [
          700,
          "\"\"\"Convert value from one type to another\"\"\""
        ],
        [
          778,
          "\"\"\"Load system-defined data types\"\"\""
        ]
      ]
    },
    {
      "file": "shared/audit/audit_logger.py",
      "pattern_type": "todo_patterns",
      "matches": [
        [
          50,
          "# TODO: \uc2e4\uc81c \uad6c\ud604\uc5d0\uc11c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub098 \uc678\ubd80 \ub85c\uae45 \uc2dc\uc2a4\ud15c\uc5d0 \uc800\uc7a5"
        ]
      ]
    },
    {
      "file": "shared/infrastructure/real_nats_client.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          308,
          "# Unsubscribe from all subscriptions"
        ]
      ]
    },
    {
      "file": "shared/infrastructure/real_nats_client.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          285,
          "\"\"\"Consume messages from pull subscription\"\"\""
        ]
      ]
    },
    {
      "file": "shared/infrastructure/nats_client.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          12,
          "# Try to import real implementation"
        ]
      ]
    },
    {
      "file": "models/domain.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          31,
          "\"\"\"Object type classification\"\"\""
        ],
        [
          304,
          "\"\"\"Interface domain model - defines contracts for ObjectTypes\"\"\""
        ],
        [
          334,
          "\"\"\"SharedProperty domain model - reusable property definitions\"\"\""
        ]
      ]
    },
    {
      "file": "models/issue_tracking.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          195,
          "# Additional metadata from issue tracker"
        ]
      ]
    },
    {
      "file": "models/issue_tracking.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          312,
          "\"\"\"Extract all issue references from text (e.g., commit message, PR description)\"\"\""
        ]
      ]
    },
    {
      "file": "models/function_types.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          725,
          "# Create FunctionType instance from definition"
        ],
        [
          822,
          "# Track available outputs from previous steps"
        ]
      ]
    },
    {
      "file": "models/function_types.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          53,
          "\"\"\"Function parameter definition\"\"\""
        ],
        [
          79,
          "\"\"\"Function return type definition\"\"\""
        ],
        [
          135,
          "\"\"\"Function type definition - metadata for reusable computational logic\"\"\""
        ],
        [
          676,
          "\"\"\"Validates function type definitions\"\"\""
        ],
        [
          680,
          "\"\"\"Validate function type definition\"\"\""
        ]
      ]
    },
    {
      "file": "models/etag.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          48,
          "\"\"\"Generate ETag from version info\"\"\""
        ]
      ]
    },
    {
      "file": "models/data_types.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          783,
          "# Create DataType instance from definition"
        ]
      ]
    },
    {
      "file": "models/data_types.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          80,
          "\"\"\"Base data type definition - OMS metadata for type system\"\"\""
        ],
        [
          700,
          "\"\"\"Convert value from one type to another\"\"\""
        ],
        [
          778,
          "\"\"\"Load system-defined data types\"\"\""
        ]
      ]
    },
    {
      "file": "models/struct_types.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          153,
          "\"\"\"Get a specific field definition by name\"\"\""
        ],
        [
          332,
          "\"\"\"Load predefined struct types\"\"\""
        ]
      ]
    },
    {
      "file": "models/struct_types.py",
      "pattern_type": "todo_patterns",
      "matches": [
        [
          127,
          "# TODO: Validate against data_type_id and semantic_type_id"
        ]
      ]
    },
    {
      "file": "models/shadow_index.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          97,
          "\"\"\"Request to switch from shadow to primary index\"\"\""
        ]
      ]
    },
    {
      "file": "models/semantic_types.py",
      "pattern_type": "old_string_formatting",
      "matches": [
        [
          143,
          "return self.display_format.format(value=value)"
        ]
      ]
    },
    {
      "file": "models/semantic_types.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          340,
          "\"\"\"Load predefined semantic types\"\"\""
        ]
      ]
    },
    {
      "file": "models/audit_events.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          268,
          "\"\"\"Helper to create an audit event with common defaults\"\"\""
        ]
      ]
    },
    {
      "file": "grpc_services/server.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          128,
          "# Get schema from core.user.service"
        ]
      ]
    },
    {
      "file": "grpc_services/server.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          221,
          "\"\"\"Extract user context from gRPC metadata\"\"\""
        ],
        [
          302,
          "\"\"\"Extract user context from gRPC metadata\"\"\""
        ]
      ]
    },
    {
      "file": "grpc_services/server.py",
      "pattern_type": "todo_patterns",
      "matches": [
        [
          19,
          "# TODO: Generate protobuf files first with: protoc --python_out=. --grpc_python_out=. *.proto"
        ]
      ]
    },
    {
      "file": "scripts/fix_datetime_deprecation.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          32,
          "# Add timezone to existing datetime import"
        ],
        [
          39,
          "# If still no timezone import, add it after datetime import"
        ]
      ]
    },
    {
      "file": "scripts/deploy_production.py",
      "pattern_type": "old_string_formatting",
      "matches": [
        [
          523,
          "\"\"\".format(port=self.config['services']['oms']['port'])"
        ]
      ]
    },
    {
      "file": "scripts/generate_schemas.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          163,
          "# Load from actual registry"
        ]
      ]
    },
    {
      "file": "scripts/generate_schemas.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          57,
          "\"\"\"Load schema data from registry or use test data\"\"\""
        ]
      ]
    },
    {
      "file": "scripts/test_validation_cleanup.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          27,
          "# Test middleware import"
        ]
      ]
    },
    {
      "file": "scripts/test_validation_cleanup.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          13,
          "\"\"\"Test that all imports work correctly after cleanup\"\"\""
        ]
      ]
    },
    {
      "file": "scripts/test_p2_implementation.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          352,
          "# Create mock rule results from both P1 and P2"
        ]
      ]
    },
    {
      "file": "scripts/find_legacy_code.py",
      "pattern_type": "old_imports",
      "matches": [
        [
          32,
          "r\"from __future__ import\","
        ]
      ]
    },
    {
      "file": "scripts/find_legacy_code.py",
      "pattern_type": "old_imports",
      "matches": [
        [
          33,
          "r\"import imp\\b\","
        ]
      ]
    },
    {
      "file": "scripts/find_legacy_code.py",
      "pattern_type": "old_imports",
      "matches": [
        [
          34,
          "r\"from imp import\","
        ]
      ]
    },
    {
      "file": "scripts/find_legacy_code.py",
      "pattern_type": "old_imports",
      "matches": [
        [
          35,
          "r\"import urllib2\","
        ]
      ]
    },
    {
      "file": "scripts/find_legacy_code.py",
      "pattern_type": "old_imports",
      "matches": [
        [
          36,
          "r\"import ConfigParser\","
        ]
      ]
    },
    {
      "file": "scripts/find_legacy_code.py",
      "pattern_type": "old_string_formatting",
      "matches": [
        [
          47,
          "r\"\\.format\\(\",  # .format() instead of f-strings"
        ]
      ]
    },
    {
      "file": "scripts/find_legacy_code.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          144,
          "# \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294 import \ucc3e\uae30"
        ]
      ]
    },
    {
      "file": "scripts/find_legacy_code.py",
      "pattern_type": "todo_patterns",
      "matches": [
        [
          120,
          "# TODO/FIXME \uac80\uc0c9"
        ]
      ]
    },
    {
      "file": "scripts/verify_imports.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          46,
          "# \uc0ac\uc6a9\uc790 \ud53c\ub4dc\ubc31: \"from core.history.models import CommitDetail\" \uac19\uc740 \uad6c\ubb38\uc744"
        ],
        [
          61,
          "# Try to import the module"
        ],
        [
          113,
          "# Extract modules from file"
        ]
      ]
    },
    {
      "file": "scripts/quick_verify.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          2,
          "\"\"\"Quick verification of critical imports\"\"\""
        ],
        [
          5,
          "\"\"\"Test critical import fixes\"\"\""
        ]
      ]
    },
    {
      "file": "scripts/fix_imports.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          33,
          "# P1 Critical: Relative import fixes (\uc774\ubbf8 \uc644\ub8cc\ub41c \uac83\ub4e4)"
        ]
      ]
    },
    {
      "file": "scripts/fix_imports.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          104,
          "\"\"\"\ub2e8\uc77c \ud30c\uc77c\uc758 import \uc218\uc815\"\"\""
        ],
        [
          130,
          "\"\"\"\ubaa8\ub4e0 Python \ud30c\uc77c\uc758 import \uc218\uc815\"\"\""
        ]
      ]
    },
    {
      "file": "scripts/enhanced_import_check.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          66,
          "# \uc0ac\uc6a9\uc790 \ud53c\ub4dc\ubc31: \"from core.history.models import CommitDetail\" \uac19\uc740 \uad6c\ubb38\uc744"
        ],
        [
          95,
          "# Relative import \ucc98\ub9ac"
        ]
      ]
    },
    {
      "file": "scripts/enhanced_import_check.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          46,
          "\"\"\"\ud30c\uc77c\uc5d0\uc11c import \uad6c\ubb38 \ucd94\ucd9c\"\"\""
        ],
        [
          78,
          "\"\"\"\uc2e4\uc81c import \ud14c\uc2a4\ud2b8\"\"\""
        ],
        [
          191,
          "\"\"\"\uc2e4\ud328\ud55c import \ubd84\ub958\"\"\""
        ]
      ]
    },
    {
      "file": "scripts/migrate_to_msa_auth.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          52,
          "# Define import patterns to find"
        ],
        [
          73,
          "# IAMScope should now come from shared contracts"
        ]
      ]
    },
    {
      "file": "scripts/migrate_to_msa_auth.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          13,
          "\"\"\"Find all Python files containing specific import patterns\"\"\""
        ],
        [
          28,
          "\"\"\"Update imports in a file\"\"\""
        ]
      ]
    },
    {
      "file": "scripts/test_p2_mock_integration.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          356,
          "# Check routing rules from MultiPlatformRouter defaults"
        ]
      ]
    },
    {
      "file": "scripts/compare_schema_implementation.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          84,
          "# Check each schema class"
        ]
      ]
    },
    {
      "file": "scripts/backup_validation_files.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          53,
          "\"\"\"Restore script for validation cleanup backup from {timestamp}\"\"\""
        ]
      ]
    },
    {
      "file": "scripts/demo_migration.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          19,
          "\"\"\"Demonstrate the migration from legacy to native\"\"\""
        ]
      ]
    },
    {
      "file": "scripts/test_validation_final.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          25,
          "# Test middleware import"
        ]
      ]
    },
    {
      "file": "scripts/test_validation_final.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          11,
          "\"\"\"Test that all imports work correctly\"\"\""
        ]
      ]
    },
    {
      "file": "scripts/remove_validators_only.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          34,
          "# Now we should be at the def line"
        ],
        [
          73,
          "# Remove from end to start to preserve positions"
        ],
        [
          93,
          "# Remove field_validator from imports"
        ]
      ]
    },
    {
      "file": "scripts/remove_validators_only.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          68,
          "\"\"\"Remove validator blocks from content\"\"\""
        ],
        [
          91,
          "\"\"\"Remove field_validator from imports if no longer needed\"\"\""
        ],
        [
          139,
          "\"\"\"Verify that model classes are still intact\"\"\""
        ]
      ]
    },
    {
      "file": "scripts/test_simple_foundry.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          121,
          "\"\"\"Test Foundry alerting rule class structure\"\"\""
        ]
      ]
    },
    {
      "file": "scripts/refactor_models_validation.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          22,
          "# Remove from end to start to preserve positions"
        ]
      ]
    },
    {
      "file": "scripts/refactor_models_validation.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          39,
          "\"\"\"Remove validator-related imports\"\"\""
        ]
      ]
    },
    {
      "file": "scripts/run_all_tests.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          180,
          "\"\"\"Test complete workflow from schema definition to API generation\"\"\""
        ]
      ]
    },
    {
      "file": "scripts/test_terminus_native.py",
      "pattern_type": "old_string_formatting",
      "matches": [
        [
          121,
          "print(\"1. Toggle native implementation (currently: {})\".format("
        ]
      ]
    },
    {
      "file": "scripts/test_terminus_traversal.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          343,
          "# Find path from customer order to product origin"
        ]
      ]
    },
    {
      "file": "scripts/refactor_enterprise_validation.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          52,
          "# Entity type mapping from URL paths"
        ],
        [
          76,
          "# Determine entity type from path"
        ],
        [
          99,
          "# Get validation level from headers"
        ]
      ]
    },
    {
      "file": "scripts/refactor_enterprise_validation.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          197,
          "\"\"\"Get validation level from request headers\"\"\""
        ]
      ]
    },
    {
      "file": "scripts/fix_model_imports.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          18,
          "# Find the right place to insert the import (after other imports)"
        ],
        [
          28,
          "# Insert Pydantic import"
        ]
      ]
    },
    {
      "file": "scripts/fix_model_imports.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          11,
          "\"\"\"Add missing Pydantic imports\"\"\""
        ],
        [
          41,
          "\"\"\"Fix imports in all model files\"\"\""
        ]
      ]
    },
    {
      "file": "scripts/ci/validate_oms_changes.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          162,
          "# 1. Load schema from both branches"
        ],
        [
          335,
          "# Get PR number from GitHub environment"
        ]
      ]
    },
    {
      "file": "api/v1/traversal_routes.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          17,
          "# Deprecated import - using validation layer instead"
        ],
        [
          18,
          "# from core.traversal.merge_validator import EnterpriseSemanticMergeValidator"
        ]
      ]
    },
    {
      "file": "api/v1/branch_lock_routes.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          337,
          "# Extract locked resource types from active locks"
        ]
      ]
    },
    {
      "file": "api/v1/validation_routes.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          248,
          "# Get all rules from registry"
        ]
      ]
    },
    {
      "file": "api/v1/shadow_index_routes.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          230,
          "\"\"\"Perform atomic switch from shadow to primary index (requires short lock < 10s)\"\"\""
        ]
      ]
    },
    {
      "file": "api/v1/idempotent_routes.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          253,
          "# This would be implemented to replay events from event store"
        ]
      ]
    },
    {
      "file": "api/v1/schema_routes.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          807,
          "\"\"\"Struct field definition\"\"\""
        ]
      ]
    },
    {
      "file": "api/v1/issue_tracking_routes.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          394,
          "\"\"\"Parse issue reference from text\"\"\""
        ]
      ]
    },
    {
      "file": "api/v1/version_routes.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          315,
          "# Get versions from both branches"
        ]
      ]
    },
    {
      "file": "api/v1/batch_routes.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          55,
          "# In production, this would come from the service container"
        ],
        [
          73,
          "# In production, this would come from the service container"
        ],
        [
          94,
          "# Extract branch from ID format: branch:type_name"
        ],
        [
          360,
          "# In production, this would return real metrics from monitoring system"
        ]
      ]
    },
    {
      "file": "api/v1/semantic_types/endpoints.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          18,
          "# Use real auth from middleware in production"
        ],
        [
          77,
          "# Generate ID from name"
        ],
        [
          256,
          "# Remove from registry"
        ]
      ]
    },
    {
      "file": "api/v1/semantic_types/endpoints.py",
      "pattern_type": "todo_patterns",
      "matches": [
        [
          253,
          "# TODO: Check if type is in use by any properties"
        ]
      ]
    },
    {
      "file": "api/v1/schema_generation/endpoints.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          17,
          "# Use real auth from middleware in production"
        ]
      ]
    },
    {
      "file": "api/v1/struct_types/endpoints.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          17,
          "# Use real auth from middleware in production"
        ],
        [
          91,
          "# Generate ID from name"
        ],
        [
          304,
          "# Remove from registry"
        ]
      ]
    },
    {
      "file": "api/v1/struct_types/endpoints.py",
      "pattern_type": "todo_patterns",
      "matches": [
        [
          301,
          "# TODO: Check if type is in use by any properties"
        ]
      ]
    },
    {
      "file": "api/graphql/auth.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          35,
          "# Try to get user from request state (set by middleware)"
        ],
        [
          161,
          "# Try to get token from headers"
        ],
        [
          197,
          "# Remove from connections"
        ]
      ]
    },
    {
      "file": "api/graphql/bff.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          367,
          "# Would load from service with proper pagination"
        ],
        [
          415,
          "# Extract client type from headers or user agent"
        ]
      ]
    },
    {
      "file": "api/graphql/bff.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          41,
          "\"\"\"Profile defining what data a client type needs\"\"\""
        ],
        [
          414,
          "\"\"\"Get client profile from context\"\"\""
        ]
      ]
    },
    {
      "file": "api/graphql/resolvers.py",
      "pattern_type": "todo_patterns",
      "matches": [
        [
          496,
          "# TODO: \uc2e4\uc81c \ub370\uc774\ud130 \ubcc0\ud658 \ub85c\uc9c1 \uad6c\ud604"
        ]
      ]
    },
    {
      "file": "api/graphql/monitoring.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          418,
          "# Get query ID from context"
        ]
      ]
    },
    {
      "file": "api/graphql/dataloaders.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          82,
          "\"\"\"Get multiple values from cache\"\"\""
        ]
      ]
    },
    {
      "file": "api/graphql/security.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          339,
          "# Extract query from request"
        ]
      ]
    },
    {
      "file": "api/graphql/security.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          142,
          "\"\"\"Extract numeric value from argument node\"\"\""
        ]
      ]
    },
    {
      "file": "api/graphql/subscriptions.py",
      "pattern_type": "todo_patterns",
      "matches": [
        [
          324,
          "# TODO: \uc791\uc5c5 \uc18c\uc720\uc790 \ud655\uc778 \ub85c\uc9c1 \uad6c\ud604"
        ]
      ]
    },
    {
      "file": "api/graphql/cache.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          368,
          "# Try to get from cache"
        ]
      ]
    },
    {
      "file": "api/graphql/cache.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          165,
          "\"\"\"Get a value from cache\"\"\""
        ],
        [
          283,
          "\"\"\"Warmup cache with predefined queries\"\"\""
        ],
        [
          392,
          "\"\"\"Extract selected fields from GraphQL query\"\"\""
        ],
        [
          398,
          "\"\"\"Extract object type dependencies from result\"\"\""
        ]
      ]
    },
    {
      "file": "api/graphql/enhanced_resolvers.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          60,
          "# Extract branch and type name from ID"
        ],
        [
          98,
          "# Extract branch and type name from ID"
        ],
        [
          404,
          "# Extract client type from headers"
        ]
      ]
    },
    {
      "file": "api/graphql/enhanced_resolvers.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          38,
          "\"\"\"Batch load object types from schema service with fallback\"\"\""
        ]
      ]
    },
    {
      "file": "api/graphql/history_schema.py",
      "pattern_type": "todo_patterns",
      "matches": [
        [
          174,
          "# TODO: Resolver \uad6c\ud604"
        ],
        [
          186,
          "# TODO: Resolver \uad6c\ud604"
        ],
        [
          203,
          "# TODO: Resolver \uad6c\ud604"
        ],
        [
          220,
          "# TODO: Resolver \uad6c\ud604"
        ]
      ]
    },
    {
      "file": "api/graphql/enhanced_main.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          153,
          "# Extract client info from headers"
        ],
        [
          206,
          "# Get user from request state"
        ],
        [
          566,
          "# Would get from context loaders"
        ],
        [
          571,
          "# Integration helper to migrate from old to new"
        ]
      ]
    },
    {
      "file": "api/graphql/enhanced_main.py",
      "pattern_type": "commented_code",
      "matches": [
        [
          573,
          "\"\"\"Replace default resolvers with enhanced ones\"\"\""
        ]
      ]
    }
  ],
  "large_files": [
    {
      "file": "main_secure.py",
      "lines": 514,
      "size_kb": 17.2275390625
    },
    {
      "file": "main.py",
      "lines": 538,
      "size_kb": 18.4365234375
    },
    {
      "file": "middleware/auth_secure.py",
      "lines": 553,
      "size_kb": 22.71484375
    },
    {
      "file": "middleware/rate_limiter.py",
      "lines": 842,
      "size_kb": 28.7919921875
    },
    {
      "file": "middleware/dlq_handler.py",
      "lines": 823,
      "size_kb": 28.052734375
    },
    {
      "file": "middleware/service_config.py",
      "lines": 705,
      "size_kb": 24.2900390625
    },
    {
      "file": "middleware/circuit_breaker.py",
      "lines": 667,
      "size_kb": 23.98828125
    },
    {
      "file": "middleware/component_middleware.py",
      "lines": 751,
      "size_kb": 25.6171875
    },
    {
      "file": "middleware/component_health.py",
      "lines": 839,
      "size_kb": 29.1630859375
    },
    {
      "file": "middleware/event_state_store.py",
      "lines": 713,
      "size_kb": 22.9140625
    },
    {
      "file": "middleware/service_discovery.py",
      "lines": 800,
      "size_kb": 28.916015625
    },
    {
      "file": "core/shadow_index/manager.py",
      "lines": 682,
      "size_kb": 26.4658203125
    },
    {
      "file": "core/event_consumer/funnel_indexing_handler.py",
      "lines": 663,
      "size_kb": 25.2099609375
    },
    {
      "file": "core/idempotent/consumer_service.py",
      "lines": 583,
      "size_kb": 24.751953125
    },
    {
      "file": "core/issue_tracking/issue_service.py",
      "lines": 641,
      "size_kb": 24.65625
    },
    {
      "file": "core/scheduler/advanced_scheduler.py",
      "lines": 903,
      "size_kb": 30.1298828125
    },
    {
      "file": "core/schema/extended_service.py",
      "lines": 578,
      "size_kb": 21.56640625
    },
    {
      "file": "core/event_publisher/outbox_service.py",
      "lines": 768,
      "size_kb": 27.9599609375
    },
    {
      "file": "core/event_publisher/multi_platform_router.py",
      "lines": 504,
      "size_kb": 17.244140625
    },
    {
      "file": "core/traversal/caching.py",
      "lines": 550,
      "size_kb": 18.7265625
    },
    {
      "file": "core/traversal/semantic_validator.py",
      "lines": 711,
      "size_kb": 30.1474609375
    },
    {
      "file": "core/api/schema_generator.py",
      "lines": 1025,
      "size_kb": 36.1123046875
    },
    {
      "file": "core/schema_generator/sdk_generator.py",
      "lines": 999,
      "size_kb": 31.0341796875
    },
    {
      "file": "core/schema_generator/graphql_to_asyncapi.py",
      "lines": 690,
      "size_kb": 24.5673828125
    },
    {
      "file": "core/schema_generator/asyncapi_generator.py",
      "lines": 862,
      "size_kb": 30.732421875
    },
    {
      "file": "core/versioning/version_service.py",
      "lines": 568,
      "size_kb": 21.859375
    },
    {
      "file": "core/backup/production_backup.py",
      "lines": 596,
      "size_kb": 22.8095703125
    },
    {
      "file": "core/backup/main.py",
      "lines": 510,
      "size_kb": 18.2646484375
    },
    {
      "file": "core/validation/migration_planner.py",
      "lines": 665,
      "size_kb": 23.6748046875
    },
    {
      "file": "core/validation/policy_engine.py",
      "lines": 525,
      "size_kb": 20.94140625
    },
    {
      "file": "core/validation/ci_integration.py",
      "lines": 574,
      "size_kb": 18.408203125
    },
    {
      "file": "core/validation/naming_config.py",
      "lines": 823,
      "size_kb": 28.5986328125
    },
    {
      "file": "core/validation/naming_history.py",
      "lines": 618,
      "size_kb": 19.7041015625
    },
    {
      "file": "core/validation/tampering_detection.py",
      "lines": 598,
      "size_kb": 20.0341796875
    },
    {
      "file": "core/validation/input_sanitization.py",
      "lines": 558,
      "size_kb": 18.1572265625
    },
    {
      "file": "core/validation/pipeline.py",
      "lines": 616,
      "size_kb": 22.7802734375
    },
    {
      "file": "core/validation/policy_signing.py",
      "lines": 514,
      "size_kb": 16.5712890625
    },
    {
      "file": "core/validation/naming_convention.py",
      "lines": 736,
      "size_kb": 25.1201171875
    },
    {
      "file": "core/validation/validation_logging.py",
      "lines": 721,
      "size_kb": 25.732421875
    },
    {
      "file": "core/validation/enterprise_service.py",
      "lines": 963,
      "size_kb": 37.9892578125
    },
    {
      "file": "core/validation/adapters.py",
      "lines": 764,
      "size_kb": 24.2685546875
    },
    {
      "file": "core/validation/oms_rules.py",
      "lines": 723,
      "size_kb": 27.9912109375
    },
    {
      "file": "core/validation/rules/timeseries_event_mapping_rule.py",
      "lines": 558,
      "size_kb": 22.0234375
    },
    {
      "file": "core/validation/rules/data_impact_analyzer.py",
      "lines": 626,
      "size_kb": 22.8466796875
    },
    {
      "file": "core/validation/rules/array_element_rule.py",
      "lines": 609,
      "size_kb": 24.173828125
    },
    {
      "file": "core/validation/rules/primary_key_change.py",
      "lines": 738,
      "size_kb": 25.4638671875
    },
    {
      "file": "core/validation/rules/required_field.py",
      "lines": 769,
      "size_kb": 25.9453125
    },
    {
      "file": "core/validation/rules/foreign_ref_integrity_rule.py",
      "lines": 620,
      "size_kb": 24.310546875
    },
    {
      "file": "sdks/python/oms_event_sdk/client.py",
      "lines": 769,
      "size_kb": 23.93359375
    },
    {
      "file": "sdks/python/oms_event_sdk_py/client.py",
      "lines": 769,
      "size_kb": 23.9365234375
    },
    {
      "file": "sdks/typescript/types.ts",
      "lines": 1178,
      "size_kb": 29.21484375
    },
    {
      "file": "sdks/typescript/client.ts",
      "lines": 517,
      "size_kb": 17.1044921875
    },
    {
      "file": "tests/unit/test_caching.py",
      "lines": 667,
      "size_kb": 22.2060546875
    },
    {
      "file": "tests/integration/test_validation_integration.py",
      "lines": 581,
      "size_kb": 19.6962890625
    },
    {
      "file": "tests/integration/test_validation_integration_fixed.py",
      "lines": 595,
      "size_kb": 20.009765625
    },
    {
      "file": "utils/retry_strategy.py",
      "lines": 511,
      "size_kb": 18.73046875
    },
    {
      "file": "shared/cache/terminusdb_cache.py",
      "lines": 501,
      "size_kb": 18.015625
    },
    {
      "file": "shared/models/function_types.py",
      "lines": 847,
      "size_kb": 28.0224609375
    },
    {
      "file": "shared/models/data_types.py",
      "lines": 878,
      "size_kb": 30.69921875
    },
    {
      "file": "models/function_types.py",
      "lines": 847,
      "size_kb": 28.0224609375
    },
    {
      "file": "models/data_types.py",
      "lines": 878,
      "size_kb": 30.69921875
    },
    {
      "file": "scripts/deploy_production.py",
      "lines": 613,
      "size_kb": 19.294921875
    },
    {
      "file": "scripts/test_p2_mock_integration.py",
      "lines": 504,
      "size_kb": 19.69921875
    },
    {
      "file": "scripts/test_validation_gaps.py",
      "lines": 529,
      "size_kb": 22.115234375
    },
    {
      "file": "api/v1/traversal_routes.py",
      "lines": 685,
      "size_kb": 25.408203125
    },
    {
      "file": "api/v1/branch_lock_routes.py",
      "lines": 693,
      "size_kb": 23.861328125
    },
    {
      "file": "api/v1/schema_routes.py",
      "lines": 867,
      "size_kb": 28.7314453125
    },
    {
      "file": "api/graphql/traversal_schema.py",
      "lines": 536,
      "size_kb": 15.4384765625
    },
    {
      "file": "api/graphql/resolvers.py",
      "lines": 1800,
      "size_kb": 68.1357421875
    },
    {
      "file": "api/graphql/monitoring.py",
      "lines": 503,
      "size_kb": 15.6328125
    },
    {
      "file": "api/graphql/schema.py",
      "lines": 973,
      "size_kb": 26.4873046875
    },
    {
      "file": "api/graphql/enhanced_main.py",
      "lines": 576,
      "size_kb": 19.1513671875
    },
    {
      "file": "api/gateway/graphql_proxy.py",
      "lines": 642,
      "size_kb": 18.4580078125
    }
  ],
  "todo_fixme": [
    {
      "file": "core/security/security_monitor.py",
      "line": 128,
      "type": "TODO",
      "content": "# TODO: \uc2e4\uc81c \ud658\uacbd\uc5d0\uc11c\ub294 \uc774\uba54\uc77c, SMS, Slack \ub4f1\uc73c\ub85c \uc54c\ub9bc \ubc1c\uc1a1"
    },
    {
      "file": "core/event_consumer/funnel_indexing_handler.py",
      "line": 265,
      "type": "TODO",
      "content": "# TODO: Implement actual conflict detection logic"
    },
    {
      "file": "core/event_consumer/funnel_indexing_handler.py",
      "line": 367,
      "type": "TODO",
      "content": "# TODO: Save to audit database"
    },
    {
      "file": "core/event_consumer/funnel_indexing_handler.py",
      "line": 575,
      "type": "TODO",
      "content": "# TODO: Save to audit database"
    },
    {
      "file": "core/event_consumer/funnel_indexing_handler.py",
      "line": 595,
      "type": "TODO",
      "content": "# TODO: Implement actual alerting"
    },
    {
      "file": "core/event_consumer/funnel_indexing_handler.py",
      "line": 629,
      "type": "TODO",
      "content": "# TODO: Implement actual alerting (email, Slack, etc.)"
    },
    {
      "file": "core/event_consumer/funnel_indexing_handler.py",
      "line": 645,
      "type": "TODO",
      "content": "# TODO: Implement actual notifications"
    },
    {
      "file": "core/integrations/__init__.py",
      "line": 40,
      "type": "DEPRECATED",
      "content": "# DEPRECATED functions for backward compatibility"
    },
    {
      "file": "core/audit/audit_service.py",
      "line": 396,
      "type": "TODO",
      "content": "# TODO: Integrate with alerting system (Slack, email, PagerDuty, etc.)"
    },
    {
      "file": "core/audit/audit_service.py",
      "line": 416,
      "type": "TODO",
      "content": "# TODO: Implement automatic response (rate limiting, account suspension, etc.)"
    },
    {
      "file": "core/event_publisher/__init__.py",
      "line": 45,
      "type": "DEPRECATED",
      "content": "# DEPRECATED: Use get_event_publisher() instead"
    },
    {
      "file": "core/event_publisher/enhanced_event_service.py",
      "line": 180,
      "type": "TODO",
      "content": "# TODO: NATS publisher \uc5f0\ub3d9"
    },
    {
      "file": "core/traversal/merge_validator.py",
      "line": 32,
      "type": "DEPRECATED",
      "content": "# DEPRECATED: Use validation layer enums instead"
    },
    {
      "file": "core/event_subscriber/main.py",
      "line": 255,
      "type": "TODO",
      "content": "# TODO: \uc2e4\uc81c \uac10\uc0ac \ub85c\uadf8 \uc800\uc7a5\uc18c\uc5d0 \uc800\uc7a5"
    },
    {
      "file": "core/event_subscriber/main.py",
      "line": 260,
      "type": "TODO",
      "content": "# TODO: \uad00\ub828 \uce90\uc2dc \ubb34\ud6a8\ud654 \ub85c\uc9c1"
    },
    {
      "file": "core/event_subscriber/main.py",
      "line": 265,
      "type": "TODO",
      "content": "# TODO: \uc678\ubd80 \uc2dc\uc2a4\ud15c \uc6f9\ud6c5 \ud638\ucd9c"
    },
    {
      "file": "core/event_subscriber/main.py",
      "line": 270,
      "type": "TODO",
      "content": "# TODO: \ube0c\ub79c\uce58 \ubcf4\ud638 \uaddc\uce59 \uc790\ub3d9 \uc124\uc815"
    },
    {
      "file": "core/event_subscriber/main.py",
      "line": 275,
      "type": "TODO",
      "content": "# TODO: CI/CD \ud30c\uc774\ud504\ub77c\uc778 \ud2b8\ub9ac\uac70"
    },
    {
      "file": "core/event_subscriber/main.py",
      "line": 280,
      "type": "TODO",
      "content": "# TODO: \uc774\uba54\uc77c/\uc2ac\ub799 \uc54c\ub9bc \ubc1c\uc1a1"
    },
    {
      "file": "core/event_subscriber/main.py",
      "line": 285,
      "type": "TODO",
      "content": "# TODO: \uc561\uc158 \uc2e4\ud589 \uc0c1\ud0dc \ucd94\uc801"
    },
    {
      "file": "core/event_subscriber/main.py",
      "line": 290,
      "type": "TODO",
      "content": "# TODO: \uba54\ud2b8\ub9ad \uc800\uc7a5\uc18c\uc5d0 \uc5c5\ub370\uc774\ud2b8"
    },
    {
      "file": "core/event_subscriber/main.py",
      "line": 295,
      "type": "TODO",
      "content": "# TODO: \uc911\uc694\ud55c \uc561\uc158 \uc2e4\ud328\uc2dc \uc989\uc2dc \uc54c\ub78c"
    },
    {
      "file": "core/event_subscriber/main.py",
      "line": 300,
      "type": "TODO",
      "content": "# TODO: \uac80\uc99d \ud1b5\uacc4 \uc5c5\ub370\uc774\ud2b8"
    },
    {
      "file": "shared/__init__.py",
      "line": 117,
      "type": "TODO",
      "content": "# TODO(#OMS-SHIM-010): TerminusDB client should use database.clients path"
    },
    {
      "file": "shared/audit/audit_logger.py",
      "line": 50,
      "type": "TODO",
      "content": "# TODO: \uc2e4\uc81c \uad6c\ud604\uc5d0\uc11c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub098 \uc678\ubd80 \ub85c\uae45 \uc2dc\uc2a4\ud15c\uc5d0 \uc800\uc7a5"
    },
    {
      "file": "models/struct_types.py",
      "line": 127,
      "type": "TODO",
      "content": "# TODO: Validate against data_type_id and semantic_type_id"
    },
    {
      "file": "grpc_services/server.py",
      "line": 19,
      "type": "TODO",
      "content": "# TODO: Generate protobuf files first with: protoc --python_out=. --grpc_python_out=. *.proto"
    },
    {
      "file": "scripts/find_legacy_code.py",
      "line": 120,
      "type": "TODO",
      "content": "# TODO/FIXME \uac80\uc0c9"
    },
    {
      "file": "api/v1/traversal_routes.py",
      "line": 17,
      "type": "Deprecated",
      "content": "# Deprecated import - using validation layer instead"
    },
    {
      "file": "api/v1/semantic_types/endpoints.py",
      "line": 253,
      "type": "TODO",
      "content": "# TODO: Check if type is in use by any properties"
    },
    {
      "file": "api/v1/struct_types/endpoints.py",
      "line": 301,
      "type": "TODO",
      "content": "# TODO: Check if type is in use by any properties"
    },
    {
      "file": "api/graphql/resolvers.py",
      "line": 496,
      "type": "TODO",
      "content": "# TODO: \uc2e4\uc81c \ub370\uc774\ud130 \ubcc0\ud658 \ub85c\uc9c1 \uad6c\ud604"
    },
    {
      "file": "api/graphql/subscriptions.py",
      "line": 324,
      "type": "TODO",
      "content": "# TODO: \uc791\uc5c5 \uc18c\uc720\uc790 \ud655\uc778 \ub85c\uc9c1 \uad6c\ud604"
    },
    {
      "file": "api/graphql/history_schema.py",
      "line": 174,
      "type": "TODO",
      "content": "# TODO: Resolver \uad6c\ud604"
    },
    {
      "file": "api/graphql/history_schema.py",
      "line": 186,
      "type": "TODO",
      "content": "# TODO: Resolver \uad6c\ud604"
    },
    {
      "file": "api/graphql/history_schema.py",
      "line": 203,
      "type": "TODO",
      "content": "# TODO: Resolver \uad6c\ud604"
    },
    {
      "file": "api/graphql/history_schema.py",
      "line": 220,
      "type": "TODO",
      "content": "# TODO: Resolver \uad6c\ud604"
    }
  ]
}