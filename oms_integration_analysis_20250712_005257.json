{
  "timestamp": "2025-07-12T00:52:55.593523",
  "architecture": {
    "oms": {
      "api_routes": {
        "branch_routes": {
          "file": "ontology-management-service/api/v1/branch_routes.py",
          "endpoints": [
            {
              "method": "get",
              "path": "/"
            },
            {
              "method": "post",
              "path": "/"
            },
            {
              "method": "get",
              "path": "/{branch_name}"
            },
            {
              "method": "get",
              "path": "/{branch_id}"
            },
            {
              "method": "get",
              "path": "/{branch_id}/proposals"
            },
            {
              "method": "get",
              "path": "/{branch_id}/proposals/{proposal_id}"
            },
            {
              "method": "post",
              "path": "/{branch_id}/proposals/{proposal_id}/merge"
            },
            {
              "method": "get",
              "path": "/jobs/{job_id}"
            },
            {
              "method": "post",
              "path": "/jobs/{job_id}/cancel"
            },
            {
              "method": "post",
              "path": "/{branch_id}/proposals/{proposal_id}/merge-sync"
            }
          ],
          "dependencies": [
            "require_scope([IAMScope.PROPOSALS_READ]",
            "get_job_service",
            "require_scope([IAMScope.PROPOSALS_WRITE]",
            "get_branch_service",
            "require_scope([IAMScope.BRANCHES_WRITE]",
            "require_scope([IAMScope.BRANCHES_READ]",
            "get_current_user"
          ],
          "services": []
        },
        "audit_routes": {
          "file": "ontology-management-service/api/v1/audit_routes.py",
          "endpoints": [
            {
              "method": "get",
              "path": "/events"
            },
            {
              "method": "get",
              "path": "/events/{event_id}"
            },
            {
              "method": "get",
              "path": "/users/{user_id}/events"
            },
            {
              "method": "get",
              "path": "/targets/{target_type}/{target_id}/events"
            },
            {
              "method": "get",
              "path": "/health"
            },
            {
              "method": "get",
              "path": "/migration/status"
            },
            {
              "method": "post",
              "path": "/events"
            }
          ],
          "dependencies": [
            "get_current_user",
            "require_scope([IAMScope.AUDIT_READ]",
            "require_scope([IAMScope.SYSTEM_ADMIN]"
          ],
          "services": []
        },
        "resilience_dashboard_routes": {
          "file": "ontology-management-service/api/v1/resilience_dashboard_routes.py",
          "endpoints": [
            {
              "method": "get",
              "path": "/dashboard"
            },
            {
              "method": "get",
              "path": "/components/{component_name}/metrics"
            },
            {
              "method": "get",
              "path": "/health-check"
            },
            {
              "method": "get",
              "path": "/alerts"
            }
          ],
          "dependencies": [
            "get_current_user"
          ],
          "services": []
        },
        "graph_health_routes": {
          "file": "ontology-management-service/api/v1/graph_health_routes.py",
          "endpoints": [
            {
              "method": "get",
              "path": "/"
            },
            {
              "method": "get",
              "path": "/redis"
            },
            {
              "method": "get",
              "path": "/terminusdb"
            },
            {
              "method": "get",
              "path": "/tracing"
            },
            {
              "method": "get",
              "path": "/cache/stats"
            },
            {
              "method": "post",
              "path": "/cache/invalidate"
            }
          ],
          "dependencies": [],
          "services": []
        },
        "branch_lock_routes": {
          "file": "ontology-management-service/api/v1/branch_lock_routes.py",
          "endpoints": [
            {
              "method": "get",
              "path": "/status/{branch_name}"
            },
            {
              "method": "get",
              "path": "/locks"
            },
            {
              "method": "get",
              "path": "/locks/{lock_id}"
            },
            {
              "method": "post",
              "path": "/acquire"
            },
            {
              "method": "delete",
              "path": "/locks/{lock_id}"
            },
            {
              "method": "post",
              "path": "/force-unlock/{branch_name}"
            },
            {
              "method": "post",
              "path": "/indexing/{branch_name}/start"
            },
            {
              "method": "post",
              "path": "/indexing/{branch_name}/complete"
            },
            {
              "method": "post",
              "path": "/cleanup-expired"
            },
            {
              "method": "get",
              "path": "/dashboard"
            },
            {
              "method": "post",
              "path": "/locks/{lock_id}/heartbeat"
            },
            {
              "method": "get",
              "path": "/locks/{lock_id}/health"
            },
            {
              "method": "post",
              "path": "/locks/{lock_id}/extend-ttl"
            },
            {
              "method": "post",
              "path": "/cleanup-heartbeat-expired"
            },
            {
              "method": "get",
              "path": "/locks/health-summary"
            }
          ],
          "dependencies": [
            "require_scope([IAMScope.SYSTEM_ADMIN]",
            "require_scope([IAMScope.BRANCHES_WRITE, IAMScope.SERVICE_ACCOUNT]",
            "require_scope([IAMScope.BRANCHES_WRITE]",
            "require_scope([IAMScope.BRANCHES_READ]",
            "get_current_user",
            "require_scope([IAMScope.BRANCHES_WRITE, IAMScope.SYSTEM_ADMIN]"
          ],
          "services": []
        },
        "circuit_breaker_routes": {
          "file": "ontology-management-service/api/v1/circuit_breaker_routes.py",
          "endpoints": [
            {
              "method": "get",
              "path": "/status"
            },
            {
              "method": "post",
              "path": "/reset"
            },
            {
              "method": "get",
              "path": "/metrics"
            },
            {
              "method": "get",
              "path": "/distributed/status"
            },
            {
              "method": "post",
              "path": "/distributed/sync"
            },
            {
              "method": "get",
              "path": "/distributed/health"
            }
          ],
          "dependencies": [
            "require_scope([IAMScope.ONTOLOGIES_WRITE]",
            "get_current_user"
          ],
          "services": []
        },
        "system_routes": {
          "file": "ontology-management-service/api/v1/system_routes.py",
          "endpoints": [
            {
              "method": "get",
              "path": "/"
            },
            {
              "method": "get",
              "path": "/metrics"
            }
          ],
          "dependencies": [],
          "services": []
        },
        "test_routes": {
          "file": "ontology-management-service/api/v1/test_routes.py",
          "endpoints": [
            {
              "method": "get",
              "path": "/health"
            },
            {
              "method": "post",
              "path": "/load"
            },
            {
              "method": "get",
              "path": "/slow"
            },
            {
              "method": "get",
              "path": "/error"
            },
            {
              "method": "get",
              "path": "/memory"
            }
          ],
          "dependencies": [
            "get_current_user",
            "require_scope([IAMScope.ONTOLOGIES_READ]"
          ],
          "services": []
        },
        "shadow_index_routes": {
          "file": "ontology-management-service/api/v1/shadow_index_routes.py",
          "endpoints": [
            {
              "method": "post",
              "path": "/start"
            },
            {
              "method": "post",
              "path": "/{shadow_index_id}/progress"
            },
            {
              "method": "post",
              "path": "/{shadow_index_id}/complete"
            },
            {
              "method": "post",
              "path": "/{shadow_index_id}/switch"
            },
            {
              "method": "get",
              "path": "/{shadow_index_id}/status"
            },
            {
              "method": "get",
              "path": "/list"
            },
            {
              "method": "delete",
              "path": "/{shadow_index_id}"
            },
            {
              "method": "get",
              "path": "/dashboard"
            }
          ],
          "dependencies": [
            "require_scope([IAMScope.SYSTEM_ADMIN, IAMScope.SERVICE_ACCOUNT]",
            "require_scope([IAMScope.SYSTEM_ADMIN]",
            "require_scope([IAMScope.SERVICE_ACCOUNT]",
            "get_current_user"
          ],
          "services": []
        },
        "idempotent_routes": {
          "file": "ontology-management-service/api/v1/idempotent_routes.py",
          "endpoints": [
            {
              "method": "post",
              "path": "/process"
            },
            {
              "method": "post",
              "path": "/process-batch"
            },
            {
              "method": "get",
              "path": "/consumers/{consumer_id}/status"
            },
            {
              "method": "get",
              "path": "/consumers/{consumer_id}/state"
            },
            {
              "method": "post",
              "path": "/consumers/{consumer_id}/checkpoint"
            },
            {
              "method": "post",
              "path": "/replay"
            },
            {
              "method": "get",
              "path": "/replay/{replay_id}"
            },
            {
              "method": "post",
              "path": "/test/generate-events"
            }
          ],
          "dependencies": [
            "get_current_user",
            "require_scope([IAMScope.SCHEMAS_WRITE]",
            "require_scope([IAMScope.SYSTEM_ADMIN]"
          ],
          "services": []
        },
        "document_routes": {
          "file": "ontology-management-service/api/v1/document_routes.py",
          "endpoints": [
            {
              "method": "post",
              "path": "/unfold"
            },
            {
              "method": "post",
              "path": "/unfold-path"
            },
            {
              "method": "post",
              "path": "/prepare-unfoldable"
            },
            {
              "method": "post",
              "path": "/extract-unfoldable"
            },
            {
              "method": "post",
              "path": "/parse-metadata"
            },
            {
              "method": "post",
              "path": "/generate-documentation"
            },
            {
              "method": "get",
              "path": "/metadata-frame-types"
            },
            {
              "method": "get",
              "path": "/unfold-levels"
            },
            {
              "method": "get",
              "path": "/health"
            }
          ],
          "dependencies": [
            "require_scope([IAMScope.ONTOLOGIES_WRITE]",
            "get_current_user",
            "require_scope([IAMScope.ONTOLOGIES_READ]"
          ],
          "services": []
        },
        "auth_proxy_routes": {
          "file": "ontology-management-service/api/v1/auth_proxy_routes.py",
          "endpoints": [
            {
              "method": "post",
              "path": "/auth/login"
            },
            {
              "method": "post",
              "path": "/auth/login/json"
            },
            {
              "method": "post",
              "path": "/auth/register"
            },
            {
              "method": "post",
              "path": "/auth/logout"
            },
            {
              "method": "post",
              "path": "/auth/refresh"
            },
            {
              "method": "get",
              "path": "/auth/userinfo"
            },
            {
              "method": "post",
              "path": "/auth/change-password"
            },
            {
              "method": "post",
              "path": "/auth/mfa/setup"
            },
            {
              "method": "post",
              "path": "/auth/mfa/enable"
            },
            {
              "method": "post",
              "path": "/auth/mfa/disable"
            },
            {
              "method": "get",
              "path": "/.well-known/jwks.json"
            }
          ],
          "dependencies": [],
          "services": []
        },
        "document_crud_routes": {
          "file": "ontology-management-service/api/v1/document_crud_routes.py",
          "endpoints": [
            {
              "method": "post",
              "path": "/"
            },
            {
              "method": "get",
              "path": "/{document_id}"
            },
            {
              "method": "put",
              "path": "/{document_id}"
            },
            {
              "method": "delete",
              "path": "/{document_id}"
            },
            {
              "method": "get",
              "path": "/"
            },
            {
              "method": "get",
              "path": "/search/"
            },
            {
              "method": "get",
              "path": "/stats/summary"
            }
          ],
          "dependencies": [
            "get_document_service",
            "require_scope([IAMScope.ONTOLOGIES_WRITE]",
            "get_db_client",
            "get_event_gateway",
            "require_scope([IAMScope.ONTOLOGIES_READ]",
            "get_current_user"
          ],
          "services": [
            "document"
          ]
        },
        "schema_routes": {
          "file": "ontology-management-service/api/v1/schema_routes.py",
          "endpoints": [
            {
              "method": "get",
              "path": "/{branch}/object-types"
            },
            {
              "method": "get",
              "path": "/{branch}/object-types/{type_name}"
            },
            {
              "method": "post",
              "path": "/{branch}/object-types"
            }
          ],
          "dependencies": [
            "Provide[Container.schema_service_provider]",
            "require_scope([IAMScope.ONTOLOGIES_WRITE]",
            "get_current_user",
            "require_scope([IAMScope.ONTOLOGIES_READ]"
          ],
          "services": []
        },
        "property_routes": {
          "file": "ontology-management-service/api/v1/property_routes.py",
          "endpoints": [
            {
              "method": "get",
              "path": "/"
            },
            {
              "method": "get",
              "path": "/{property_id}"
            },
            {
              "method": "post",
              "path": "/"
            },
            {
              "method": "put",
              "path": "/{property_id}"
            },
            {
              "method": "delete",
              "path": "/{property_id}"
            },
            {
              "method": "post",
              "path": "/validate"
            }
          ],
          "dependencies": [
            "require_scope([IAMScope.ONTOLOGIES_WRITE]",
            "get_current_user",
            "require_scope([IAMScope.ONTOLOGIES_READ]",
            "Provide[Container.property_service]"
          ],
          "services": []
        },
        "time_travel_routes": {
          "file": "ontology-management-service/api/v1/time_travel_routes.py",
          "endpoints": [
            {
              "method": "post",
              "path": "/as-of"
            },
            {
              "method": "post",
              "path": "/between"
            },
            {
              "method": "get",
              "path": "/versions/{resource_type}/{resource_id}"
            },
            {
              "method": "post",
              "path": "/compare"
            },
            {
              "method": "get",
              "path": "/timeline/{resource_type}/{resource_id}"
            },
            {
              "method": "post",
              "path": "/snapshot"
            },
            {
              "method": "get",
              "path": "/resource-at-time"
            },
            {
              "method": "get",
              "path": "/health"
            }
          ],
          "dependencies": [
            "get_current_user",
            "require_scope([IAMScope.BRANCHES_READ]",
            "require_scope([IAMScope.BRANCHES_WRITE]"
          ],
          "services": []
        },
        "organization_routes": {
          "file": "ontology-management-service/api/v1/organization_routes.py",
          "endpoints": [
            {
              "method": "get",
              "path": "/"
            },
            {
              "method": "get",
              "path": "/{org_id}"
            },
            {
              "method": "post",
              "path": "/"
            },
            {
              "method": "put",
              "path": "/{org_id}"
            },
            {
              "method": "delete",
              "path": "/{org_id}"
            }
          ],
          "dependencies": [
            "require_scope([IAMScope.ONTOLOGIES_WRITE]",
            "get_current_user",
            "require_scope([IAMScope.ONTOLOGIES_READ]"
          ],
          "services": []
        },
        "issue_tracking_routes": {
          "file": "ontology-management-service/api/v1/issue_tracking_routes.py",
          "endpoints": [
            {
              "method": "post",
              "path": "/validate"
            },
            {
              "method": "post",
              "path": "/validate-bulk"
            },
            {
              "method": "post",
              "path": "/check-requirements"
            },
            {
              "method": "post",
              "path": "/link-change"
            },
            {
              "method": "get",
              "path": "/changes/{change_id}/issues"
            },
            {
              "method": "post",
              "path": "/search"
            },
            {
              "method": "get",
              "path": "/suggest"
            },
            {
              "method": "get",
              "path": "/config"
            },
            {
              "method": "post",
              "path": "/parse"
            },
            {
              "method": "get",
              "path": "/compliance/stats"
            },
            {
              "method": "get",
              "path": "/compliance/user/{username}"
            },
            {
              "method": "get",
              "path": "/issues/{provider}/{issue_id}/changes"
            }
          ],
          "dependencies": [
            "require_scope([IAMScope.SYSTEM_ADMIN]",
            "require_scope([IAMScope.AUDIT_READ]",
            "require_scope([IAMScope.BRANCHES_WRITE]",
            "require_scope([IAMScope.BRANCHES_READ]",
            "get_current_user"
          ],
          "services": []
        },
        "version_routes": {
          "file": "ontology-management-service/api/v1/version_routes.py",
          "endpoints": [
            {
              "method": "get",
              "path": "/history/{resource_type}/{resource_id}"
            },
            {
              "method": "get",
              "path": "/version/{resource_type}/{resource_id}/{version}"
            },
            {
              "method": "post",
              "path": "/delta/{resource_type}/{resource_id}"
            },
            {
              "method": "post",
              "path": "/sync"
            },
            {
              "method": "post",
              "path": "/validate-cache"
            },
            {
              "method": "post",
              "path": "/validate"
            },
            {
              "method": "get",
              "path": "/summary/{branch}"
            },
            {
              "method": "post",
              "path": "/compare/{branch1}/{branch2}"
            },
            {
              "method": "post",
              "path": "/conflicts/detect"
            }
          ],
          "dependencies": [
            "get_current_user",
            "require_scope([IAMScope.BRANCHES_READ]"
          ],
          "services": []
        },
        "batch_routes": {
          "file": "ontology-management-service/api/v1/batch_routes.py",
          "endpoints": [
            {
              "method": "post",
              "path": "/object-types"
            },
            {
              "method": "post",
              "path": "/properties"
            },
            {
              "method": "post",
              "path": "/link-types"
            },
            {
              "method": "post",
              "path": "/branches"
            },
            {
              "method": "post",
              "path": "/branch-states"
            },
            {
              "method": "get",
              "path": "/metrics"
            }
          ],
          "dependencies": [
            "get_schema_service",
            "require_scope([IAMScope.SYSTEM_ADMIN]",
            "require_scope([IAMScope.SCHEMAS_READ]",
            "get_branch_service",
            "require_scope([IAMScope.BRANCHES_READ]",
            "get_current_user"
          ],
          "services": [
            "schema"
          ]
        },
        "health_routes": {
          "file": "ontology-management-service/api/v1/health_routes.py",
          "endpoints": [
            {
              "method": "get",
              "path": "/health"
            },
            {
              "method": "get",
              "path": "/health/detailed"
            },
            {
              "method": "get",
              "path": "/health/live"
            },
            {
              "method": "get",
              "path": "/health/ready"
            }
          ],
          "dependencies": [
            "get_current_user"
          ],
          "services": []
        },
        "job_progress_routes": {
          "file": "ontology-management-service/api/v1/job_progress_routes.py",
          "endpoints": [
            {
              "method": "get",
              "path": "/{job_id}/progress/stream"
            },
            {
              "method": "get",
              "path": "/{job_id}/logs"
            }
          ],
          "dependencies": [
            "require_scope([IAMScope.PROPOSALS_READ]",
            "get_current_user"
          ],
          "services": []
        }
      },
      "core_services": {
        "schema": {
          "file": "ontology-management-service/core/schema/service.py",
          "classes": [
            "SchemaService"
          ],
          "methods": [
            "list_object_types",
            "create_object_type",
            "_check_permission",
            "_validate_object_type",
            "_publish_schema_event",
            "create_schema",
            "get_schema",
            "update_schema",
            "delete_schema",
            "list_schemas",
            "validate_schema",
            "get_schema_version",
            "get_schema_versions",
            "get_pending_schema_changes",
            "approve_schema_change",
            "reject_schema_change",
            "get_schema_by_name"
          ],
          "dependencies": [
            "interfaces.schema"
          ],
          "repositories": [
            "SchemaRepository"
          ],
          "external_calls": [
            {
              "method": "get",
              "url": "reason"
            },
            {
              "method": "get",
              "url": "pr_id"
            },
            {
              "method": "get",
              "url": "pr_id"
            },
            {
              "method": "get",
              "url": "user_id"
            },
            {
              "method": "get",
              "url": "display_name"
            },
            {
              "method": "get",
              "url": "description"
            },
            {
              "method": "get",
              "url": "branch"
            },
            {
              "method": "get",
              "url": "id"
            },
            {
              "method": "get",
              "url": "name"
            },
            {
              "method": "get",
              "url": "display_name"
            },
            {
              "method": "get",
              "url": "description"
            },
            {
              "method": "get",
              "url": "properties"
            },
            {
              "method": "get",
              "url": "version_hash"
            },
            {
              "method": "get",
              "url": "created_by"
            },
            {
              "method": "get",
              "url": "created_at"
            },
            {
              "method": "get",
              "url": "modified_by"
            },
            {
              "method": "get",
              "url": "modified_at"
            },
            {
              "method": "get",
              "url": "pr_id"
            },
            {
              "method": "get",
              "url": "pr_id"
            },
            {
              "method": "get",
              "url": "pr_id"
            },
            {
              "method": "get",
              "url": "pr_id"
            },
            {
              "method": "get",
              "url": "branch"
            },
            {
              "method": "get",
              "url": "type"
            },
            {
              "method": "get",
              "url": "id"
            },
            {
              "method": "get",
              "url": "name"
            },
            {
              "method": "get",
              "url": "name"
            },
            {
              "method": "get",
              "url": "display_name"
            },
            {
              "method": "get",
              "url": "description"
            },
            {
              "method": "get",
              "url": "created_at"
            },
            {
              "method": "get",
              "url": "modified_at"
            },
            {
              "method": "get",
              "url": "name"
            },
            {
              "method": "get",
              "url": "type"
            },
            {
              "method": "get",
              "url": "type"
            },
            {
              "method": "get",
              "url": "source_branch"
            },
            {
              "method": "get",
              "url": "id"
            },
            {
              "method": "get",
              "url": "source_branch"
            },
            {
              "method": "get",
              "url": "source_branch"
            },
            {
              "method": "get",
              "url": "title"
            },
            {
              "method": "get",
              "url": "created_by"
            },
            {
              "method": "get",
              "url": "created_at"
            },
            {
              "method": "get",
              "url": "status"
            },
            {
              "method": "get",
              "url": "success"
            },
            {
              "method": "get",
              "url": "success"
            }
          ]
        },
        "document": {
          "file": "ontology-management-service/core/document/service.py",
          "classes": [
            "DocumentService"
          ],
          "methods": [
            "create_document",
            "get_document",
            "update_document",
            "delete_document",
            "list_documents",
            "search_documents",
            "_publish_event"
          ],
          "dependencies": [
            "interfaces.document"
          ],
          "repositories": [],
          "external_calls": []
        },
        "branch": {
          "file": "ontology-management-service/core/branch/service.py",
          "classes": [
            "BranchService"
          ],
          "methods": [
            "initialize",
            "_branch_exists",
            "_get_branch_info",
            "_get_branch_head",
            "_is_protected_branch",
            "create_branch",
            "get_branch",
            "list_branches",
            "delete_branch",
            "create_proposal",
            "merge_branch",
            "get_branch_diff",
            "get_proposal",
            "list_proposals",
            "update_proposal",
            "approve_proposal",
            "reject_proposal",
            "commit_changes",
            "create_pull_request",
            "_publish_event",
            "update_branch_properties"
          ],
          "dependencies": [
            "branch.conflict_resolver",
            "branch.merge_strategies",
            "branch.diff_engine",
            "branch.models"
          ],
          "repositories": [],
          "external_calls": [
            {
              "method": "get",
              "url": "head"
            },
            {
              "method": "get",
              "url": "head"
            },
            {
              "method": "get",
              "url": "@timestamp"
            },
            {
              "method": "get",
              "url": "createdAt"
            },
            {
              "method": "get",
              "url": "modifiedAt"
            },
            {
              "method": "get",
              "url": "@id"
            },
            {
              "method": "get",
              "url": "name"
            },
            {
              "method": "get",
              "url": "displayName"
            },
            {
              "method": "get",
              "url": "description"
            },
            {
              "method": "get",
              "url": "parentBranch"
            },
            {
              "method": "get",
              "url": "isProtected"
            },
            {
              "method": "get",
              "url": "createdBy"
            },
            {
              "method": "get",
              "url": "modifiedBy"
            },
            {
              "method": "get",
              "url": "isActive"
            },
            {
              "method": "get",
              "url": "bindings"
            }
          ]
        },
        "property": {
          "file": "ontology-management-service/core/property/service.py",
          "classes": [
            "PropertyService"
          ],
          "methods": [
            "create_property",
            "get_property",
            "list_properties",
            "update_property",
            "delete_property",
            "validate_property",
            "get_properties_by_object_type"
          ],
          "dependencies": [
            "interfaces.property"
          ],
          "repositories": [],
          "external_calls": []
        },
        "validation": {
          "file": "ontology-management-service/core/validation/service.py",
          "classes": [
            "ValidationService"
          ],
          "methods": [
            "validate_breaking_changes",
            "_build_validation_context",
            "_fetch_branch_schema",
            "_execute_rules",
            "_execute_single_rule",
            "_analyze_impact",
            "_generate_migration_suggestions",
            "_publish_validation_event"
          ],
          "dependencies": [
            "validation.rule_registry",
            "validation.ports",
            "validation.models",
            "validation.interfaces"
          ],
          "repositories": [],
          "external_calls": []
        },
        "time_travel": {
          "file": "ontology-management-service/core/time_travel/service.py",
          "classes": [
            "TimeTravelQueryService"
          ],
          "methods": [
            "initialize",
            "query_as_of",
            "query_between",
            "query_all_versions",
            "compare_temporal_states",
            "get_resource_timeline",
            "create_temporal_snapshot",
            "_row_to_temporal_resource",
            "_get_state_at_time",
            "_compare_states",
            "get_time_travel_service"
          ],
          "dependencies": [],
          "repositories": [],
          "external_calls": []
        }
      },
      "middleware_chain": [
        {
          "name": "GlobalCircuitBreakerMiddleware",
          "order": 0,
          "args": "config=circuit_config, redis_client=redis_client"
        },
        {
          "name": "ErrorHandlerMiddleware",
          "order": 1,
          "args": null,
          "file": "ontology-management-service/middleware/error_handler.py",
          "details": {
            "intercepts": [],
            "modifies_request": true,
            "modifies_response": true,
            "dependencies": []
          }
        },
        {
          "name": "ETagMiddleware",
          "order": 2,
          "args": null
        },
        {
          "name": "TerminusContextMiddleware",
          "order": 3,
          "args": null,
          "file": "ontology-management-service/middleware/terminus_context_middleware.py",
          "details": {
            "intercepts": [],
            "modifies_request": true,
            "modifies_response": true,
            "dependencies": [
              "shared.terminus_context"
            ]
          }
        },
        {
          "name": "CoreDatabaseContextMiddleware",
          "order": 4,
          "args": null
        },
        {
          "name": "ScopeRBACMiddleware",
          "order": 5,
          "args": null
        },
        {
          "name": "AuditLogMiddleware",
          "order": 6,
          "args": null,
          "file": "ontology-management-service/middleware/audit_log.py",
          "details": {
            "intercepts": [
              "user_context",
              "request_id"
            ],
            "modifies_request": true,
            "modifies_response": true,
            "dependencies": []
          }
        },
        {
          "name": "RequestIdMiddleware",
          "order": 7,
          "args": null,
          "file": "ontology-management-service/middleware/request_id.py",
          "details": {
            "intercepts": [
              "request_id"
            ],
            "modifies_request": true,
            "modifies_response": true,
            "dependencies": []
          }
        },
        {
          "name": "AuthMiddleware",
          "order": 8,
          "args": null,
          "file": "ontology-management-service/middleware/auth_middleware.py",
          "details": {
            "intercepts": [
              "user_context",
              "user"
            ],
            "modifies_request": true,
            "modifies_response": false,
            "dependencies": [
              "core.auth"
            ]
          }
        },
        {
          "name": "SchemaFreezeMiddleware",
          "order": 9,
          "args": null,
          "file": "ontology-management-service/middleware/schema_freeze_middleware.py",
          "details": {
            "intercepts": [
              "schema_freeze_checked",
              "branch_name"
            ],
            "modifies_request": true,
            "modifies_response": true,
            "dependencies": [
              "core.auth",
              "core.branch.lock_manager"
            ]
          }
        },
        {
          "name": "ThreeWayMergeMiddleware",
          "order": 10,
          "args": null,
          "file": "ontology-management-service/middleware/three_way_merge.py",
          "details": {
            "intercepts": [
              "merge_result",
              "merge_context"
            ],
            "modifies_request": true,
            "modifies_response": true,
            "dependencies": []
          }
        },
        {
          "name": "EventStateStoreMiddleware",
          "order": 11,
          "args": null,
          "file": "ontology-management-service/middleware/event_state_store.py",
          "details": {
            "intercepts": [
              "user_context",
              "state_store",
              "event_store",
              "event_metadata"
            ],
            "modifies_request": true,
            "modifies_response": true,
            "dependencies": []
          }
        },
        {
          "name": "IssueTrackingMiddleware",
          "order": 12,
          "args": null,
          "file": "ontology-management-service/middleware/issue_tracking_middleware.py",
          "details": {
            "intercepts": [
              "override_justification",
              "issue_refs",
              "emergency_override"
            ],
            "modifies_request": true,
            "modifies_response": true,
            "dependencies": [
              "core.auth",
              "core.issue_tracking.issue_service"
            ]
          }
        },
        {
          "name": "ComponentMiddleware",
          "order": 13,
          "args": null,
          "file": "ontology-management-service/middleware/component_middleware.py",
          "details": {
            "intercepts": [
              "component_manager"
            ],
            "modifies_request": true,
            "modifies_response": false,
            "dependencies": []
          }
        },
        {
          "name": "RateLimitingMiddleware",
          "order": 14,
          "args": "config=rate_config"
        }
      ],
      "dependency_injection": {
        "container_type": "dependency_injector",
        "providers": [
          {
            "name": "config",
            "type": "Singleton"
          },
          {
            "name": "redis_provider",
            "type": "Singleton"
          },
          {
            "name": "circuit_breaker_provider",
            "type": "Singleton"
          },
          {
            "name": "db_client_provider",
            "type": "Resource"
          },
          {
            "name": "event_gateway_provider",
            "type": "Factory"
          },
          {
            "name": "audit_client_provider",
            "type": "Singleton"
          },
          {
            "name": "diff_engine_provider",
            "type": "Factory"
          },
          {
            "name": "conflict_resolver_provider",
            "type": "Factory"
          },
          {
            "name": "branch_service_provider",
            "type": "Factory"
          },
          {
            "name": "schema_repository_provider",
            "type": "Factory"
          },
          {
            "name": "schema_service_provider",
            "type": "Factory"
          },
          {
            "name": "job_service_provider",
            "type": "Singleton"
          },
          {
            "name": "property_service",
            "type": "Factory"
          },
          {
            "name": "terminus_client",
            "type": "Factory"
          },
          {
            "name": "document_service_provider",
            "type": "Factory"
          }
        ],
        "injections": []
      }
    }
  },
  "integration_flows": {
    "msa": {
      "communication": {
        "oms_to_user": [],
        "oms_to_audit": [],
        "user_to_oms": [],
        "audit_to_oms": []
      },
      "auth_flow": {
        "auth_middleware": null,
        "jwt_validation": "JWKS",
        "user_service_integration": true,
        "iam_integration": null,
        "flow_diagram": [
          "1. 클라이언트 → OMS (Bearer Token)",
          "2. AuthMiddleware가 토큰 검증",
          "3. JWKS를 통한 User Service 검증",
          "4. request.state.user 설정",
          "5. ScopeRBACMiddleware가 권한 검사",
          "6. 로컬 권한 검사"
        ]
      },
      "event_flow": {
        "publishers": [
          {
            "file": "ontology-management-service/core/events/branch_event_publisher.py",
            "events": []
          }
        ],
        "consumers": [
          "ontology-management-service/core/event_consumer/iam_event_handler.py",
          "ontology-management-service/core/event_consumer/funnel_indexing_handler.py"
        ],
        "event_types": [],
        "messaging_system": null
      },
      "data_consistency": {
        "shared_models": [],
        "data_boundaries": {
          "oms": "Schema, Document, Branch 관리",
          "user": "사용자 인증, 프로필, 권한",
          "audit": "감사 로그, 이벤트 추적"
        },
        "consistency_patterns": [
          "동기식 API 호출",
          "각 서비스별 독립적인 데이터베이스",
          "ID 참조를 통한 느슨한 결합"
        ]
      }
    }
  },
  "duplications": [
    {
      "type": "JWT Validation",
      "description": "여러 곳에서 JWT 검증 로직 구현",
      "locations": [
        {
          "service": "oms",
          "file": "test_full_integration.py"
        },
        {
          "service": "oms",
          "file": "archive_legacy_20250704/core/auth/resource_permission_checker.py"
        },
        {
          "service": "oms",
          "file": "middleware/auth_middleware.py"
        },
        {
          "service": "oms",
          "file": "core/integrations/iam_service_client_with_fallback.py"
        },
        {
          "service": "oms",
          "file": "core/integrations/user_service_client.py"
        },
        {
          "service": "oms",
          "file": "core/iam/scope_rbac_middleware.py"
        },
        {
          "service": "oms",
          "file": "core/iam/iam_integration.py"
        },
        {
          "service": "oms",
          "file": "venv/lib/python3.12/site-packages/jwt/api_jwt.py"
        },
        {
          "service": "oms",
          "file": "venv/lib/python3.12/site-packages/jwt/__init__.py"
        },
        {
          "service": "oms",
          "file": "venv/lib/python3.12/site-packages/jwt/jwk_set_cache.py"
        },
        {
          "service": "oms",
          "file": "venv/lib/python3.12/site-packages/jwt/exceptions.py"
        },
        {
          "service": "oms",
          "file": "venv/lib/python3.12/site-packages/jwt/api_jwk.py"
        },
        {
          "service": "oms",
          "file": "venv/lib/python3.12/site-packages/jose/jwt.py"
        },
        {
          "service": "oms",
          "file": "venv/lib/python3.12/site-packages/jose/backends/ecdsa_backend.py"
        },
        {
          "service": "oms",
          "file": "venv/lib/python3.12/site-packages/nats/aio/client.py"
        }
      ],
      "recommendation": "공통 라이브러리로 통합 또는 User Service에 위임"
    },
    {
      "type": "Audit Logging",
      "description": "감사 로깅이 여러 레이어에서 구현됨",
      "locations": {
        "oms_middleware": [
          "ontology-management-service/middleware/audit_log.py"
        ],
        "oms_service": [
          "ontology-management-service/core/audit/audit_service.py",
          "ontology-management-service/shared/audit_client.py"
        ],
        "audit_service": []
      },
      "recommendation": "Audit Service로 통합하고 OMS는 클라이언트만 사용"
    },
    {
      "type": "Utility Functions (validation_utils)",
      "description": "validation_utils 유틸리티가 여러 서비스에서 구현됨",
      "locations": [
        {
          "service": "user",
          "file": "user-service/tests/test_validators.py",
          "functions": [
            "test_validate_email_valid",
            "test_validate_email_invalid_format",
            "test_validate_email_consecutive_dots",
            "test_validate_email_domain_too_long",
            "test_validate_email_case_normalization"
          ]
        },
        {
          "service": "user",
          "file": "user-service/src/core/validators.py",
          "functions": [
            "validate_email"
          ]
        },
        {
          "service": "user",
          "file": "user-service/src/schemas/organization.py",
          "functions": [
            "validate_email",
            "validate_email"
          ]
        },
        {
          "service": "user",
          "file": "user-service/src/api/registration_router.py",
          "functions": [
            "validate_email_field"
          ]
        },
        {
          "service": "audit",
          "file": "audit-service/utils/validators.py",
          "functions": [
            "validate_email",
            "validate_uuid"
          ]
        }
      ],
      "recommendation": "공통 라이브러리 패키지로 추출"
    }
  ],
  "issues": [],
  "recommendations": [
    {
      "priority": "IMMEDIATE",
      "action": "Core 모듈 의존성 해결",
      "steps": [
        "pip install -r requirements.txt 실행",
        "환경 변수 설정 (.env 파일)",
        "common_security 패키지 경로 수정"
      ]
    },
    {
      "priority": "HIGH",
      "action": "중복 코드 제거 및 공통화",
      "steps": [
        "공통 유틸리티 라이브러리 생성",
        "감사 로깅을 Audit Service로 통합",
        "JWT 검증을 User Service JWKS로 통합"
      ]
    },
    {
      "priority": "MEDIUM",
      "action": "서비스 간 계약 명확화",
      "steps": [
        "OpenAPI 스펙 문서화",
        "이벤트 스키마 정의",
        "서비스 간 인터페이스 버전 관리"
      ]
    },
    {
      "priority": "MEDIUM",
      "action": "통합 테스트 자동화",
      "steps": [
        "Docker Compose로 전체 환경 구성",
        "E2E 테스트 시나리오 구현",
        "CI/CD 파이프라인 통합"
      ]
    }
  ],
  "integration_tests": [
    {
      "name": "End-to-End Authentication Flow",
      "steps": [
        "1. User Service에서 사용자 생성",
        "2. 로그인하여 JWT 토큰 획득",
        "3. OMS API 호출 시 토큰 사용",
        "4. AuthMiddleware가 토큰 검증",
        "5. ScopeRBACMiddleware가 권한 확인",
        "6. API 응답 확인"
      ],
      "validation": [
        "JWT 토큰이 올바르게 생성되는가",
        "OMS가 User Service의 JWKS로 토큰을 검증하는가",
        "권한이 올바르게 적용되는가"
      ]
    },
    {
      "name": "Schema Creation with Audit Trail",
      "steps": [
        "1. 인증된 사용자로 스키마 생성 API 호출",
        "2. OMS가 스키마를 TerminusDB에 저장",
        "3. 성공 이벤트 발행",
        "4. Audit Service가 이벤트 수신 및 로그 저장",
        "5. 감사 로그 조회 API로 확인"
      ],
      "validation": [
        "스키마가 정상적으로 생성되는가",
        "감사 로그가 Audit Service에 기록되는가",
        "이벤트가 올바르게 전달되는가"
      ]
    },
    {
      "name": "Service Resilience Test",
      "steps": [
        "1. User Service 중단",
        "2. OMS API 호출 (캐시된 인증 사용)",
        "3. Audit Service 중단",
        "4. OMS 작업 수행 (로컬 큐잉)",
        "5. 서비스 복구 후 데이터 동기화 확인"
      ],
      "validation": [
        "User Service 중단 시에도 캐시로 동작하는가",
        "Audit 로그가 큐에 저장되고 나중에 전송되는가",
        "Circuit Breaker가 정상 작동하는가"
      ]
    }
  ],
  "critical_issues": [
    {
      "category": "Architecture",
      "issue": "여러 서비스에서 동일 기능 중복 구현",
      "impact": "MEDIUM",
      "solution": "공통 라이브러리 추출 및 책임 경계 명확화"
    }
  ]
}