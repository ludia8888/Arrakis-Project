networks:
  arrakis-net:
    driver: bridge

volumes:
  terminus-data:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
  embedding-cache:

services:
  # Core Infrastructure
  terminusdb:
    image: terminusdb/terminusdb-server:latest
    container_name: arrakis-terminusdb
    environment:
      - TERMINUSDB_SERVER_PORT=6363
      - TERMINUSDB_ADMIN_PASS=changeme-admin-pass
    ports:
      - "6363:6363"
    volumes:
      - terminus-data:/app/terminusdb/storage
    networks:
      - arrakis-net
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          "test -f /proc/1/cmdline && grep -q terminusdb /proc/1/cmdline",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: arrakis-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - arrakis-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:16-alpine
    container_name: arrakis-postgres
    environment:
      - POSTGRES_USER=arrakis_user
      - POSTGRES_PASSWORD=arrakis_password
      - POSTGRES_DB=arrakis_db
      - POSTGRES_INITDB_ARGS=-E UTF8
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - arrakis-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U arrakis_user -d arrakis_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  nats:
    image: nats:2.10-alpine
    container_name: arrakis-nats
    ports:
      - "4222:4222"
      - "6222:6222"
      - "8222:8222"
    networks:
      - arrakis-net
    restart: unless-stopped

  # Core Services
  user-service:
    image: arrakis-user-service
    build:
      context: ./user-service
    container_name: arrakis-user-service
    environment:
      - DATABASE_URL=postgresql+asyncpg://arrakis_user:arrakis_password@postgres:5432/user_service_db
      - JWT_SECRET=${JWT_SECRET:-your-very-secure-jwt-secret-key}
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      - REDIS_URL=redis://redis:6379/1
    ports:
      - "8010:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - arrakis-net
    restart: unless-stopped

  audit-service:
    image: arrakis-audit-service
    build:
      context: ./audit-service
    container_name: arrakis-audit-service
    environment:
      - DATABASE_URL=postgresql+asyncpg://arrakis_user:arrakis_password@postgres:5432/audit_db
      - JWT_SECRET=${JWT_SECRET:-your-very-secure-jwt-secret-key}
      - USER_SERVICE_URL=http://user-service:8000
      - REDIS_URL=redis://redis:6379/2
    ports:
      - "8011:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - arrakis-net
    restart: unless-stopped

  # Microservices (점진적 마이그레이션)
  data-kernel-service:
    image: arrakis-data-kernel
    build:
      context: ./data-kernel-service
    container_name: arrakis-data-kernel
    environment:
      - TERMINUSDB_ENDPOINT=http://terminusdb:6363
      - TERMINUSDB_USER=admin
      - TERMINUSDB_ADMIN_PASS=changeme-admin-pass
      - TERMINUSDB_PASS=changeme-admin-pass
      - JWT_SECRET=${JWT_SECRET:-your-very-secure-jwt-secret-key}
      - USE_IAM_VALIDATION=${USE_IAM_VALIDATION:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATA_KERNEL_PORT=8080
      - GRPC_PORT=50051
    ports:
      - "8080:8080" # REST API
      - "50051:50051" # gRPC
    depends_on:
      - terminusdb
    networks:
      - arrakis-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  embedding-service:
    image: arrakis-embedding-service
    build:
      context: ./embedding-service
    container_name: arrakis-embedding-service
    environment:
      - SERVICE_NAME=embedding-service
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_URL=redis://redis:6379/5
      - DATA_KERNEL_GRPC_ENDPOINT=data-kernel-service:50051
      - USE_DATA_KERNEL_GATEWAY=${USE_DATA_KERNEL_GATEWAY:-true}
      - DEFAULT_MODEL=sentence-transformers/all-MiniLM-L6-v2
      - GRPC_PORT=50055
      - EMBEDDING_SERVICE_PORT=8001
    ports:
      - "8001:8001" # REST API
      - "50055:50055" # gRPC
    depends_on:
      - redis
      - data-kernel-service
    networks:
      - arrakis-net
    restart: unless-stopped
    volumes:
      - embedding-cache:/app/.cache/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  scheduler-service:
    image: arrakis-scheduler-service
    build:
      context: ./scheduler-service
    container_name: arrakis-scheduler-service
    environment:
      - SERVICE_NAME=scheduler-service
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_URL=redis://redis:6379/6
      - DATABASE_URL=postgresql+asyncpg://arrakis_user:arrakis_password@postgres:5432/scheduler_db
      - DATA_KERNEL_GRPC_ENDPOINT=data-kernel-service:50051
      - USE_DATA_KERNEL_GATEWAY=${USE_DATA_KERNEL_GATEWAY:-true}
      - SCHEDULER_PORT=8002
      - GRPC_PORT=50056
    ports:
      - "8002:8002" # REST API
      - "50056:50056" # gRPC
    depends_on:
      - redis
      - data-kernel-service
    networks:
      - arrakis-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  event-gateway:
    image: arrakis-event-gateway
    build:
      context: ./event-gateway
    container_name: arrakis-event-gateway
    environment:
      - SERVICE_NAME=event-gateway
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - NATS_URL=nats://nats:4222
      - REDIS_URL=redis://redis:6379/7
      - EVENT_GATEWAY_PORT=8003
      - GRPC_PORT=50057
      - ENABLE_WEBHOOKS=${ENABLE_WEBHOOKS:-true}
    ports:
      - "8003:8003" # REST API
      - "50057:50057" # gRPC
    depends_on:
      - nats
      - redis
    networks:
      - arrakis-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OMS Service (모놀리스 -> 마이크로서비스 전환 중)
  oms:
    image: arrakis-oms
    build:
      context: ./ontology-management-service
    container_name: arrakis-oms
    environment:
      # Database Configuration
      - TERMINUSDB_ENDPOINT=http://terminusdb:6363
      - REDIS_URL=redis://redis:6379/0
      - NATS_URL=nats://nats:4222
      - DATABASE_URL=postgresql+asyncpg://arrakis_user:arrakis_password@postgres:5432/oms_db

      # Service URLs
      - USER_SERVICE_URL=http://user-service:8000
      - AUDIT_SERVICE_URL=http://audit-service:8000

      # JWT Configuration
      - JWT_SECRET=${JWT_SECRET:-your-very-secure-jwt-secret-key}
      - SECURITY_JWT_SECRET=${JWT_SECRET:-your-very-secure-jwt-secret-key}
      - SECURITY_ENCRYPTION_KEY=${SECURITY_ENCRYPTION_KEY:-your-32-byte-encryption-key-here!!}

      # Microservices Mode (점진적 활성화)
      - USE_DATA_KERNEL_GATEWAY=${USE_DATA_KERNEL_GATEWAY:-true}
      - DATA_KERNEL_GRPC_ENDPOINT=data-kernel-service:50051
      - USE_EMBEDDING_MS=${USE_EMBEDDING_MS:-true}
      - EMBEDDING_SERVICE_ENDPOINT=embedding-service:50055
      - USE_SCHEDULER_MS=${USE_SCHEDULER_MS:-true}
      - SCHEDULER_SERVICE_ENDPOINT=scheduler-service:50056
      - USE_EVENT_GATEWAY=${USE_EVENT_GATEWAY:-true}
      - EVENT_GATEWAY_ENDPOINT=event-gateway:50057

      # Monitoring
      - ENABLE_TELEMETRY=${ENABLE_TELEMETRY:-true}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - PROMETHEUS_PORT=8090
    ports:
      - "8000:8000" # Main API
      - "8004:8004" # WebSocket
      - "8006:8006" # GraphQL
      - "8090:8090" # Prometheus metrics
    depends_on:
      - terminusdb
      - redis
      - nats
      - postgres
      - user-service
      - audit-service
    networks:
      - arrakis-net
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: arrakis-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
    networks:
      - arrakis-net
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: arrakis-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - arrakis-net
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: arrakis-jaeger
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "6831:6831/udp"
      - "16686:16686"
      - "14268:14268"
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
    networks:
      - arrakis-net
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:latest
    container_name: arrakis-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
    networks:
      - arrakis-net
    restart: unless-stopped

  # API Gateway (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: arrakis-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - oms
      - user-service
      - audit-service
    networks:
      - arrakis-net
    restart: unless-stopped
