{
  "analysis_time": "2025-07-13T01:16:12.730960",
  "ultra_thinking_applied": true,
  "target_service": "OMS (Ontology Management Service)",
  "mock_massacre_target": true,
  "file_analysis": {
    "debug_imports.py": {
      "path": "debug_imports.py",
      "lines": 53,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 2,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_unused.py": {
      "path": "archive_unused.py",
      "lines": 119,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 5,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "test_tracing.py": {
      "path": "test_tracing.py",
      "lines": 105,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 5,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "verify_microservices.py": {
      "path": "verify_microservices.py",
      "lines": 292,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 14,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "check_references.py": {
      "path": "check_references.py",
      "lines": 102,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 3,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "analyze_imports.py": {
      "path": "analyze_imports.py",
      "lines": 159,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 20,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "minimal_app.py": {
      "path": "minimal_app.py",
      "lines": 20,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 7,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "fix_imports.py": {
      "path": "fix_imports.py",
      "lines": 160,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "check_all_references.py": {
      "path": "check_all_references.py",
      "lines": 185,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 7,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "test_embedding_providers.py": {
      "path": "test_embedding_providers.py",
      "lines": 505,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 15,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "setup.py": {
      "path": "setup.py",
      "lines": 20,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 1,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "debug_python_path.py": {
      "path": "debug_python_path.py",
      "lines": 42,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 2,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "docker_check_imports.py": {
      "path": "docker_check_imports.py",
      "lines": 71,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 2,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "main.py": {
      "path": "main.py",
      "lines": 32,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 6,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "check_imports.py": {
      "path": "check_imports.py",
      "lines": 63,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 6,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_legacy_20250704/core/merge/unified_merge.py": {
      "path": "archive_legacy_20250704/core/merge/unified_merge.py",
      "lines": 851,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 171,
          "match": "cache = {}"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 769,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 438,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 446,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 450,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 534,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 541,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 600,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 661,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 689,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 171,
          "match": "cache = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 52,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "archive_legacy_20250704/core/auth/resource_permission_checker.py": {
      "path": "archive_legacy_20250704/core/auth/resource_permission_checker.py",
      "lines": 347,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 270,
          "match": "return []"
        },
        {
          "pattern": "return\\s+None",
          "line": 154,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 157,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 160,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 34,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "archive_legacy_20250704/core/schema_generator/sdk_generator.py": {
      "path": "archive_legacy_20250704/core/schema_generator/sdk_generator.py",
      "lines": 999,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 76,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_legacy_20250704/core/schema_generator/graphql_to_asyncapi.py": {
      "path": "archive_legacy_20250704/core/schema_generator/graphql_to_asyncapi.py",
      "lines": 690,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\{\\}",
          "line": 54,
          "match": "return {}"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 27,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "archive_legacy_20250704/core/schema_generator/asyncapi_generator.py": {
      "path": "archive_legacy_20250704/core/schema_generator/asyncapi_generator.py",
      "lines": 862,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\{\\}",
          "line": 691,
          "match": "return {}"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 33,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "middleware/circuit_breaker_http.py": {
      "path": "middleware/circuit_breaker_http.py",
      "lines": 103,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/coordinator.py": {
      "path": "middleware/coordinator.py",
      "lines": 278,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 205,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 48,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "middleware/etag_analytics.py": {
      "path": "middleware/etag_analytics.py",
      "lines": 202,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 18,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/terminus_context_middleware.py": {
      "path": "middleware/terminus_context_middleware.py",
      "lines": 106,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 33,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/three_way_merge.py": {
      "path": "middleware/three_way_merge.py",
      "lines": 758,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 296,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 298,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 300,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 340,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 346,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 362,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 367,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 374,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 499,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 616,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 647,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 652,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 665,
          "match": "return None"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 479,
          "match": "except ValueError:\n                    pass"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 491,
          "match": "except ValueError:\n                pass"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 526,
          "match": "except ValueError:\n                pass"
        }
      ],
      "silent_failures": [
        {
          "line": 479,
          "match": "except ValueError:\n                    pass"
        },
        {
          "line": 491,
          "match": "except ValueError:\n                pass"
        },
        {
          "line": 526,
          "match": "except ValueError:\n                pass"
        },
        {
          "line": 479,
          "match": "except ValueError:\n                    pass\n        \n        #"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 97,
      "real_implementation_score": 0,
      "classification": "HEAVY_MOCK"
    },
    "middleware/__init__.py": {
      "path": "middleware/__init__.py",
      "lines": 0,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/issue_tracking_middleware.py": {
      "path": "middleware/issue_tracking_middleware.py",
      "lines": 300,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 289,
          "match": "return None"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 225,
          "match": "except json.JSONDecodeError:\n                        pass"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 283,
          "match": "except json.JSONDecodeError:\n                        pass"
        }
      ],
      "silent_failures": [
        {
          "line": 225,
          "match": "except json.JSONDecodeError:\n                        pass"
        },
        {
          "line": 283,
          "match": "except json.JSONDecodeError:\n                        pass"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 27,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "middleware/request_id.py": {
      "path": "middleware/request_id.py",
      "lines": 37,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 24,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/circuit_breaker_global.py": {
      "path": "middleware/circuit_breaker_global.py",
      "lines": 514,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 74,
          "match": "redis.Redis"
        },
        {
          "pattern": "redis\\.Redis",
          "line": 452,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 50,
      "real_implementation_score": 20,
      "classification": "PARTIAL_REAL"
    },
    "middleware/service_config.py": {
      "path": "middleware/service_config.py",
      "lines": 705,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 124,
          "match": "cache: Dict[str, Any] = {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 399,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 124,
          "match": "cache: Dict[str, Any] = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 42,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "middleware/circuit_breaker.py": {
      "path": "middleware/circuit_breaker.py",
      "lines": 667,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 299,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 313,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 166,
          "match": "redis.Redis"
        },
        {
          "pattern": "redis\\.Redis",
          "line": 590,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 60,
      "real_implementation_score": 10,
      "classification": "PARTIAL_REAL"
    },
    "middleware/error_handler.py": {
      "path": "middleware/error_handler.py",
      "lines": 34,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 23,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/component_middleware.py": {
      "path": "middleware/component_middleware.py",
      "lines": 771,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 430,
          "match": "cache: Dict[str, Tuple[Any, float]] = {}"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 771,
          "match": "return {}"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 430,
          "match": "cache: Dict[str, Tuple[Any, float]] = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 319,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "middleware/etag_middleware.py": {
      "path": "middleware/etag_middleware.py",
      "lines": 712,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 106,
          "match": "cache: Dict[str, CacheStatistics] = {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 630,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 642,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 106,
          "match": "cache: Dict[str, CacheStatistics] = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 81,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "middleware/auth_middleware.py": {
      "path": "middleware/auth_middleware.py",
      "lines": 191,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 125,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 156,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 180,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 183,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 186,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 118,
          "match": "redis.Redis"
        },
        {
          "pattern": "redis\\.Redis",
          "line": 127,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 41,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "middleware/schema_freeze_middleware.py": {
      "path": "middleware/schema_freeze_middleware.py",
      "lines": 423,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 177,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 210,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 229,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 233,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 44,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "middleware/audit_log.py": {
      "path": "middleware/audit_log.py",
      "lines": 64,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 26,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/event_state_store.py": {
      "path": "middleware/event_state_store.py",
      "lines": 763,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 289,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 549,
          "match": "return []"
        },
        {
          "pattern": "return\\s+None",
          "line": 319,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 326,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 537,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 205,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 104,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "middleware/rate_limiting/coordinator.py": {
      "path": "middleware/rate_limiting/coordinator.py",
      "lines": 290,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 198,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 17,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "middleware/rate_limiting/models.py": {
      "path": "middleware/rate_limiting/models.py",
      "lines": 152,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 39,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/rate_limiting/__init__.py": {
      "path": "middleware/rate_limiting/__init__.py",
      "lines": 32,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 15,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/rate_limiting/adaptive.py": {
      "path": "middleware/rate_limiting/adaptive.py",
      "lines": 170,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 11,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/rate_limiting/fastapi_middleware.py": {
      "path": "middleware/rate_limiting/fastapi_middleware.py",
      "lines": 114,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 24,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/rate_limiting/middleware.py": {
      "path": "middleware/rate_limiting/middleware.py",
      "lines": 112,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 17,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/rate_limiting/limiter.py": {
      "path": "middleware/rate_limiting/limiter.py",
      "lines": 147,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 16,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/rate_limiting/strategies/sliding_window.py": {
      "path": "middleware/rate_limiting/strategies/sliding_window.py",
      "lines": 113,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 9,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/rate_limiting/strategies/token_bucket.py": {
      "path": "middleware/rate_limiting/strategies/token_bucket.py",
      "lines": 110,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 9,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/rate_limiting/strategies/leaky_bucket.py": {
      "path": "middleware/rate_limiting/strategies/leaky_bucket.py",
      "lines": 132,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/rate_limiting/strategies/base.py": {
      "path": "middleware/rate_limiting/strategies/base.py",
      "lines": 43,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 8,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/health/coordinator.py": {
      "path": "middleware/health/coordinator.py",
      "lines": 307,
      "mock_indicators": [
        {
          "pattern": "except.*:\\s*pass",
          "line": 76,
          "match": "except asyncio.CancelledError:\n                pass"
        }
      ],
      "silent_failures": [
        {
          "line": 76,
          "match": "except asyncio.CancelledError:\n                pass"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 15,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "middleware/health/monitor.py": {
      "path": "middleware/health/monitor.py",
      "lines": 63,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/health/models.py": {
      "path": "middleware/health/models.py",
      "lines": 147,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 34,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/health/__init__.py": {
      "path": "middleware/health/__init__.py",
      "lines": 28,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 9,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/health/dependency.py": {
      "path": "middleware/health/dependency.py",
      "lines": 121,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 100,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 7,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "middleware/health/checks/system.py": {
      "path": "middleware/health/checks/system.py",
      "lines": 183,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/health/checks/database.py": {
      "path": "middleware/health/checks/database.py",
      "lines": 157,
      "mock_indicators": [
        {
          "pattern": "except.*:\\s*pass",
          "line": 32,
          "match": "except ImportError:\n                pass"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 38,
          "match": "except ImportError:\n                pass"
        }
      ],
      "silent_failures": [
        {
          "line": 32,
          "match": "except ImportError:\n                pass"
        },
        {
          "line": 38,
          "match": "except ImportError:\n                pass"
        },
        {
          "line": 38,
          "match": "except ImportError:\n                pass\n            \n            #"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 9,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "middleware/health/checks/redis.py": {
      "path": "middleware/health/checks/redis.py",
      "lines": 122,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/health/checks/http.py": {
      "path": "middleware/health/checks/http.py",
      "lines": 144,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/health/checks/base.py": {
      "path": "middleware/health/checks/base.py",
      "lines": 69,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/discovery/coordinator.py": {
      "path": "middleware/discovery/coordinator.py",
      "lines": 304,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 186,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 207,
          "match": "return None"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 99,
          "match": "except asyncio.CancelledError:\n                pass"
        }
      ],
      "silent_failures": [
        {
          "line": 99,
          "match": "except asyncio.CancelledError:\n                pass"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 16,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "middleware/discovery/models.py": {
      "path": "middleware/discovery/models.py",
      "lines": 185,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 34,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/discovery/health.py": {
      "path": "middleware/discovery/health.py",
      "lines": 202,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/discovery/__init__.py": {
      "path": "middleware/discovery/__init__.py",
      "lines": 28,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 7,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/discovery/balancer.py": {
      "path": "middleware/discovery/balancer.py",
      "lines": 199,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 39,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 45,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 79,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 96,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 118,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 143,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 162,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 11,
      "real_implementation_score": 0,
      "classification": "HEAVY_MOCK"
    },
    "middleware/discovery/providers/dns.py": {
      "path": "middleware/discovery/providers/dns.py",
      "lines": 176,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 24,
          "match": "cache: Dict[str, List[ServiceInstance]] = {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 114,
          "match": "return None"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 168,
          "match": "except:\n                pass"
        }
      ],
      "silent_failures": [
        {
          "line": 168,
          "match": "except:\n                pass"
        }
      ],
      "fake_db_usage": [
        {
          "line": 24,
          "match": "cache: Dict[str, List[ServiceInstance]] = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 11,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "middleware/discovery/providers/redis.py": {
      "path": "middleware/discovery/providers/redis.py",
      "lines": 276,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 276,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 13,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "middleware/discovery/providers/base.py": {
      "path": "middleware/discovery/providers/base.py",
      "lines": 56,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 8,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/common/metrics.py": {
      "path": "middleware/common/metrics.py",
      "lines": 321,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 176,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 30,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "middleware/common/redis_utils.py": {
      "path": "middleware/common/redis_utils.py",
      "lines": 327,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 177,
          "match": "return []"
        },
        {
          "pattern": "return\\s+None",
          "line": 109,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 112,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 225,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 254,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 94,
          "match": "redis.Redis"
        },
        {
          "pattern": "redis\\.Redis",
          "line": 257,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 30,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "middleware/common/__init__.py": {
      "path": "middleware/common/__init__.py",
      "lines": 55,
      "mock_indicators": [
        {
          "pattern": "class\\s+\\w+.*:\\s*pass",
          "line": 9,
          "match": "class RedisConnectionPool:\n    pass"
        },
        {
          "pattern": "class\\s+\\w+.*:\\s*pass",
          "line": 12,
          "match": "class RedisClient:\n    pass"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 21,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "middleware/dlq/detector.py": {
      "path": "middleware/dlq/detector.py",
      "lines": 260,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 47,
          "match": "cache: Dict[str, List[datetime]] = {}"
        },
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 48,
          "match": "cache: Dict[str, int] = {}"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 47,
          "match": "cache: Dict[str, List[datetime]] = {}"
        },
        {
          "line": 48,
          "match": "cache: Dict[str, int] = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 11,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "middleware/dlq/coordinator.py": {
      "path": "middleware/dlq/coordinator.py",
      "lines": 330,
      "mock_indicators": [
        {
          "pattern": "except.*:\\s*pass",
          "line": 102,
          "match": "except asyncio.CancelledError:\n                    pass"
        }
      ],
      "silent_failures": [
        {
          "line": 102,
          "match": "except asyncio.CancelledError:\n                    pass"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 16,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "middleware/dlq/handler.py": {
      "path": "middleware/dlq/handler.py",
      "lines": 325,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 186,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 13,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "middleware/dlq/models.py": {
      "path": "middleware/dlq/models.py",
      "lines": 193,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 29,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/dlq/deduplicator.py": {
      "path": "middleware/dlq/deduplicator.py",
      "lines": 161,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 23,
          "match": "cache: Dict[str, datetime] = {}"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 23,
          "match": "cache: Dict[str, datetime] = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 11,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "middleware/dlq/__init__.py": {
      "path": "middleware/dlq/__init__.py",
      "lines": 28,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 7,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/dlq/storage/redis.py": {
      "path": "middleware/dlq/storage/redis.py",
      "lines": 391,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 132,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 263,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 289,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 309,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 89,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 93,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "HEAVY_MOCK"
    },
    "middleware/dlq/storage/base.py": {
      "path": "middleware/dlq/storage/base.py",
      "lines": 77,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 9,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/_deprecated/circuit_breaker_http.py": {
      "path": "middleware/_deprecated/circuit_breaker_http.py",
      "lines": 103,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "middleware/_deprecated/circuit_breaker.py": {
      "path": "middleware/_deprecated/circuit_breaker.py",
      "lines": 667,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 299,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 313,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 166,
          "match": "redis.Redis"
        },
        {
          "pattern": "redis\\.Redis",
          "line": 590,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 60,
      "real_implementation_score": 10,
      "classification": "PARTIAL_REAL"
    },
    "database/__init__.py": {
      "path": "database/__init__.py",
      "lines": 0,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "database/dependencies.py": {
      "path": "database/dependencies.py",
      "lines": 79,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 13,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "database/clients/sqlite_client.py": {
      "path": "database/clients/sqlite_client.py",
      "lines": 133,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 9,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "database/clients/postgres_client.py": {
      "path": "database/clients/postgres_client.py",
      "lines": 133,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 9,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "database/clients/secure_database_adapter.py": {
      "path": "database/clients/secure_database_adapter.py",
      "lines": 330,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 19,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "database/clients/sqlite_client_secure.py": {
      "path": "database/clients/sqlite_client_secure.py",
      "lines": 264,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 98,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "database/clients/redis_ha_client.py": {
      "path": "database/clients/redis_ha_client.py",
      "lines": 451,
      "mock_indicators": [
        {
          "pattern": "except.*:\\s*pass",
          "line": 128,
          "match": "except asyncio.CancelledError:\n                pass"
        }
      ],
      "silent_failures": [
        {
          "line": 128,
          "match": "except asyncio.CancelledError:\n                pass"
        },
        {
          "line": 128,
          "match": "except asyncio.CancelledError:\n                pass\n\n        #"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 194,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 17,
      "real_implementation_score": 0,
      "classification": "PARTIAL_REAL"
    },
    "database/clients/__init__.py": {
      "path": "database/clients/__init__.py",
      "lines": 25,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 2,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "database/clients/terminus_db.py": {
      "path": "database/clients/terminus_db.py",
      "lines": 395,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 248,
          "match": "return []"
        },
        {
          "pattern": "return\\s+None",
          "line": 208,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 226,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 232,
          "match": "return None"
        },
        {
          "pattern": "def\\s+\\w+.*:\\s*pass",
          "line": 34,
          "match": "def add_span_attributes(attrs):\n    pass"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "httpx\\.AsyncClient",
          "line": 6,
          "match": "httpx.AsyncClient"
        },
        {
          "pattern": "httpx\\.AsyncClient",
          "line": 39,
          "match": "httpx.AsyncClient"
        },
        {
          "pattern": "httpx\\.AsyncClient",
          "line": 44,
          "match": "httpx.AsyncClient"
        },
        {
          "pattern": "httpx\\.AsyncClient",
          "line": 90,
          "match": "httpx.AsyncClient"
        },
        {
          "pattern": "httpx\\.AsyncClient",
          "line": 97,
          "match": "httpx.AsyncClient"
        },
        {
          "pattern": "httpx\\.AsyncClient",
          "line": 102,
          "match": "httpx.AsyncClient"
        }
      ],
      "complexity_score": 18,
      "real_implementation_score": 35,
      "classification": "REAL_IMPLEMENTATION"
    },
    "database/clients/unified_database_client.py": {
      "path": "database/clients/unified_database_client.py",
      "lines": 100,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 17,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "database/clients/postgres_client_secure.py": {
      "path": "database/clients/postgres_client_secure.py",
      "lines": 266,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 98,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "database/clients/unified_http_client.py": {
      "path": "database/clients/unified_http_client.py",
      "lines": 652,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\{\\}",
          "line": 514,
          "match": "return {}"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "httpx\\.AsyncClient",
          "line": 8,
          "match": "httpx.AsyncClient"
        },
        {
          "pattern": "httpx\\.AsyncClient",
          "line": 22,
          "match": "httpx.AsyncClient"
        },
        {
          "pattern": "httpx\\.AsyncClient",
          "line": 563,
          "match": "httpx.AsyncClient"
        }
      ],
      "complexity_score": 47,
      "real_implementation_score": 25,
      "classification": "PARTIAL_REAL"
    },
    "database/clients/base.py": {
      "path": "database/clients/base.py",
      "lines": 9,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 6,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "migrations/migrate_to_distributed_locks.py": {
      "path": "migrations/migrate_to_distributed_locks.py",
      "lines": 326,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 20,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "migrations/audit_migration/migrate_audit_data.py": {
      "path": "migrations/audit_migration/migrate_audit_data.py",
      "lines": 539,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "httpx\\.AsyncClient",
          "line": 89,
          "match": "httpx.AsyncClient"
        },
        {
          "pattern": "httpx\\.AsyncClient",
          "line": 99,
          "match": "httpx.AsyncClient"
        }
      ],
      "complexity_score": 29,
      "real_implementation_score": 20,
      "classification": "PARTIAL_REAL"
    },
    "archive_audit_20250706/audit_service_full.py": {
      "path": "archive_audit_20250706/audit_service_full.py",
      "lines": 501,
      "mock_indicators": [
        {
          "pattern": "# TODO.*implement",
          "line": 453,
          "match": "# TODO: Implement"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 22,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "archive_audit_20250706/audit_migration_adapter.py": {
      "path": "archive_audit_20250706/audit_migration_adapter.py",
      "lines": 391,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 153,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 190,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 170,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "archive_audit_20250706/database_config.py": {
      "path": "archive_audit_20250706/database_config.py",
      "lines": 291,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 25,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_audit_20250706/audit_database.py": {
      "path": "archive_audit_20250706/audit_database.py",
      "lines": 868,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 581,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 706,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 615,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 33,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "archive_audit_20250706/audit_middleware.py": {
      "path": "archive_audit_20250706/audit_middleware.py",
      "lines": 334,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 184,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 324,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 334,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 51,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "archive_audit_20250706/init_databases.py": {
      "path": "archive_audit_20250706/init_databases.py",
      "lines": 40,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 8,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_audit_20250706/__init__.py": {
      "path": "archive_audit_20250706/__init__.py",
      "lines": 0,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_audit_20250706/audit_routes_original.py": {
      "path": "archive_audit_20250706/audit_routes_original.py",
      "lines": 494,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 55,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_audit_20250706/production_audit_fields_migration.py": {
      "path": "archive_audit_20250706/production_audit_fields_migration.py",
      "lines": 466,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 18,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_audit_20250706/audit_id_generator.py": {
      "path": "archive_audit_20250706/audit_id_generator.py",
      "lines": 263,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 177,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 99,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 105,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 124,
          "match": "return {}"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 15,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "archive_audit_20250706/audit_events.py": {
      "path": "archive_audit_20250706/audit_events.py",
      "lines": 288,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 50,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_audit_20250706/add_audit_fields.py": {
      "path": "archive_audit_20250706/add_audit_fields.py",
      "lines": 180,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 124,
          "match": "return []"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 14,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "archive_audit_20250706/terminusdb_audit_service.py": {
      "path": "archive_audit_20250706/terminusdb_audit_service.py",
      "lines": 602,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 50,
          "match": "cache = {}"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 148,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 193,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 506,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 543,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 212,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 241,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 421,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 587,
          "match": "return None"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 390,
          "match": "except:\n                    pass"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 486,
          "match": "except:\n                pass"
        }
      ],
      "silent_failures": [
        {
          "line": 390,
          "match": "except:\n                    pass"
        },
        {
          "line": 486,
          "match": "except:\n                pass"
        }
      ],
      "fake_db_usage": [
        {
          "line": 50,
          "match": "cache = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 17,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "archive_audit_20250706/audit_service.py": {
      "path": "archive_audit_20250706/audit_service.py",
      "lines": 501,
      "mock_indicators": [
        {
          "pattern": "# TODO.*implement",
          "line": 453,
          "match": "# TODO: Implement"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 22,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "archive_audit_20250706/audit_service_original.py": {
      "path": "archive_audit_20250706/audit_service_original.py",
      "lines": 501,
      "mock_indicators": [
        {
          "pattern": "# TODO.*implement",
          "line": 453,
          "match": "# TODO: Implement"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 22,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "archive_audit_20250706/sidecar_validator.py": {
      "path": "archive_audit_20250706/sidecar_validator.py",
      "lines": 478,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 249,
          "match": "return []"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 333,
          "match": "except:\n                pass"
        }
      ],
      "silent_failures": [
        {
          "line": 333,
          "match": "except:\n                pass"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "terminusdb.*connect",
          "line": 50,
          "match": "TerminusDB connect"
        },
        {
          "pattern": "terminusdb.*connect",
          "line": 60,
          "match": "TerminusDB connect"
        },
        {
          "pattern": "terminusdb.*connect",
          "line": 471,
          "match": "TerminusDB connect"
        }
      ],
      "complexity_score": 21,
      "real_implementation_score": 17,
      "classification": "PARTIAL_REAL"
    },
    "archive_audit_20250706/database_interface.py": {
      "path": "archive_audit_20250706/database_interface.py",
      "lines": 141,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 14,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_audit_20250706/shared_audit/audit_logger.py": {
      "path": "archive_audit_20250706/shared_audit/audit_logger.py",
      "lines": 77,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 16,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "infra/__init__.py": {
      "path": "infra/__init__.py",
      "lines": 1,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "infra/tracing/otel_init.py": {
      "path": "infra/tracing/otel_init.py",
      "lines": 252,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 24,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "infra/tracing/__init__.py": {
      "path": "infra/tracing/__init__.py",
      "lines": 0,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "infra/tracing/jaeger_adapter.py": {
      "path": "infra/tracing/jaeger_adapter.py",
      "lines": 488,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 33,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "infra/siem/port.py": {
      "path": "infra/siem/port.py",
      "lines": 49,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 7,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "infra/siem/config.py": {
      "path": "infra/siem/config.py",
      "lines": 74,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 21,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 8,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "infra/siem/adapter.py": {
      "path": "infra/siem/adapter.py",
      "lines": 276,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 98,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 102,
          "match": "return []"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 28,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "infra/siem/__init__.py": {
      "path": "infra/siem/__init__.py",
      "lines": 1,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "infra/siem/serializer.py": {
      "path": "infra/siem/serializer.py",
      "lines": 147,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 11,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/auth.py": {
      "path": "core/auth.py",
      "lines": 22,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 7,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/auth_deprecation_notice.py": {
      "path": "core/auth_deprecation_notice.py",
      "lines": 182,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 30,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/__init__.py": {
      "path": "core/__init__.py",
      "lines": 0,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/service_factory.py": {
      "path": "core/service_factory.py",
      "lines": 89,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 33,
          "match": "redis.Redis"
        },
        {
          "pattern": "redis\\.Redis",
          "line": 61,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 14,
      "real_implementation_score": 20,
      "classification": "PARTIAL_REAL"
    },
    "core/database/__init__.py": {
      "path": "core/database/__init__.py",
      "lines": 4,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/branch/distributed_lock_adapter.py": {
      "path": "core/branch/distributed_lock_adapter.py",
      "lines": 367,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 340,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 35,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 15,
      "real_implementation_score": 5,
      "classification": "PARTIAL_REAL"
    },
    "core/branch/service.py": {
      "path": "core/branch/service.py",
      "lines": 581,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 304,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 320,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 434,
          "match": "return []"
        },
        {
          "pattern": "return\\s+None",
          "line": 78,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 209,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 428,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 22,
      "real_implementation_score": 0,
      "classification": "HEAVY_MOCK"
    },
    "core/branch/lock_manager.py": {
      "path": "core/branch/lock_manager.py",
      "lines": 928,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 840,
          "match": "return None"
        },
        {
          "pattern": "# TODO.*implement",
          "line": 711,
          "match": "# TODO: Implement"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 27,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/branch/diff_engine.py": {
      "path": "core/branch/diff_engine.py",
      "lines": 587,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 587,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/branch/foundry_branch_service.py": {
      "path": "core/branch/foundry_branch_service.py",
      "lines": 470,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 384,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 22,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/branch/conflict_resolver.py": {
      "path": "core/branch/conflict_resolver.py",
      "lines": 304,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 239,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 8,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/branch/redis_lock_manager.py": {
      "path": "core/branch/redis_lock_manager.py",
      "lines": 446,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 338,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 72,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 37,
      "real_implementation_score": 5,
      "classification": "PARTIAL_REAL"
    },
    "core/branch/models.py": {
      "path": "core/branch/models.py",
      "lines": 218,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 99,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/branch/service_refactored.py": {
      "path": "core/branch/service_refactored.py",
      "lines": 552,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 280,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 313,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 336,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 340,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 24,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/branch/list_merge_algorithm.py": {
      "path": "core/branch/list_merge_algorithm.py",
      "lines": 307,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 26,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/branch/__init__.py": {
      "path": "core/branch/__init__.py",
      "lines": 12,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 4,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/branch/distributed_lock_manager.py": {
      "path": "core/branch/distributed_lock_manager.py",
      "lines": 353,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 16,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/branch/merge_strategies.py": {
      "path": "core/branch/merge_strategies.py",
      "lines": 305,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/branch/merge_validators.py": {
      "path": "core/branch/merge_validators.py",
      "lines": 294,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 39,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/branch/lock_monitor.py": {
      "path": "core/branch/lock_monitor.py",
      "lines": 350,
      "mock_indicators": [
        {
          "pattern": "except.*:\\s*pass",
          "line": 87,
          "match": "except asyncio.CancelledError:\n                pass"
        }
      ],
      "silent_failures": [
        {
          "line": 87,
          "match": "except asyncio.CancelledError:\n                pass"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 53,
          "match": "redis.Redis"
        },
        {
          "pattern": "redis\\.Redis",
          "line": 340,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 26,
      "real_implementation_score": 12,
      "classification": "PARTIAL_REAL"
    },
    "core/auth_utils/database_context.py": {
      "path": "core/auth_utils/database_context.py",
      "lines": 184,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 52,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/auth_utils/__init__.py": {
      "path": "core/auth_utils/__init__.py",
      "lines": 13,
      "mock_indicators": [
        {
          "pattern": "# TODO.*implement",
          "line": 10,
          "match": "# TODO: Implement"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 3,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/auth_utils/secure_author_provider.py": {
      "path": "core/auth_utils/secure_author_provider.py",
      "lines": 296,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 18,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/shadow_index/manager.py": {
      "path": "core/shadow_index/manager.py",
      "lines": 682,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 440,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 28,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/config/settings.py": {
      "path": "core/config/settings.py",
      "lines": 168,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 40,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/config/environment.py": {
      "path": "core/config/environment.py",
      "lines": 127,
      "mock_indicators": [
        {
          "pattern": "mock.*auth",
          "line": 66,
          "match": "mock_auth"
        },
        {
          "pattern": "mock.*auth",
          "line": 67,
          "match": "mock auth"
        },
        {
          "pattern": "mock.*auth",
          "line": 92,
          "match": "Mock auth allowed: {self.allows_mock_auth"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 18,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/security/__init__.py": {
      "path": "core/security/__init__.py",
      "lines": 47,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 2,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/security/pii_handler.py": {
      "path": "core/security/pii_handler.py",
      "lines": 327,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 30,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/auth/models.py": {
      "path": "core/auth/models.py",
      "lines": 38,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 7,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/auth/__init__.py": {
      "path": "core/auth/__init__.py",
      "lines": 8,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 2,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/auth/utils.py": {
      "path": "core/auth/utils.py",
      "lines": 8,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 3,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/property/service.py": {
      "path": "core/property/service.py",
      "lines": 340,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 14,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/property/__init__.py": {
      "path": "core/property/__init__.py",
      "lines": 5,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 1,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/integration/event_bridge.py": {
      "path": "core/integration/event_bridge.py",
      "lines": 309,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 28,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/event_consumer/__init__.py": {
      "path": "core/event_consumer/__init__.py",
      "lines": 0,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/event_consumer/iam_event_handler.py": {
      "path": "core/event_consumer/iam_event_handler.py",
      "lines": 313,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 205,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 212,
          "match": "return []"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 15,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/event_consumer/funnel_indexing_handler.py": {
      "path": "core/event_consumer/funnel_indexing_handler.py",
      "lines": 663,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 609,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 618,
          "match": "return None"
        },
        {
          "pattern": "# TODO.*implement",
          "line": 265,
          "match": "# TODO: Implement"
        },
        {
          "pattern": "# TODO.*implement",
          "line": 595,
          "match": "# TODO: Implement"
        },
        {
          "pattern": "# TODO.*implement",
          "line": 629,
          "match": "# TODO: Implement"
        },
        {
          "pattern": "# TODO.*implement",
          "line": 645,
          "match": "# TODO: Implement"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 18,
      "real_implementation_score": 0,
      "classification": "HEAVY_MOCK"
    },
    "core/health/__init__.py": {
      "path": "core/health/__init__.py",
      "lines": 15,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 1,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/health/health_checker.py": {
      "path": "core/health/health_checker.py",
      "lines": 521,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 77,
          "match": "cache: Dict[str, Tuple[datetime, Any]] = {}"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 77,
          "match": "cache: Dict[str, Tuple[datetime, Any]] = {}"
        }
      ],
      "real_implementations": [
        {
          "pattern": "terminusdb.*connect",
          "line": 199,
          "match": "TerminusDB connect"
        },
        {
          "pattern": "terminusdb.*connect",
          "line": 217,
          "match": "TerminusDB connect"
        },
        {
          "pattern": "terminusdb.*connect",
          "line": 237,
          "match": "TerminusDB connect"
        }
      ],
      "complexity_score": 27,
      "real_implementation_score": 17,
      "classification": "FAKE_DATABASE"
    },
    "core/time_travel/metrics.py": {
      "path": "core/time_travel/metrics.py",
      "lines": 267,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 20,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/time_travel/service.py": {
      "path": "core/time_travel/service.py",
      "lines": 775,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 47,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 24,
      "real_implementation_score": 10,
      "classification": "PARTIAL_REAL"
    },
    "core/time_travel/models.py": {
      "path": "core/time_travel/models.py",
      "lines": 311,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 69,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/time_travel/db_optimizations.py": {
      "path": "core/time_travel/db_optimizations.py",
      "lines": 318,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 208,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 297,
          "match": "return {}"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 13,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/time_travel/cache.py": {
      "path": "core/time_travel/cache.py",
      "lines": 308,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 36,
          "match": "cache: Dict[str, Dict[str, Any]] = {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 95,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 36,
          "match": "cache: Dict[str, Dict[str, Any]] = {}"
        }
      ],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 25,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 13,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "core/time_travel/__init__.py": {
      "path": "core/time_travel/__init__.py",
      "lines": 68,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 5,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/idempotent/schema_event_consumer.py": {
      "path": "core/idempotent/schema_event_consumer.py",
      "lines": 415,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 24,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/idempotent/consumer_service.py": {
      "path": "core/idempotent/consumer_service.py",
      "lines": 607,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 497,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 14,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/issue_tracking/issue_database.py": {
      "path": "core/issue_tracking/issue_database.py",
      "lines": 425,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 143,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 400,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 14,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/issue_tracking/issue_service.py": {
      "path": "core/issue_tracking/issue_service.py",
      "lines": 652,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 372,
          "match": "cache: Dict[str, Tuple[IssueValidationResult, datetime]] = {}"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 639,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 130,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 272,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 356,
          "match": "return {}"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 372,
          "match": "cache: Dict[str, Tuple[IssueValidationResult, datetime]] = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 35,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "core/graph/index_generator.py": {
      "path": "core/graph/index_generator.py",
      "lines": 353,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 22,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/graph/__init__.py": {
      "path": "core/graph/__init__.py",
      "lines": 0,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/graph/metadata_generator.py": {
      "path": "core/graph/metadata_generator.py",
      "lines": 423,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 32,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/graph/repositories.py": {
      "path": "core/graph/repositories.py",
      "lines": 672,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 511,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 525,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 535,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 554,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 45,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/document/service.py": {
      "path": "core/document/service.py",
      "lines": 526,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 175,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 182,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 208,
          "match": "return None"
        },
        {
          "pattern": "# TODO.*TerminusDB",
          "line": 85,
          "match": "# TODO: Fix TerminusDB"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/document/repository_simple.py": {
      "path": "core/document/repository_simple.py",
      "lines": 101,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 76,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 79,
          "match": "return []"
        },
        {
          "pattern": "return\\s+None",
          "line": 68,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/integrations/iam_service_client.py": {
      "path": "core/integrations/iam_service_client.py",
      "lines": 420,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 245,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 420,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 23,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/integrations/__init__.py": {
      "path": "core/integrations/__init__.py",
      "lines": 1,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/integrations/iam_service_client_with_fallback.py": {
      "path": "core/integrations/iam_service_client_with_fallback.py",
      "lines": 481,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 380,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 382,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 41,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/integrations/user_service_client.py": {
      "path": "core/integrations/user_service_client.py",
      "lines": 348,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 37,
          "match": "cache = {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 211,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 215,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 37,
          "match": "cache = {}"
        }
      ],
      "real_implementations": [
        {
          "pattern": "jwt\\.encode",
          "line": 344,
          "match": "jwt.encode"
        }
      ],
      "complexity_score": 28,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "core/schema/service.py": {
      "path": "core/schema/service.py",
      "lines": 562,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 61,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 484,
          "match": "return []"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 17,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/schema/conflict_resolver.py": {
      "path": "core/schema/conflict_resolver.py",
      "lines": 388,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 39,
          "match": "cache = {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 96,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 125,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 133,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 172,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 228,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 278,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 39,
          "match": "cache = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 15,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "core/schema/repository_original.py": {
      "path": "core/schema/repository_original.py",
      "lines": 174,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 107,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 110,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 144,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 147,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/schema/registry.py": {
      "path": "core/schema/registry.py",
      "lines": 51,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 30,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 34,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 48,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 38,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 7,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/schema/__init__.py": {
      "path": "core/schema/__init__.py",
      "lines": 4,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 1,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/schema/repository.py": {
      "path": "core/schema/repository.py",
      "lines": 317,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 71,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 96,
          "match": "return []"
        },
        {
          "pattern": "return\\s+None",
          "line": 166,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 185,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 189,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/schema/repository_fixed.py": {
      "path": "core/schema/repository_fixed.py",
      "lines": 287,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 182,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 185,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/schema/service_adapter.py": {
      "path": "core/schema/service_adapter.py",
      "lines": 46,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 9,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/concurrency/optimistic_lock.py": {
      "path": "core/concurrency/optimistic_lock.py",
      "lines": 322,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 19,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/action/service.py": {
      "path": "core/action/service.py",
      "lines": 170,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 15,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/action/models.py": {
      "path": "core/action/models.py",
      "lines": 190,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 68,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/action/dlq_handler.py": {
      "path": "core/action/dlq_handler.py",
      "lines": 472,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 95,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 115,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 31,
      "real_implementation_score": 5,
      "classification": "PARTIAL_REAL"
    },
    "core/action/__init__.py": {
      "path": "core/action/__init__.py",
      "lines": 1,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/action/metadata_service.py": {
      "path": "core/action/metadata_service.py",
      "lines": 300,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 139,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 260,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 279,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/action/routes.py": {
      "path": "core/action/routes.py",
      "lines": 194,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 35,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/iam/scope_mapper.py": {
      "path": "core/iam/scope_mapper.py",
      "lines": 366,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 157,
          "match": "return []"
        },
        {
          "pattern": "return\\s+None",
          "line": 204,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 19,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/iam/scope_rbac_middleware.py": {
      "path": "core/iam/scope_rbac_middleware.py",
      "lines": 145,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 36,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/iam/__init__.py": {
      "path": "core/iam/__init__.py",
      "lines": 0,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/iam/iam_integration.py": {
      "path": "core/iam/iam_integration.py",
      "lines": 426,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 69,
          "match": "cache: Dict[str, Set[str]] = {}"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 325,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 268,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 272,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 94,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 105,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 108,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 69,
          "match": "cache: Dict[str, Set[str]] = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 26,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "core/iam/dependencies.py": {
      "path": "core/iam/dependencies.py",
      "lines": 142,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 20,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/audit/__init__.py": {
      "path": "core/audit/__init__.py",
      "lines": 28,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 3,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/audit/audit_service.py": {
      "path": "core/audit/audit_service.py",
      "lines": 238,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 13,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/resilience/version_service_wrapper.py": {
      "path": "core/resilience/version_service_wrapper.py",
      "lines": 648,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 178,
          "match": "cache: Dict[str, Tuple[Any, float]] = {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 246,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 178,
          "match": "cache: Dict[str, Tuple[Any, float]] = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 30,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "core/resilience/unified_circuit_breaker.py": {
      "path": "core/resilience/unified_circuit_breaker.py",
      "lines": 436,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 383,
          "match": "return None"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 334,
          "match": "except:\n                pass"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 374,
          "match": "except:\n                pass"
        }
      ],
      "silent_failures": [
        {
          "line": 334,
          "match": "except:\n                pass"
        },
        {
          "line": 374,
          "match": "except:\n                pass"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 52,
          "match": "redis.Redis"
        },
        {
          "pattern": "redis\\.Redis",
          "line": 85,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 35,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/history/service.py": {
      "path": "core/history/service.py",
      "lines": 439,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\{\\}",
          "line": 345,
          "match": "return {}"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 13,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/history/models.py": {
      "path": "core/history/models.py",
      "lines": 129,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 39,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/history/__init__.py": {
      "path": "core/history/__init__.py",
      "lines": 17,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 2,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/history/routes.py": {
      "path": "core/history/routes.py",
      "lines": 137,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 13,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/api/schema_generator.py": {
      "path": "core/api/schema_generator.py",
      "lines": 1025,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 601,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 636,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 25,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/event_subscriber/__init__.py": {
      "path": "core/event_subscriber/__init__.py",
      "lines": 4,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/event_subscriber/main.py": {
      "path": "core/event_subscriber/main.py",
      "lines": 347,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 15,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/documents/__init__.py": {
      "path": "core/documents/__init__.py",
      "lines": 45,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 3,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/documents/metadata_frames.py": {
      "path": "core/documents/metadata_frames.py",
      "lines": 440,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 27,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/documents/storage.py": {
      "path": "core/documents/storage.py",
      "lines": 492,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 124,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 170,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 21,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/documents/unfoldable.py": {
      "path": "core/documents/unfoldable.py",
      "lines": 443,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 266,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 268,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 30,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/rust_integration/__init__.py": {
      "path": "core/rust_integration/__init__.py",
      "lines": 169,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 27,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/monitoring/audit_metrics.py": {
      "path": "core/monitoring/audit_metrics.py",
      "lines": 176,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 25,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/versioning/merge_engine.py": {
      "path": "core/versioning/merge_engine.py",
      "lines": 641,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 82,
          "match": "cache = {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 515,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 581,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 601,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 82,
          "match": "cache = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 36,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "core/versioning/merge_engine_fix.py": {
      "path": "core/versioning/merge_engine_fix.py",
      "lines": 454,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\{\\}",
          "line": 389,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 405,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 325,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 341,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 350,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 357,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 366,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 23,
      "real_implementation_score": 0,
      "classification": "HEAVY_MOCK"
    },
    "core/versioning/delta_compression.py": {
      "path": "core/versioning/delta_compression.py",
      "lines": 419,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 296,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 29,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/versioning/version_service.py": {
      "path": "core/versioning/version_service.py",
      "lines": 673,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 291,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 653,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 16,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/versioning/dag_compaction.py": {
      "path": "core/versioning/dag_compaction.py",
      "lines": 393,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 58,
          "match": "cache: Dict[str, CommitNode] = {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 223,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 331,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 58,
          "match": "cache: Dict[str, CommitNode] = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 21,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "core/events/branch_event_publisher.py": {
      "path": "core/events/branch_event_publisher.py",
      "lines": 267,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 9,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/events/cqrs_projections.py": {
      "path": "core/events/cqrs_projections.py",
      "lines": 545,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 95,
          "match": "redis.Redis"
        },
        {
          "pattern": "redis\\.Redis",
          "line": 269,
          "match": "redis.Redis"
        },
        {
          "pattern": "redis\\.Redis",
          "line": 311,
          "match": "redis.Redis"
        },
        {
          "pattern": "redis\\.Redis",
          "line": 473,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 75,
      "real_implementation_score": 40,
      "classification": "REAL_IMPLEMENTATION"
    },
    "core/events/__init__.py": {
      "path": "core/events/__init__.py",
      "lines": 3,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/events/event_sourcing.py": {
      "path": "core/events/event_sourcing.py",
      "lines": 654,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 387,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 398,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 109,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/events/immutable_event_store.py": {
      "path": "core/events/immutable_event_store.py",
      "lines": 586,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 461,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 487,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 500,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 532,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 185,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 43,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/etag/monitoring.py": {
      "path": "core/etag/monitoring.py",
      "lines": 494,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 29,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/etag/decorators.py": {
      "path": "core/etag/decorators.py",
      "lines": 403,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 334,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 53,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/backup/production_backup.py": {
      "path": "core/backup/production_backup.py",
      "lines": 633,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 621,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 626,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 86,
          "match": "redis.Redis"
        },
        {
          "pattern": "redis\\.Redis",
          "line": 128,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 38,
      "real_implementation_score": 10,
      "classification": "PARTIAL_REAL"
    },
    "core/backup/__init__.py": {
      "path": "core/backup/__init__.py",
      "lines": 0,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/backup/main.py": {
      "path": "core/backup/main.py",
      "lines": 516,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 39,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 38,
      "real_implementation_score": 10,
      "classification": "PARTIAL_REAL"
    },
    "core/validation/migration_planner.py": {
      "path": "core/validation/migration_planner.py",
      "lines": 665,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/validation/interfaces.py": {
      "path": "core/validation/interfaces.py",
      "lines": 206,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 45,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/validation/service.py": {
      "path": "core/validation/service.py",
      "lines": 362,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 296,
          "match": "return []"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 15,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/validation/schema_validator.py": {
      "path": "core/validation/schema_validator.py",
      "lines": 440,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 35,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/validation/rule_registry.py": {
      "path": "core/validation/rule_registry.py",
      "lines": 205,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 19,
          "match": "cache: Dict[str, List[BreakingChangeRule]] = {}"
        },
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 20,
          "match": "cache_timestamp: Dict[str, datetime] = {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 135,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 19,
          "match": "cache: Dict[str, List[BreakingChangeRule]] = {}"
        },
        {
          "line": 20,
          "match": "cache_timestamp: Dict[str, datetime] = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 18,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "core/validation/version_manager.py": {
      "path": "core/validation/version_manager.py",
      "lines": 484,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 381,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 35,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/validation/models.py": {
      "path": "core/validation/models.py",
      "lines": 190,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 74,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/validation/ci_integration.py": {
      "path": "core/validation/ci_integration.py",
      "lines": 574,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 40,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/validation/naming_convention_v2.py": {
      "path": "core/validation/naming_convention_v2.py",
      "lines": 249,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 111,
          "match": "return []"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/validation/events.py": {
      "path": "core/validation/events.py",
      "lines": 106,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 29,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/validation/ports.py": {
      "path": "core/validation/ports.py",
      "lines": 162,
      "mock_indicators": [
        {
          "pattern": "def\\s+\\w+.*:\\s*pass",
          "line": 161,
          "match": "def publish_batch(self, events: List[Dict[str, Any]]) -> None:\n        pass"
        },
        {
          "pattern": "async\\s+def\\s+\\w+.*:\\s*pass",
          "line": 161,
          "match": "async def publish_batch(self, events: List[Dict[str, Any]]) -> None:\n        pass"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 136,
          "match": "storage: Dict[str, Any] = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 31,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "core/validation/__init__.py": {
      "path": "core/validation/__init__.py",
      "lines": 29,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/validation/naming_config.py": {
      "path": "core/validation/naming_config.py",
      "lines": 823,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\{\\}",
          "line": 144,
          "match": "return {}"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 59,
          "match": "except KeyError:\n            pass"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 200,
          "match": "except KeyError:\n            pass"
        }
      ],
      "silent_failures": [
        {
          "line": 59,
          "match": "except KeyError:\n            pass"
        },
        {
          "line": 200,
          "match": "except KeyError:\n            pass"
        },
        {
          "line": 59,
          "match": "except KeyError:\n            pass\n    \n    #"
        },
        {
          "line": 200,
          "match": "except KeyError:\n            pass\n        \n        #"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 29,
      "real_implementation_score": 0,
      "classification": "SILENT_FAILURE"
    },
    "core/validation/container.py": {
      "path": "core/validation/container.py",
      "lines": 169,
      "mock_indicators": [
        {
          "pattern": "mock.*terminus",
          "line": 14,
          "match": "MockTerminus"
        },
        {
          "pattern": "mock.*terminus",
          "line": 49,
          "match": "MockTerminus"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 24,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/validation/naming_history.py": {
      "path": "core/validation/naming_history.py",
      "lines": 618,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 375,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 408,
          "match": "return []"
        },
        {
          "pattern": "return\\s+None",
          "line": 395,
          "match": "return None"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 90,
          "match": "except KeyError:\n            pass"
        }
      ],
      "silent_failures": [
        {
          "line": 90,
          "match": "except KeyError:\n            pass"
        },
        {
          "line": 90,
          "match": "except KeyError:\n            pass\n        \n        #"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 35,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/validation/tampering_detection.py": {
      "path": "core/validation/tampering_detection.py",
      "lines": 600,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 105,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 124,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 74,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 87,
          "match": "return {}"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 27,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/validation/input_sanitization.py": {
      "path": "core/validation/input_sanitization.py",
      "lines": 558,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 35,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/validation/policy_signing.py": {
      "path": "core/validation/policy_signing.py",
      "lines": 445,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 398,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 434,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 38,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/validation/naming_convention.py": {
      "path": "core/validation/naming_convention.py",
      "lines": 736,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 596,
          "match": "return []"
        },
        {
          "pattern": "return\\s+None",
          "line": 694,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 47,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/validation/validation_logging.py": {
      "path": "core/validation/validation_logging.py",
      "lines": 721,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 50,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/validation/dependencies.py": {
      "path": "core/validation/dependencies.py",
      "lines": 107,
      "mock_indicators": [
        {
          "pattern": "mock.*terminus",
          "line": 14,
          "match": "MockTerminus"
        },
        {
          "pattern": "mock.*terminus",
          "line": 39,
          "match": "MockTerminus"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 21,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/validation/adapters.py": {
      "path": "core/validation/adapters.py",
      "lines": 342,
      "mock_indicators": [
        {
          "pattern": "storage\\s*=\\s*\\{\\}",
          "line": 228,
          "match": "storage = {}"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 85,
          "match": "return []"
        },
        {
          "pattern": "return\\s+None",
          "line": 35,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 98,
          "match": "return None"
        },
        {
          "pattern": "mock.*terminus",
          "line": 253,
          "match": "MockTerminus"
        },
        {
          "pattern": "mock.*terminus",
          "line": 254,
          "match": "Mock Terminus"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 228,
          "match": "storage = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 39,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "core/validation/decorators.py": {
      "path": "core/validation/decorators.py",
      "lines": 128,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 20,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/validation/rules/type_incompatibility.py": {
      "path": "core/validation/rules/type_incompatibility.py",
      "lines": 366,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 116,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 176,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 9,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/validation/rules/primary_key.py": {
      "path": "core/validation/rules/primary_key.py",
      "lines": 95,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 87,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 95,
          "match": "return None"
        },
        {
          "pattern": "def\\s+\\w+.*:\\s*pass",
          "line": 17,
          "match": "def __init__(self):\n        pass"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 9,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/validation/rules/type_change.py": {
      "path": "core/validation/rules/type_change.py",
      "lines": 79,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 65,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/validation/rules/__init__.py": {
      "path": "core/validation/rules/__init__.py",
      "lines": 3,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/validation/rules/data_type.py": {
      "path": "core/validation/rules/data_type.py",
      "lines": 251,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 39,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 93,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 140,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 185,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 208,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 251,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 19,
      "real_implementation_score": 0,
      "classification": "HEAVY_MOCK"
    },
    "core/validation/rules/naming_convention_rule.py": {
      "path": "core/validation/rules/naming_convention_rule.py",
      "lines": 485,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 208,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 16,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/validation/rules/data_impact_analyzer.py": {
      "path": "core/validation/rules/data_impact_analyzer.py",
      "lines": 626,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 112,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 17,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/validation/rules/example_decorated_rule.py": {
      "path": "core/validation/rules/example_decorated_rule.py",
      "lines": 72,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 40,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 72,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 15,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/validation/rules/primary_key_change.py": {
      "path": "core/validation/rules/primary_key_change.py",
      "lines": 738,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 104,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 738,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 15,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/validation/rules/required_field.py": {
      "path": "core/validation/rules/required_field.py",
      "lines": 769,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 100,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 660,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 686,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 733,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 21,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/validation/rules/shared_property.py": {
      "path": "core/validation/rules/shared_property.py",
      "lines": 126,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 42,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 77,
          "match": "return None"
        },
        {
          "pattern": "def\\s+\\w+.*:\\s*pass",
          "line": 17,
          "match": "def __init__(self):\n        pass"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 9,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/validation/rules/base.py": {
      "path": "core/validation/rules/base.py",
      "lines": 217,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 204,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 25,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "core/interfaces/event.py": {
      "path": "core/interfaces/event.py",
      "lines": 32,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 7,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/interfaces/property.py": {
      "path": "core/interfaces/property.py",
      "lines": 77,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 8,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/interfaces/branch_interface.py": {
      "path": "core/interfaces/branch_interface.py",
      "lines": 63,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 8,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/interfaces/database.py": {
      "path": "core/interfaces/database.py",
      "lines": 39,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 7,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/interfaces/__init__.py": {
      "path": "core/interfaces/__init__.py",
      "lines": 17,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 6,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/interfaces/time_travel_interface.py": {
      "path": "core/interfaces/time_travel_interface.py",
      "lines": 70,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 8,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/interfaces/document.py": {
      "path": "core/interfaces/document.py",
      "lines": 76,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 8,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/interfaces/schema.py": {
      "path": "core/interfaces/schema.py",
      "lines": 47,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 7,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "core/interfaces/validation.py": {
      "path": "core/interfaces/validation.py",
      "lines": 26,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 6,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "bootstrap/config.py": {
      "path": "bootstrap/config.py",
      "lines": 173,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\{\\}",
          "line": 26,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 22,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "terminusdb.*connect",
          "line": 43,
          "match": "TERMINUSDB_USE_MTLS\", description=\"Enable/disable mTLS for TerminusDB connect"
        }
      ],
      "complexity_score": 64,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "bootstrap/containers.py": {
      "path": "bootstrap/containers.py",
      "lines": 92,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 20,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "bootstrap/app.py": {
      "path": "bootstrap/app.py",
      "lines": 412,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 256,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "bootstrap/app_minimal.py": {
      "path": "bootstrap/app_minimal.py",
      "lines": 66,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 14,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "bootstrap/dependencies.py": {
      "path": "bootstrap/dependencies.py",
      "lines": 73,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 22,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "bootstrap/providers/lock_manager.py": {
      "path": "bootstrap/providers/lock_manager.py",
      "lines": 51,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 11,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "bootstrap/providers/event.py": {
      "path": "bootstrap/providers/event.py",
      "lines": 47,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 13,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "bootstrap/providers/unified_provider.py": {
      "path": "bootstrap/providers/unified_provider.py",
      "lines": 83,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "bootstrap/providers/audit.py": {
      "path": "bootstrap/providers/audit.py",
      "lines": 53,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 15,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "bootstrap/providers/embedding.py": {
      "path": "bootstrap/providers/embedding.py",
      "lines": 239,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\{\\}",
          "line": 170,
          "match": "return {}"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 18,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "bootstrap/providers/terminus_port_adapter.py": {
      "path": "bootstrap/providers/terminus_port_adapter.py",
      "lines": 48,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 23,
          "match": "return []"
        },
        {
          "pattern": "return\\s+None",
          "line": 30,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 8,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "bootstrap/providers/terminus_gateway.py": {
      "path": "bootstrap/providers/terminus_gateway.py",
      "lines": 92,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 15,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "bootstrap/providers/redis_provider.py": {
      "path": "bootstrap/providers/redis_provider.py",
      "lines": 68,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 13,
          "match": "redis.Redis"
        },
        {
          "pattern": "redis\\.Redis",
          "line": 20,
          "match": "redis.Redis"
        },
        {
          "pattern": "redis\\.Redis",
          "line": 22,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 11,
      "real_implementation_score": 30,
      "classification": "PARTIAL_REAL"
    },
    "bootstrap/providers/database.py": {
      "path": "bootstrap/providers/database.py",
      "lines": 91,
      "mock_indicators": [
        {
          "pattern": "# TODO.*implement",
          "line": 64,
          "match": "# TODO: Implement"
        },
        {
          "pattern": "def\\s+\\w+.*:\\s*pass",
          "line": 90,
          "match": "def shutdown(self) -> None:\n        pass"
        },
        {
          "pattern": "async\\s+def\\s+\\w+.*:\\s*pass",
          "line": 90,
          "match": "async def shutdown(self) -> None:\n        pass"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 24,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "bootstrap/providers/__init__.py": {
      "path": "bootstrap/providers/__init__.py",
      "lines": 17,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 5,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "bootstrap/providers/branch.py": {
      "path": "bootstrap/providers/branch.py",
      "lines": 39,
      "mock_indicators": [
        {
          "pattern": "def\\s+\\w+.*:\\s*pass",
          "line": 38,
          "match": "def shutdown(self) -> None:\n        pass"
        },
        {
          "pattern": "async\\s+def\\s+\\w+.*:\\s*pass",
          "line": 38,
          "match": "async def shutdown(self) -> None:\n        pass"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "bootstrap/providers/circuit_breaker.py": {
      "path": "bootstrap/providers/circuit_breaker.py",
      "lines": 53,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 12,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 9,
      "real_implementation_score": 10,
      "classification": "PARTIAL_REAL"
    },
    "bootstrap/providers/graph_analysis.py": {
      "path": "bootstrap/providers/graph_analysis.py",
      "lines": 146,
      "mock_indicators": [
        {
          "pattern": "def\\s+\\w+.*:\\s*pass",
          "line": 137,
          "match": "def shutdown(self) -> None:\n                pass"
        },
        {
          "pattern": "async\\s+def\\s+\\w+.*:\\s*pass",
          "line": 137,
          "match": "async def shutdown(self) -> None:\n                pass"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 26,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "bootstrap/providers/scheduler.py": {
      "path": "bootstrap/providers/scheduler.py",
      "lines": 43,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 11,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "bootstrap/providers/base.py": {
      "path": "bootstrap/providers/base.py",
      "lines": 35,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "bootstrap/providers/schema.py": {
      "path": "bootstrap/providers/schema.py",
      "lines": 45,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "bootstrap/providers/validation.py": {
      "path": "bootstrap/providers/validation.py",
      "lines": 43,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "sdks/python/setup.py": {
      "path": "sdks/python/setup.py",
      "lines": 40,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 1,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "sdks/python/oms_event_sdk/models.py": {
      "path": "sdks/python/oms_event_sdk/models.py",
      "lines": 48,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 25,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "sdks/python/oms_event_sdk/client.py": {
      "path": "sdks/python/oms_event_sdk/client.py",
      "lines": 769,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 23,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "sdks/python/oms_event_sdk/__init__.py": {
      "path": "sdks/python/oms_event_sdk/__init__.py",
      "lines": 18,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 2,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "sdks/python/oms_event_sdk_py/models.py": {
      "path": "sdks/python/oms_event_sdk_py/models.py",
      "lines": 48,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 25,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "sdks/python/oms_event_sdk_py/client.py": {
      "path": "sdks/python/oms_event_sdk_py/client.py",
      "lines": 769,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 23,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "sdks/python/oms_event_sdk_py/__init__.py": {
      "path": "sdks/python/oms_event_sdk_py/__init__.py",
      "lines": 18,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 2,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "config/secure_config.py": {
      "path": "config/secure_config.py",
      "lines": 230,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "httpx\\.AsyncClient",
          "line": 185,
          "match": "httpx.AsyncClient"
        }
      ],
      "complexity_score": 19,
      "real_implementation_score": 10,
      "classification": "PARTIAL_REAL"
    },
    "tests/conftest.py": {
      "path": "tests/conftest.py",
      "lines": 214,
      "mock_indicators": [
        {
          "pattern": "mock.*terminus",
          "line": 44,
          "match": "Mock the return value for the specific terminus"
        },
        {
          "pattern": "mock.*terminus",
          "line": 45,
          "match": "mock_terminus"
        },
        {
          "pattern": "mock.*terminus",
          "line": 46,
          "match": "mock_db_client.get_client.return_value = mock_terminus"
        },
        {
          "pattern": "mock.*auth",
          "line": 157,
          "match": "mock user context for auth"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "jwt\\.encode",
          "line": 192,
          "match": "jwt.encode"
        }
      ],
      "complexity_score": 32,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "tests/unit/core/branch/test_branch_service.py": {
      "path": "tests/unit/core/branch/test_branch_service.py",
      "lines": 881,
      "mock_indicators": [
        {
          "pattern": "def\\s+\\w+.*:\\s*pass",
          "line": 68,
          "match": "def __init__(self, *args, **kwargs):\n            pass"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 63,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "tests/unit/core/schema/test_conflict_resolver.py": {
      "path": "tests/unit/core/schema/test_conflict_resolver.py",
      "lines": 703,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 25,
          "match": "cache = {}"
        },
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 74,
          "match": "cache == {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 159,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 347,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 427,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 25,
          "match": "cache = {}"
        },
        {
          "line": 74,
          "match": "cache == {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 68,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "tests/unit/core/versioning/test_merge_engine.py": {
      "path": "tests/unit/core/versioning/test_merge_engine.py",
      "lines": 862,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 67,
          "match": "cache = {}"
        },
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 351,
          "match": "cache == {}"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 144,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 148,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 152,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 156,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 160,
          "match": "return []"
        },
        {
          "pattern": "return\\s+None",
          "line": 182,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 208,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 226,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 67,
          "match": "cache = {}"
        },
        {
          "line": 351,
          "match": "cache == {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 69,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "tests/integration/test_time_travel_queries.py": {
      "path": "tests/integration/test_time_travel_queries.py",
      "lines": 421,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 49,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "tests/integration/test_metadata_frames.py": {
      "path": "tests/integration/test_metadata_frames.py",
      "lines": 632,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 18,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "tests/integration/test_unfoldable_documents.py": {
      "path": "tests/integration/test_unfoldable_documents.py",
      "lines": 437,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 17,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "tests/integration/test_delta_encoding.py": {
      "path": "tests/integration/test_delta_encoding.py",
      "lines": 365,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 19,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "tests/utils/performance_benchmark.py": {
      "path": "tests/utils/performance_benchmark.py",
      "lines": 482,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 163,
          "match": "cache = {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 230,
          "match": "return None"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 41,
          "match": "except:\n            pass"
        }
      ],
      "silent_failures": [
        {
          "line": 41,
          "match": "except:\n            pass"
        }
      ],
      "fake_db_usage": [
        {
          "line": 163,
          "match": "cache = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 29,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "tests/utils/comprehensive_validation.py": {
      "path": "tests/utils/comprehensive_validation.py",
      "lines": 365,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 14,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "utils/safe_json_encoder.py": {
      "path": "utils/safe_json_encoder.py",
      "lines": 167,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 38,
          "match": "return None"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 113,
          "match": "except Exception:\n            pass"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 120,
          "match": "except Exception:\n            pass"
        },
        {
          "pattern": "except.*Exception.*:\\s*pass",
          "line": 113,
          "match": "except Exception:\n            pass"
        },
        {
          "pattern": "except.*Exception.*:\\s*pass",
          "line": 120,
          "match": "except Exception:\n            pass"
        }
      ],
      "silent_failures": [
        {
          "line": 113,
          "match": "except Exception:\n            pass"
        },
        {
          "line": 120,
          "match": "except Exception:\n            pass"
        },
        {
          "line": 113,
          "match": "except Exception:\n            pass"
        },
        {
          "line": 120,
          "match": "except Exception:\n            pass"
        },
        {
          "line": 120,
          "match": "except Exception:\n            pass\n    \n    #"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 18,
      "real_implementation_score": 0,
      "classification": "SILENT_FAILURE"
    },
    "utils/retry_strategy.py": {
      "path": "utils/retry_strategy.py",
      "lines": 511,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 97,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "utils/__init__.py": {
      "path": "utils/__init__.py",
      "lines": 27,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 2,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "utils/logger.py": {
      "path": "utils/logger.py",
      "lines": 145,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "utils/unified_logger.py": {
      "path": "utils/unified_logger.py",
      "lines": 360,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 46,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "utils/git_utils.py": {
      "path": "utils/git_utils.py",
      "lines": 62,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 7,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/embedding_client.py": {
      "path": "shared/embedding_client.py",
      "lines": 376,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 201,
          "match": "return []"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 16,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "shared/scheduler_client.py": {
      "path": "shared/scheduler_client.py",
      "lines": 343,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\{\\}",
          "line": 264,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 316,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 74,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 94,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 181,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 212,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "HEAVY_MOCK"
    },
    "shared/vector_store.py": {
      "path": "shared/vector_store.py",
      "lines": 567,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 245,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 288,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 328,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 432,
          "match": "return []"
        },
        {
          "pattern": "return\\s+None",
          "line": 168,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 176,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 479,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 27,
      "real_implementation_score": 0,
      "classification": "HEAVY_MOCK"
    },
    "shared/iam_contracts.py": {
      "path": "shared/iam_contracts.py",
      "lines": 166,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 59,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/events.py": {
      "path": "shared/events.py",
      "lines": 26,
      "mock_indicators": [
        {
          "pattern": "def\\s+\\w+.*:\\s*pass",
          "line": 12,
          "match": "def __init__(self, *args, **kwargs):\n        pass"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 7,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "shared/event_gateway_stub.py": {
      "path": "shared/event_gateway_stub.py",
      "lines": 262,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 14,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/embedding_config.py": {
      "path": "shared/embedding_config.py",
      "lines": 326,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 31,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/__init__.py": {
      "path": "shared/__init__.py",
      "lines": 1,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/event_gateway_client.py": {
      "path": "shared/event_gateway_client.py",
      "lines": 415,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\{\\}",
          "line": 291,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 365,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 247,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 339,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 11,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "shared/utils.py": {
      "path": "shared/utils.py",
      "lines": 19,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 4,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/scheduler_stub.py": {
      "path": "shared/scheduler_stub.py",
      "lines": 184,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 105,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 109,
          "match": "return None"
        },
        {
          "pattern": "# TODO.*implement",
          "line": 151,
          "match": "# TODO: Implement"
        },
        {
          "pattern": "# TODO.*implement",
          "line": 157,
          "match": "# TODO: Implement"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 11,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "shared/audit_client.py": {
      "path": "shared/audit_client.py",
      "lines": 412,
      "mock_indicators": [
        {
          "pattern": "except.*:\\s*pass",
          "line": 180,
          "match": "except asyncio.CancelledError:\n                pass"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 356,
          "match": "except asyncio.TimeoutError:\n                    pass"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 377,
          "match": "except:\n                        pass"
        }
      ],
      "silent_failures": [
        {
          "line": 180,
          "match": "except asyncio.CancelledError:\n                pass"
        },
        {
          "line": 356,
          "match": "except asyncio.TimeoutError:\n                    pass"
        },
        {
          "line": 377,
          "match": "except:\n                        pass"
        },
        {
          "line": 356,
          "match": "except asyncio.TimeoutError:\n                    pass\n                \n                #"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "httpx\\.AsyncClient",
          "line": 106,
          "match": "httpx.AsyncClient"
        },
        {
          "pattern": "httpx\\.AsyncClient",
          "line": 125,
          "match": "httpx.AsyncClient"
        },
        {
          "pattern": "httpx\\.AsyncClient",
          "line": 154,
          "match": "httpx.AsyncClient"
        },
        {
          "pattern": "httpx\\.AsyncClient",
          "line": 162,
          "match": "httpx.AsyncClient"
        }
      ],
      "complexity_score": 40,
      "real_implementation_score": 13,
      "classification": "SILENT_FAILURE"
    },
    "shared/user_service_client.py": {
      "path": "shared/user_service_client.py",
      "lines": 284,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 139,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 167,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 249,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 261,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 273,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "httpx\\.AsyncClient",
          "line": 30,
          "match": "httpx.AsyncClient"
        },
        {
          "pattern": "httpx\\.AsyncClient",
          "line": 48,
          "match": "httpx.AsyncClient"
        }
      ],
      "complexity_score": 26,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "shared/grpc_interceptors.py": {
      "path": "shared/grpc_interceptors.py",
      "lines": 124,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 21,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/data_kernel_client.py": {
      "path": "shared/data_kernel_client.py",
      "lines": 314,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\{\\}",
          "line": 147,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 273,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 177,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 180,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 13,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "shared/embedding_stub.py": {
      "path": "shared/embedding_stub.py",
      "lines": 818,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 593,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 620,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 756,
          "match": "return []"
        },
        {
          "pattern": "return\\s+None",
          "line": 661,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 663,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 667,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 39,
      "real_implementation_score": 0,
      "classification": "HEAVY_MOCK"
    },
    "shared/database/__init__.py": {
      "path": "shared/database/__init__.py",
      "lines": 1,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/database/postgres_connector.py": {
      "path": "shared/database/postgres_connector.py",
      "lines": 537,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 19,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/database/sqlite_connector.py": {
      "path": "shared/database/sqlite_connector.py",
      "lines": 374,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 21,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/terminus_context/constants.py": {
      "path": "shared/terminus_context/constants.py",
      "lines": 90,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 14,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/terminus_context/__init__.py": {
      "path": "shared/terminus_context/__init__.py",
      "lines": 50,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 2,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/terminus_context/context.py": {
      "path": "shared/terminus_context/context.py",
      "lines": 138,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 31,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/cache/__init__.py": {
      "path": "shared/cache/__init__.py",
      "lines": 1,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/cache/terminusdb_cache.py": {
      "path": "shared/cache/terminusdb_cache.py",
      "lines": 553,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 90,
          "match": "cache: Dict[str, Dict[str, Any]] = {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 217,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 90,
          "match": "cache: Dict[str, Dict[str, Any]] = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 13,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "shared/cache/smart_cache.py": {
      "path": "shared/cache/smart_cache.py",
      "lines": 597,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 258,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 390,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 400,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 404,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 478,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 500,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 504,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 138,
          "match": "redis.Redis"
        },
        {
          "pattern": "redis\\.Redis",
          "line": 568,
          "match": "redis.Redis"
        },
        {
          "pattern": "redis\\.Redis",
          "line": 584,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 35,
      "real_implementation_score": 0,
      "classification": "HEAVY_MOCK"
    },
    "shared/security/__init__.py": {
      "path": "shared/security/__init__.py",
      "lines": 1,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/models/domain.py": {
      "path": "shared/models/domain.py",
      "lines": 626,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 176,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/models/function_types.py": {
      "path": "shared/models/function_types.py",
      "lines": 847,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 97,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/models/action_types.py": {
      "path": "shared/models/action_types.py",
      "lines": 118,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 69,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/models/__init__.py": {
      "path": "shared/models/__init__.py",
      "lines": 5,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/models/data_types.py": {
      "path": "shared/models/data_types.py",
      "lines": 878,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 818,
          "match": "return []"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 71,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "shared/proto_stubs/__init__.py": {
      "path": "shared/proto_stubs/__init__.py",
      "lines": 0,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/events/__init__.py": {
      "path": "shared/events/__init__.py",
      "lines": 47,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 13,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/infrastructure/real_nats_client.py": {
      "path": "shared/infrastructure/real_nats_client.py",
      "lines": 367,
      "mock_indicators": [
        {
          "pattern": "except.*:\\s*pass",
          "line": 312,
          "match": "except:\n                    pass"
        }
      ],
      "silent_failures": [
        {
          "line": 312,
          "match": "except:\n                    pass"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 20,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "shared/infrastructure/__init__.py": {
      "path": "shared/infrastructure/__init__.py",
      "lines": 1,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "shared/infrastructure/nats_client.py": {
      "path": "shared/infrastructure/nats_client.py",
      "lines": 93,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 1,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "models/override_request.py": {
      "path": "models/override_request.py",
      "lines": 239,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 212,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 216,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 220,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 20,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "models/domain.py": {
      "path": "models/domain.py",
      "lines": 626,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 176,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "models/merge_hints.py": {
      "path": "models/merge_hints.py",
      "lines": 219,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 180,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 190,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 37,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "models/idempotency.py": {
      "path": "models/idempotency.py",
      "lines": 225,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 46,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "models/issue_tracking.py": {
      "path": "models/issue_tracking.py",
      "lines": 335,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 309,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 60,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "models/job.py": {
      "path": "models/job.py",
      "lines": 154,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 121,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 50,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "models/function_types.py": {
      "path": "models/function_types.py",
      "lines": 847,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 97,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "models/branch_state.py": {
      "path": "models/branch_state.py",
      "lines": 242,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 48,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "models/action_types.py": {
      "path": "models/action_types.py",
      "lines": 118,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 69,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "models/__init__.py": {
      "path": "models/__init__.py",
      "lines": 5,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "models/etag.py": {
      "path": "models/etag.py",
      "lines": 212,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 46,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "models/data_types.py": {
      "path": "models/data_types.py",
      "lines": 878,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 818,
          "match": "return []"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 71,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "models/struct_types.py": {
      "path": "models/struct_types.py",
      "lines": 378,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 160,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 20,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "models/shadow_index.py": {
      "path": "models/shadow_index.py",
      "lines": 187,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 41,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "models/semantic_types.py": {
      "path": "models/semantic_types.py",
      "lines": 370,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 30,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "models/permissions.py": {
      "path": "models/permissions.py",
      "lines": 249,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 126,
          "match": "cache: Dict[str, Set[str]] = {}"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 126,
          "match": "cache: Dict[str, Set[str]] = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 30,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "models/exceptions.py": {
      "path": "models/exceptions.py",
      "lines": 70,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 31,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "models/scope_role_mapping.py": {
      "path": "models/scope_role_mapping.py",
      "lines": 461,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 327,
          "match": "return []"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 20,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "observability/pyroscope_integration.py": {
      "path": "observability/pyroscope_integration.py",
      "lines": 353,
      "mock_indicators": [
        {
          "pattern": "def\\s+\\w+.*:\\s*pass",
          "line": 234,
          "match": "def __exit__(self, *args): pass"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 43,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "observability/enterprise_integration.py": {
      "path": "observability/enterprise_integration.py",
      "lines": 437,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 150,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 164,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 176,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 40,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "observability/advanced_gc_monitoring.py": {
      "path": "observability/advanced_gc_monitoring.py",
      "lines": 564,
      "mock_indicators": [
        {
          "pattern": "except.*:\\s*pass",
          "line": 261,
          "match": "except:\n                    pass"
        }
      ],
      "silent_failures": [
        {
          "line": 261,
          "match": "except:\n                    pass"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 40,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "observability/enterprise_tracing.py": {
      "path": "observability/enterprise_tracing.py",
      "lines": 614,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 47,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "observability/enterprise_metrics.py": {
      "path": "observability/enterprise_metrics.py",
      "lines": 882,
      "mock_indicators": [
        {
          "pattern": "except.*:\\s*pass",
          "line": 788,
          "match": "except:\n                pass"
        }
      ],
      "silent_failures": [
        {
          "line": 788,
          "match": "except:\n                pass"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 34,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "grpc_services/server.py": {
      "path": "grpc_services/server.py",
      "lines": 456,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 111,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 42,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "grpc_services/__init__.py": {
      "path": "grpc_services/__init__.py",
      "lines": 0,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_microservices_20250705/unified_publisher.py": {
      "path": "archive_microservices_20250705/unified_publisher.py",
      "lines": 591,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 38,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_microservices_20250705/embeddings/service.py": {
      "path": "archive_microservices_20250705/embeddings/service.py",
      "lines": 542,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 119,
          "match": "cache_map = {}"
        },
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 385,
          "match": "cached_embeddings = {}"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 380,
          "match": "return {}"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 119,
          "match": "cache_map = {}"
        },
        {
          "line": 385,
          "match": "cached_embeddings = {}"
        }
      ],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 41,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 19,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "archive_microservices_20250705/embeddings/__init__.py": {
      "path": "archive_microservices_20250705/embeddings/__init__.py",
      "lines": 93,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 2,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_microservices_20250705/embeddings/providers.py": {
      "path": "archive_microservices_20250705/embeddings/providers.py",
      "lines": 602,
      "mock_indicators": [
        {
          "pattern": "def\\s+\\w+.*:\\s*pass",
          "line": 86,
          "match": "def _initialize_client(self):\n        pass"
        },
        {
          "pattern": "def\\s+\\w+.*:\\s*pass",
          "line": 90,
          "match": "def create_embeddings(self, texts: List[str]) -> List[List[float]]:\n        pass"
        },
        {
          "pattern": "def\\s+\\w+.*:\\s*pass",
          "line": 94,
          "match": "def create_single_embedding(self, text: str) -> List[float]:\n        pass"
        },
        {
          "pattern": "async\\s+def\\s+\\w+.*:\\s*pass",
          "line": 90,
          "match": "async def create_embeddings(self, texts: List[str]) -> List[List[float]]:\n        pass"
        },
        {
          "pattern": "async\\s+def\\s+\\w+.*:\\s*pass",
          "line": 94,
          "match": "async def create_single_embedding(self, text: str) -> List[float]:\n        pass"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "httpx\\.AsyncClient",
          "line": 364,
          "match": "httpx.AsyncClient"
        }
      ],
      "complexity_score": 86,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "archive_microservices_20250705/backends/cloudevents_adapter.py": {
      "path": "archive_microservices_20250705/backends/cloudevents_adapter.py",
      "lines": 49,
      "mock_indicators": [
        {
          "pattern": "class\\s+\\w+.*:\\s*pass",
          "line": 5,
          "match": "class CloudEventsAdapter:\n    pass"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 11,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "archive_microservices_20250705/backends/nats_publisher.py": {
      "path": "archive_microservices_20250705/backends/nats_publisher.py",
      "lines": 150,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 9,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_microservices_20250705/backends/cloudevents_migration.py": {
      "path": "archive_microservices_20250705/backends/cloudevents_migration.py",
      "lines": 14,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 5,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_microservices_20250705/backends/state_store.py": {
      "path": "archive_microservices_20250705/backends/state_store.py",
      "lines": 80,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 8,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_microservices_20250705/backends/outbox_service.py": {
      "path": "archive_microservices_20250705/backends/outbox_service.py",
      "lines": 768,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 455,
          "match": "return []"
        },
        {
          "pattern": "return\\s+None",
          "line": 521,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 525,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 615,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 619,
          "match": "return None"
        },
        {
          "pattern": "except.*:\\s*pass",
          "line": 314,
          "match": "except asyncio.CancelledError:\n                pass"
        }
      ],
      "silent_failures": [
        {
          "line": 314,
          "match": "except asyncio.CancelledError:\n                pass"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 31,
      "real_implementation_score": 0,
      "classification": "HEAVY_MOCK"
    },
    "archive_microservices_20250705/backends/outbox_processor.py": {
      "path": "archive_microservices_20250705/backends/outbox_processor.py",
      "lines": 314,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 18,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_microservices_20250705/backends/models.py": {
      "path": "archive_microservices_20250705/backends/models.py",
      "lines": 76,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 28,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_microservices_20250705/backends/__init__.py": {
      "path": "archive_microservices_20250705/backends/__init__.py",
      "lines": 21,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 3,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_microservices_20250705/backends/enhanced_event_service.py": {
      "path": "archive_microservices_20250705/backends/enhanced_event_service.py",
      "lines": 348,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 17,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_microservices_20250705/backends/cloudevents_enhanced.py": {
      "path": "archive_microservices_20250705/backends/cloudevents_enhanced.py",
      "lines": 365,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 45,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_microservices_20250705/backends/http_backend.py": {
      "path": "archive_microservices_20250705/backends/http_backend.py",
      "lines": 97,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_microservices_20250705/backends/audit_backend.py": {
      "path": "archive_microservices_20250705/backends/audit_backend.py",
      "lines": 349,
      "mock_indicators": [
        {
          "pattern": "except.*:\\s*pass",
          "line": 337,
          "match": "except:\n                pass"
        }
      ],
      "silent_failures": [
        {
          "line": 337,
          "match": "except:\n                pass"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "archive_microservices_20250705/backends/eventbridge_adapter.py": {
      "path": "archive_microservices_20250705/backends/eventbridge_adapter.py",
      "lines": 407,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 169,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 317,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 26,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "archive_microservices_20250705/backends/nats_backend.py": {
      "path": "archive_microservices_20250705/backends/nats_backend.py",
      "lines": 221,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_microservices_20250705/backends/nats_config.py": {
      "path": "archive_microservices_20250705/backends/nats_config.py",
      "lines": 225,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 19,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_microservices_20250705/backends/change_detector.py": {
      "path": "archive_microservices_20250705/backends/change_detector.py",
      "lines": 280,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 182,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 15,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "archive_microservices_20250705/scheduler/__init__.py": {
      "path": "archive_microservices_20250705/scheduler/__init__.py",
      "lines": 0,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "archive_microservices_20250705/scheduler/advanced_scheduler.py": {
      "path": "archive_microservices_20250705/scheduler/advanced_scheduler.py",
      "lines": 903,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 801,
          "match": "return []"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 52,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "examples/unfoldable_documents_demo.py": {
      "path": "examples/unfoldable_documents_demo.py",
      "lines": 523,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 19,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "scripts/deploy_production.py": {
      "path": "scripts/deploy_production.py",
      "lines": 613,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 23,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "scripts/generate_schemas.py": {
      "path": "scripts/generate_schemas.py",
      "lines": 297,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 20,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "scripts/validate_complete_system.py": {
      "path": "scripts/validate_complete_system.py",
      "lines": 459,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 21,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "scripts/run_phase6_tests.py": {
      "path": "scripts/run_phase6_tests.py",
      "lines": 66,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 8,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "scripts/verify_imports.py": {
      "path": "scripts/verify_imports.py",
      "lines": 189,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "scripts/quick_verify.py": {
      "path": "scripts/quick_verify.py",
      "lines": 47,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 2,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "scripts/fix_imports.py": {
      "path": "scripts/fix_imports.py",
      "lines": 226,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "scripts/enhanced_import_check.py": {
      "path": "scripts/enhanced_import_check.py",
      "lines": 270,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 14,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "scripts/update_validators_v2.py": {
      "path": "scripts/update_validators_v2.py",
      "lines": 107,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "scripts/migrate_pydantic_v2.py": {
      "path": "scripts/migrate_pydantic_v2.py",
      "lines": 158,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 74,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 14,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "scripts/clean_todo_comments.py": {
      "path": "scripts/clean_todo_comments.py",
      "lines": 227,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 21,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "scripts/production_readiness_check.py": {
      "path": "scripts/production_readiness_check.py",
      "lines": 425,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 24,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "scripts/update_dict_to_model_dump.py": {
      "path": "scripts/update_dict_to_model_dump.py",
      "lines": 79,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 10,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "scripts/migrate_to_secure_db_clients.py": {
      "path": "scripts/migrate_to_secure_db_clients.py",
      "lines": 263,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 13,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "scripts/run_all_tests.py": {
      "path": "scripts/run_all_tests.py",
      "lines": 343,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 16,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "scripts/compare_schemas.py": {
      "path": "scripts/compare_schemas.py",
      "lines": 356,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 20,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "scripts/dev/create_test_user.py": {
      "path": "scripts/dev/create_test_user.py",
      "lines": 114,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 8,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/__init__.py": {
      "path": "api/__init__.py",
      "lines": 0,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/auth_examples.py": {
      "path": "api/auth_examples.py",
      "lines": 175,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 28,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/simple_schema_routes.py": {
      "path": "api/simple_schema_routes.py",
      "lines": 104,
      "mock_indicators": [
        {
          "pattern": "schemas_storage:\\s*Dict\\[.*\\]\\s*=\\s*\\{\\}",
          "line": 15,
          "match": "schemas_storage: Dict[str, Dict] = {}"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 15,
          "match": "schemas_storage: Dict[str, Dict] = {}"
        },
        {
          "line": 15,
          "match": "storage: Dict[str, Dict] = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 28,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "api/main.py": {
      "path": "api/main.py",
      "lines": 69,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 11,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/branch_routes.py": {
      "path": "api/v1/branch_routes.py",
      "lines": 338,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 31,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/audit_routes.py": {
      "path": "api/v1/audit_routes.py",
      "lines": 221,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 25,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/resilience_dashboard_routes.py": {
      "path": "api/v1/resilience_dashboard_routes.py",
      "lines": 589,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 68,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/graph_health_routes.py": {
      "path": "api/v1/graph_health_routes.py",
      "lines": 293,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "terminusdb.*connect",
          "line": 197,
          "match": "TerminusDB connect"
        }
      ],
      "complexity_score": 34,
      "real_implementation_score": 10,
      "classification": "PARTIAL_REAL"
    },
    "api/v1/config_routes.py": {
      "path": "api/v1/config_routes.py",
      "lines": 99,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 9,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/branch_lock_routes.py": {
      "path": "api/v1/branch_lock_routes.py",
      "lines": 687,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 96,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/circuit_breaker_routes.py": {
      "path": "api/v1/circuit_breaker_routes.py",
      "lines": 421,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 39,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/system_routes.py": {
      "path": "api/v1/system_routes.py",
      "lines": 44,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 8,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/__init__.py": {
      "path": "api/v1/__init__.py",
      "lines": 22,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/embedding_routes.py": {
      "path": "api/v1/embedding_routes.py",
      "lines": 352,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 55,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/shadow_index_routes.py": {
      "path": "api/v1/shadow_index_routes.py",
      "lines": 448,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 57,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/idempotent_routes.py": {
      "path": "api/v1/idempotent_routes.py",
      "lines": 366,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 48,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/document_routes.py": {
      "path": "api/v1/document_routes.py",
      "lines": 1401,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 126,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/auth_proxy_routes.py": {
      "path": "api/v1/auth_proxy_routes.py",
      "lines": 612,
      "mock_indicators": [
        {
          "pattern": "class\\s+\\w+.*:\\s*pass",
          "line": 44,
          "match": "class MFADisableRequest(BaseModel):\n    pass"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 59,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "api/v1/document_crud_routes.py": {
      "path": "api/v1/document_crud_routes.py",
      "lines": 339,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 28,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/schema_routes.py": {
      "path": "api/v1/schema_routes.py",
      "lines": 141,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 20,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/property_routes.py": {
      "path": "api/v1/property_routes.py",
      "lines": 218,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 26,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/time_travel_routes.py": {
      "path": "api/v1/time_travel_routes.py",
      "lines": 396,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 47,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/organization_routes.py": {
      "path": "api/v1/organization_routes.py",
      "lines": 171,
      "mock_indicators": [
        {
          "pattern": "# TODO.*implement",
          "line": 30,
          "match": "# TODO: Implement"
        },
        {
          "pattern": "# TODO.*implement",
          "line": 52,
          "match": "# TODO: Implement"
        },
        {
          "pattern": "# TODO.*implement",
          "line": 93,
          "match": "# TODO: Implement"
        },
        {
          "pattern": "# TODO.*implement",
          "line": 121,
          "match": "# TODO: Implement"
        },
        {
          "pattern": "# TODO.*implement",
          "line": 154,
          "match": "# TODO: Implement"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 20,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "api/v1/issue_tracking_routes.py": {
      "path": "api/v1/issue_tracking_routes.py",
      "lines": 504,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 74,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/version_routes.py": {
      "path": "api/v1/version_routes.py",
      "lines": 357,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 48,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/batch_routes.py": {
      "path": "api/v1/batch_routes.py",
      "lines": 381,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 56,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/health_routes.py": {
      "path": "api/v1/health_routes.py",
      "lines": 58,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 14,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/job_progress_routes.py": {
      "path": "api/v1/job_progress_routes.py",
      "lines": 300,
      "mock_indicators": [
        {
          "pattern": "except.*:\\s*pass",
          "line": 157,
          "match": "except WebSocketDisconnect:\n        pass"
        }
      ],
      "silent_failures": [
        {
          "line": 157,
          "match": "except WebSocketDisconnect:\n        pass"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 31,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 27,
      "real_implementation_score": 2,
      "classification": "PARTIAL_REAL"
    },
    "api/v1/semantic_types/__init__.py": {
      "path": "api/v1/semantic_types/__init__.py",
      "lines": 2,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 1,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/semantic_types/endpoints.py": {
      "path": "api/v1/semantic_types/endpoints.py",
      "lines": 348,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 43,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/schema_generation/__init__.py": {
      "path": "api/v1/schema_generation/__init__.py",
      "lines": 9,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 1,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/schema_generation/endpoints.py": {
      "path": "api/v1/schema_generation/endpoints.py",
      "lines": 348,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 32,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/v1/struct_types/endpoints.py": {
      "path": "api/v1/struct_types/endpoints.py",
      "lines": 403,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 48,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/graphql/auth.py": {
      "path": "api/graphql/auth.py",
      "lines": 302,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 68,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 70,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 89,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 125,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 152,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 212,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 218,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 272,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 99,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 23,
      "real_implementation_score": 0,
      "classification": "HEAVY_MOCK"
    },
    "api/graphql/config.py": {
      "path": "api/graphql/config.py",
      "lines": 65,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 8,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/graphql/subscriptions.py": {
      "path": "api/graphql/subscriptions.py",
      "lines": 388,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 39,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/graphql/__init__.py": {
      "path": "api/graphql/__init__.py",
      "lines": 15,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 4,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/graphql/document_schema.py": {
      "path": "api/graphql/document_schema.py",
      "lines": 481,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 97,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/graphql/working_schema.py": {
      "path": "api/graphql/working_schema.py",
      "lines": 54,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 26,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/graphql/main.py": {
      "path": "api/graphql/main.py",
      "lines": 283,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 42,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/graphql/realtime_publisher.py": {
      "path": "api/graphql/realtime_publisher.py",
      "lines": 230,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 34,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/graphql/modular_main.py": {
      "path": "api/graphql/modular_main.py",
      "lines": 323,
      "mock_indicators": [
        {
          "pattern": "except.*:\\s*pass",
          "line": 232,
          "match": "except:\n                    pass"
        }
      ],
      "silent_failures": [
        {
          "line": 232,
          "match": "except:\n                    pass"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [
        {
          "pattern": "redis\\.Redis",
          "line": 48,
          "match": "redis.Redis"
        }
      ],
      "complexity_score": 39,
      "real_implementation_score": 2,
      "classification": "PARTIAL_REAL"
    },
    "api/graphql/websocket_manager.py": {
      "path": "api/graphql/websocket_manager.py",
      "lines": 312,
      "mock_indicators": [
        {
          "pattern": "except.*:\\s*pass",
          "line": 140,
          "match": "except Exception:\n            pass"
        },
        {
          "pattern": "except.*Exception.*:\\s*pass",
          "line": 140,
          "match": "except Exception:\n            pass"
        }
      ],
      "silent_failures": [
        {
          "line": 140,
          "match": "except Exception:\n            pass"
        },
        {
          "line": 140,
          "match": "except Exception:\n            pass"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 20,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "api/graphql/middleware/security.py": {
      "path": "api/graphql/middleware/security.py",
      "lines": 94,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 73,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 23,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "api/graphql/middleware/cache.py": {
      "path": "api/graphql/middleware/cache.py",
      "lines": 95,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 27,
          "match": "cache_input = f\"{query}:{json.dumps(variables or {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 34,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 45,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 67,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 27,
          "match": "cache_input = f\"{query}:{json.dumps(variables or {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 16,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "api/graphql/mutations/auth_proxy.py": {
      "path": "api/graphql/mutations/auth_proxy.py",
      "lines": 455,
      "mock_indicators": [
        {
          "pattern": "def\\s+\\w+.*:\\s*pass",
          "line": 249,
          "match": "def change_password(self, info: Info, input: Pass"
        },
        {
          "pattern": "async\\s+def\\s+\\w+.*:\\s*pass",
          "line": 249,
          "match": "async def change_password(self, info: Info, input: Pass"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 56,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "api/gateway/models.py": {
      "path": "api/gateway/models.py",
      "lines": 96,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 44,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/gateway/rate_limiter.py": {
      "path": "api/gateway/rate_limiter.py",
      "lines": 212,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 15,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/gateway/__init__.py": {
      "path": "api/gateway/__init__.py",
      "lines": 1,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/gateway/graphql_proxy.py": {
      "path": "api/gateway/graphql_proxy.py",
      "lines": 643,
      "mock_indicators": [
        {
          "pattern": "cache.*=.*\\{\\}",
          "line": 40,
          "match": "cache = {}"
        },
        {
          "pattern": "return\\s+None",
          "line": 246,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 255,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [
        {
          "line": 40,
          "match": "cache = {}"
        }
      ],
      "real_implementations": [],
      "complexity_score": 28,
      "real_implementation_score": 0,
      "classification": "FAKE_DATABASE"
    },
    "api/gateway/circuit_breaker.py": {
      "path": "api/gateway/circuit_breaker.py",
      "lines": 293,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 31,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "api/gateway/router.py": {
      "path": "api/gateway/router.py",
      "lines": 259,
      "mock_indicators": [
        {
          "pattern": "return\\s+None",
          "line": 96,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 228,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 23,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "workers/celery_app.py": {
      "path": "workers/celery_app.py",
      "lines": 148,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 16,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "workers/__init__.py": {
      "path": "workers/__init__.py",
      "lines": 7,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 1,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "workers/tasks/merge.py": {
      "path": "workers/tasks/merge.py",
      "lines": 222,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 36,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "workers/tasks/maintenance.py": {
      "path": "workers/tasks/maintenance.py",
      "lines": 209,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 32,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "workers/tasks/__init__.py": {
      "path": "workers/tasks/__init__.py",
      "lines": 7,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 1,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "monitoring/async_merge_metrics.py": {
      "path": "monitoring/async_merge_metrics.py",
      "lines": 286,
      "mock_indicators": [
        {
          "pattern": "except.*:\\s*pass",
          "line": 270,
          "match": "except Exception:\n            pass"
        },
        {
          "pattern": "except.*Exception.*:\\s*pass",
          "line": 270,
          "match": "except Exception:\n            pass"
        }
      ],
      "silent_failures": [
        {
          "line": 270,
          "match": "except Exception:\n            pass"
        },
        {
          "line": 270,
          "match": "except Exception:\n            pass"
        },
        {
          "line": 270,
          "match": "except Exception:\n            pass  #"
        }
      ],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 15,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "common_logging/__init__.py": {
      "path": "common_logging/__init__.py",
      "lines": 84,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 30,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "common_logging/setup.py": {
      "path": "common_logging/setup.py",
      "lines": 126,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 14,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "infrastructure/aws/eventbridge_rules.py": {
      "path": "infrastructure/aws/eventbridge_rules.py",
      "lines": 326,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 14,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "infrastructure/aws/eventbridge_setup.py": {
      "path": "infrastructure/aws/eventbridge_setup.py",
      "lines": 473,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "infrastructure/aws/cloudwatch_alarms.py": {
      "path": "infrastructure/aws/cloudwatch_alarms.py",
      "lines": 401,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 12,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "services/__init__.py": {
      "path": "services/__init__.py",
      "lines": 0,
      "mock_indicators": [],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 0,
      "real_implementation_score": 0,
      "classification": "UNKNOWN"
    },
    "services/job_service.py": {
      "path": "services/job_service.py",
      "lines": 455,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 272,
          "match": "return []"
        },
        {
          "pattern": "return\\s+None",
          "line": 150,
          "match": "return None"
        },
        {
          "pattern": "return\\s+None",
          "line": 415,
          "match": "return None"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 16,
      "real_implementation_score": 0,
      "classification": "MOCK_DOMINANT"
    },
    "services/graph_analysis.py": {
      "path": "services/graph_analysis.py",
      "lines": 960,
      "mock_indicators": [
        {
          "pattern": "return\\s+\\[\\]",
          "line": 619,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 659,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\[\\]",
          "line": 662,
          "match": "return []"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 858,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 920,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 922,
          "match": "return {}"
        },
        {
          "pattern": "return\\s+\\{\\}",
          "line": 947,
          "match": "return {}"
        }
      ],
      "silent_failures": [],
      "fake_db_usage": [],
      "real_implementations": [],
      "complexity_score": 68,
      "real_implementation_score": 0,
      "classification": "HEAVY_MOCK"
    }
  },
  "mock_implementations": [],
  "silent_failures": [],
  "dead_code": [],
  "fake_databases": [],
  "facade_complexity": [],
  "real_implementation_estimate": 2.8,
  "mock_massacre_candidates": [
    {
      "path": "middleware/three_way_merge.py",
      "classification": "HEAVY_MOCK",
      "mock_count": 16,
      "fake_db_count": 0,
      "silent_failure_count": 4,
      "priority": 77
    },
    {
      "path": "tests/unit/core/versioning/test_merge_engine.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 10,
      "fake_db_count": 2,
      "silent_failure_count": 0,
      "priority": 56
    },
    {
      "path": "archive_audit_20250706/terminusdb_audit_service.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 11,
      "fake_db_count": 1,
      "silent_failure_count": 2,
      "priority": 54
    },
    {
      "path": "middleware/component_middleware.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 2,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 47
    },
    {
      "path": "archive_legacy_20250704/core/merge/unified_merge.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 10,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 45
    },
    {
      "path": "tests/unit/core/schema/test_conflict_resolver.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 5,
      "fake_db_count": 2,
      "silent_failure_count": 0,
      "priority": 41
    },
    {
      "path": "core/iam/iam_integration.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 7,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 33
    },
    {
      "path": "core/schema/conflict_resolver.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 7,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 32
    },
    {
      "path": "core/validation/adapters.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 6,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 31
    },
    {
      "path": "core/validation/rule_registry.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 3,
      "fake_db_count": 2,
      "silent_failure_count": 0,
      "priority": 30
    },
    {
      "path": "core/issue_tracking/issue_service.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 5,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 28
    },
    {
      "path": "archive_microservices_20250705/embeddings/service.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 3,
      "fake_db_count": 2,
      "silent_failure_count": 0,
      "priority": 28
    },
    {
      "path": "middleware/etag_middleware.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 3,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 27
    },
    {
      "path": "middleware/dlq/detector.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 2,
      "fake_db_count": 2,
      "silent_failure_count": 0,
      "priority": 27
    },
    {
      "path": "services/graph_analysis.py",
      "classification": "HEAVY_MOCK",
      "mock_count": 7,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 27
    },
    {
      "path": "tests/utils/performance_benchmark.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 3,
      "fake_db_count": 1,
      "silent_failure_count": 1,
      "priority": 26
    },
    {
      "path": "archive_microservices_20250705/backends/outbox_service.py",
      "classification": "HEAVY_MOCK",
      "mock_count": 6,
      "fake_db_count": 0,
      "silent_failure_count": 1,
      "priority": 26
    },
    {
      "path": "middleware/discovery/providers/dns.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 3,
      "fake_db_count": 1,
      "silent_failure_count": 1,
      "priority": 25
    },
    {
      "path": "core/versioning/merge_engine.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 4,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 25
    },
    {
      "path": "core/validation/naming_history.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 4,
      "fake_db_count": 0,
      "silent_failure_count": 2,
      "priority": 25
    },
    {
      "path": "api/simple_schema_routes.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 1,
      "fake_db_count": 2,
      "silent_failure_count": 0,
      "priority": 25
    },
    {
      "path": "api/graphql/auth.py",
      "classification": "HEAVY_MOCK",
      "mock_count": 8,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 24
    },
    {
      "path": "middleware/event_state_store.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 5,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 23
    },
    {
      "path": "core/versioning/merge_engine_fix.py",
      "classification": "HEAVY_MOCK",
      "mock_count": 7,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 23
    },
    {
      "path": "shared/vector_store.py",
      "classification": "HEAVY_MOCK",
      "mock_count": 7,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 23
    },
    {
      "path": "api/graphql/middleware/cache.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 4,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 23
    },
    {
      "path": "middleware/discovery/balancer.py",
      "classification": "HEAVY_MOCK",
      "mock_count": 7,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 22
    },
    {
      "path": "monitoring/async_merge_metrics.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 3,
      "priority": 22
    },
    {
      "path": "middleware/issue_tracking_middleware.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 3,
      "fake_db_count": 0,
      "silent_failure_count": 2,
      "priority": 21
    },
    {
      "path": "middleware/health/checks/database.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 3,
      "priority": 21
    },
    {
      "path": "core/versioning/dag_compaction.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 3,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 21
    },
    {
      "path": "shared/embedding_stub.py",
      "classification": "HEAVY_MOCK",
      "mock_count": 6,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 21
    },
    {
      "path": "archive_microservices_20250705/embeddings/providers.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 5,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 21
    },
    {
      "path": "api/gateway/graphql_proxy.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 3,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 21
    },
    {
      "path": "middleware/service_config.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 2,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 20
    },
    {
      "path": "core/branch/service.py",
      "classification": "HEAVY_MOCK",
      "mock_count": 6,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 20
    },
    {
      "path": "middleware/dlq/storage/redis.py",
      "classification": "HEAVY_MOCK",
      "mock_count": 6,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 19
    },
    {
      "path": "core/event_consumer/funnel_indexing_handler.py",
      "classification": "HEAVY_MOCK",
      "mock_count": 6,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 19
    },
    {
      "path": "core/integrations/user_service_client.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 3,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 19
    },
    {
      "path": "core/resilience/version_service_wrapper.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 2,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 19
    },
    {
      "path": "core/validation/ports.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 2,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 19
    },
    {
      "path": "core/validation/rules/data_type.py",
      "classification": "HEAVY_MOCK",
      "mock_count": 6,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 19
    },
    {
      "path": "shared/scheduler_client.py",
      "classification": "HEAVY_MOCK",
      "mock_count": 6,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 19
    },
    {
      "path": "core/resilience/unified_circuit_breaker.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 3,
      "fake_db_count": 0,
      "silent_failure_count": 2,
      "priority": 18
    },
    {
      "path": "shared/cache/smart_cache.py",
      "classification": "HEAVY_MOCK",
      "mock_count": 7,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 18
    },
    {
      "path": "api/graphql/websocket_manager.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 2,
      "priority": 18
    },
    {
      "path": "shared/cache/terminusdb_cache.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 2,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 17
    },
    {
      "path": "api/v1/organization_routes.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 5,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 17
    },
    {
      "path": "middleware/schema_freeze_middleware.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 4,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 16
    },
    {
      "path": "core/graph/repositories.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 4,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 16
    },
    {
      "path": "core/schema/repository.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 5,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 16
    },
    {
      "path": "core/events/event_sourcing.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 16
    },
    {
      "path": "models/permissions.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 1,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 16
    },
    {
      "path": "archive_legacy_20250704/core/auth/resource_permission_checker.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 4,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 15
    },
    {
      "path": "middleware/auth_middleware.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 5,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 15
    },
    {
      "path": "middleware/discovery/coordinator.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 3,
      "fake_db_count": 0,
      "silent_failure_count": 1,
      "priority": 15
    },
    {
      "path": "core/time_travel/cache.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 2,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 15
    },
    {
      "path": "middleware/common/redis_utils.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 5,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 14
    },
    {
      "path": "middleware/dlq/deduplicator.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 1,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 14
    },
    {
      "path": "archive_audit_20250706/audit_middleware.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 3,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 14
    },
    {
      "path": "core/branch/service_refactored.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 4,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 14
    },
    {
      "path": "core/events/immutable_event_store.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 4,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 14
    },
    {
      "path": "core/validation/tampering_detection.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 4,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 14
    },
    {
      "path": "core/validation/rules/required_field.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 4,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 14
    },
    {
      "path": "archive_audit_20250706/audit_id_generator.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 4,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 13
    },
    {
      "path": "core/document/service.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 4,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 13
    },
    {
      "path": "core/schema/repository_original.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 4,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 13
    },
    {
      "path": "tests/conftest.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 4,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 13
    },
    {
      "path": "shared/event_gateway_client.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 4,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 13
    },
    {
      "path": "shared/scheduler_stub.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 4,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 13
    },
    {
      "path": "shared/user_service_client.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 5,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 13
    },
    {
      "path": "shared/data_kernel_client.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 4,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 13
    },
    {
      "path": "observability/enterprise_integration.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 3,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 13
    },
    {
      "path": "archive_audit_20250706/audit_database.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 3,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 12
    },
    {
      "path": "core/schema/registry.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 4,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 12
    },
    {
      "path": "observability/advanced_gc_monitoring.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 1,
      "priority": 12
    },
    {
      "path": "bootstrap/providers/database.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 3,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 11
    },
    {
      "path": "models/override_request.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 3,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 11
    },
    {
      "path": "observability/enterprise_metrics.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 1,
      "priority": 11
    },
    {
      "path": "api/graphql/mutations/auth_proxy.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 11
    },
    {
      "path": "archive_audit_20250706/audit_migration_adapter.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 3,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 10
    },
    {
      "path": "core/config/environment.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 3,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 10
    },
    {
      "path": "core/document/repository_simple.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 3,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 10
    },
    {
      "path": "core/integrations/iam_service_client_with_fallback.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 10
    },
    {
      "path": "core/action/metadata_service.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 3,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 10
    },
    {
      "path": "core/validation/naming_convention.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 10
    },
    {
      "path": "bootstrap/config.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 10
    },
    {
      "path": "shared/models/data_types.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 10
    },
    {
      "path": "shared/infrastructure/real_nats_client.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 1,
      "priority": 10
    },
    {
      "path": "models/data_types.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 10
    },
    {
      "path": "services/job_service.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 3,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 10
    },
    {
      "path": "middleware/health/coordinator.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 1,
      "priority": 9
    },
    {
      "path": "middleware/dlq/coordinator.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 1,
      "priority": 9
    },
    {
      "path": "core/health/health_checker.py",
      "classification": "FAKE_DATABASE",
      "mock_count": 1,
      "fake_db_count": 1,
      "silent_failure_count": 0,
      "priority": 9
    },
    {
      "path": "core/documents/unfoldable.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 9
    },
    {
      "path": "core/validation/policy_signing.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 9
    },
    {
      "path": "core/validation/rules/primary_key.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 3,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 9
    },
    {
      "path": "core/validation/rules/shared_property.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 3,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 9
    },
    {
      "path": "tests/unit/core/branch/test_branch_service.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 9
    },
    {
      "path": "models/merge_hints.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 9
    },
    {
      "path": "models/issue_tracking.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 9
    },
    {
      "path": "archive_microservices_20250705/backends/audit_backend.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 1,
      "priority": 9
    },
    {
      "path": "middleware/common/__init__.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 8
    },
    {
      "path": "infra/siem/adapter.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 8
    },
    {
      "path": "core/branch/lock_manager.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 8
    },
    {
      "path": "core/integrations/iam_service_client.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 8
    },
    {
      "path": "core/api/schema_generator.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 8
    },
    {
      "path": "core/documents/storage.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 8
    },
    {
      "path": "core/etag/decorators.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 8
    },
    {
      "path": "core/validation/container.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 8
    },
    {
      "path": "core/validation/dependencies.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 8
    },
    {
      "path": "bootstrap/providers/graph_analysis.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 8
    },
    {
      "path": "models/job.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 8
    },
    {
      "path": "archive_microservices_20250705/backends/eventbridge_adapter.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 8
    },
    {
      "path": "archive_microservices_20250705/scheduler/advanced_scheduler.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 8
    },
    {
      "path": "api/v1/auth_proxy_routes.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 8
    },
    {
      "path": "api/gateway/router.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 8
    },
    {
      "path": "middleware/coordinator.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 7
    },
    {
      "path": "core/event_consumer/iam_event_handler.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 7
    },
    {
      "path": "core/time_travel/db_optimizations.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 7
    },
    {
      "path": "core/issue_tracking/issue_database.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 7
    },
    {
      "path": "core/schema/service.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 7
    },
    {
      "path": "core/schema/repository_fixed.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 7
    },
    {
      "path": "core/iam/scope_mapper.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 7
    },
    {
      "path": "core/versioning/version_service.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 7
    },
    {
      "path": "core/validation/rules/example_decorated_rule.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 7
    },
    {
      "path": "core/validation/rules/primary_key_change.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 7
    },
    {
      "path": "bootstrap/providers/branch.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 7
    },
    {
      "path": "observability/pyroscope_integration.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 7
    },
    {
      "path": "grpc_services/server.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 7
    },
    {
      "path": "archive_legacy_20250704/core/schema_generator/asyncapi_generator.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 6
    },
    {
      "path": "middleware/common/metrics.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 6
    },
    {
      "path": "core/validation/version_manager.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 6
    },
    {
      "path": "core/validation/rules/type_incompatibility.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 6
    },
    {
      "path": "bootstrap/providers/terminus_port_adapter.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 2,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 6
    },
    {
      "path": "archive_legacy_20250704/core/schema_generator/graphql_to_asyncapi.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 5
    },
    {
      "path": "archive_audit_20250706/audit_service_full.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 5
    },
    {
      "path": "archive_audit_20250706/audit_service.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 5
    },
    {
      "path": "archive_audit_20250706/audit_service_original.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 5
    },
    {
      "path": "core/branch/foundry_branch_service.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 5
    },
    {
      "path": "core/shadow_index/manager.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 5
    },
    {
      "path": "core/versioning/delta_compression.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 5
    },
    {
      "path": "core/validation/rules/base.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 5
    },
    {
      "path": "models/struct_types.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 5
    },
    {
      "path": "models/scope_role_mapping.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 5
    },
    {
      "path": "api/graphql/middleware/security.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 5
    },
    {
      "path": "middleware/rate_limiting/coordinator.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 4
    },
    {
      "path": "middleware/discovery/providers/redis.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 4
    },
    {
      "path": "middleware/dlq/handler.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 4
    },
    {
      "path": "database/clients/sqlite_client_secure.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 4
    },
    {
      "path": "database/clients/postgres_client_secure.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 4
    },
    {
      "path": "archive_audit_20250706/add_audit_fields.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 4
    },
    {
      "path": "core/branch/diff_engine.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 4
    },
    {
      "path": "core/idempotent/consumer_service.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 4
    },
    {
      "path": "core/history/service.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 4
    },
    {
      "path": "core/validation/service.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 4
    },
    {
      "path": "core/validation/naming_convention_v2.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 4
    },
    {
      "path": "core/validation/rules/type_change.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 4
    },
    {
      "path": "core/validation/rules/naming_convention_rule.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 4
    },
    {
      "path": "core/validation/rules/data_impact_analyzer.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 4
    },
    {
      "path": "bootstrap/providers/embedding.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 4
    },
    {
      "path": "shared/embedding_client.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 4
    },
    {
      "path": "archive_microservices_20250705/backends/cloudevents_adapter.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 4
    },
    {
      "path": "archive_microservices_20250705/backends/change_detector.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 4
    },
    {
      "path": "scripts/migrate_pydantic_v2.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 4
    },
    {
      "path": "middleware/health/dependency.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 3
    },
    {
      "path": "infra/siem/config.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 3
    },
    {
      "path": "core/branch/conflict_resolver.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 3
    },
    {
      "path": "core/auth_utils/__init__.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 3
    },
    {
      "path": "shared/events.py",
      "classification": "MOCK_DOMINANT",
      "mock_count": 1,
      "fake_db_count": 0,
      "silent_failure_count": 0,
      "priority": 3
    }
  ],
  "massacre_strategy": [
    {
      "phase": "Phase 1: Fake Database Elimination",
      "priority": "CRITICAL",
      "files": [
        "archive_legacy_20250704/core/merge/unified_merge.py",
        "middleware/service_config.py",
        "middleware/component_middleware.py",
        "middleware/etag_middleware.py",
        "middleware/discovery/providers/dns.py",
        "middleware/dlq/detector.py",
        "middleware/dlq/deduplicator.py",
        "archive_audit_20250706/terminusdb_audit_service.py",
        "core/health/health_checker.py",
        "core/time_travel/cache.py",
        "core/issue_tracking/issue_service.py",
        "core/integrations/user_service_client.py",
        "core/schema/conflict_resolver.py",
        "core/iam/iam_integration.py",
        "core/resilience/version_service_wrapper.py",
        "core/versioning/merge_engine.py",
        "core/versioning/dag_compaction.py",
        "core/validation/rule_registry.py",
        "core/validation/ports.py",
        "core/validation/adapters.py",
        "tests/unit/core/schema/test_conflict_resolver.py",
        "tests/unit/core/versioning/test_merge_engine.py",
        "tests/utils/performance_benchmark.py",
        "shared/cache/terminusdb_cache.py",
        "models/permissions.py",
        "archive_microservices_20250705/embeddings/service.py",
        "api/simple_schema_routes.py",
        "api/graphql/middleware/cache.py",
        "api/gateway/graphql_proxy.py"
      ],
      "action": "Replace in-memory storage with real TerminusDB integration"
    },
    {
      "phase": "Phase 2: Heavy Mock Elimination",
      "priority": "HIGH",
      "files": [
        "middleware/three_way_merge.py",
        "middleware/discovery/balancer.py",
        "middleware/dlq/storage/redis.py",
        "core/branch/service.py",
        "core/event_consumer/funnel_indexing_handler.py",
        "core/versioning/merge_engine_fix.py",
        "core/validation/rules/data_type.py",
        "shared/scheduler_client.py",
        "shared/vector_store.py",
        "shared/embedding_stub.py",
        "shared/cache/smart_cache.py",
        "archive_microservices_20250705/backends/outbox_service.py",
        "api/graphql/auth.py",
        "services/graph_analysis.py"
      ],
      "action": "Implement real business logic"
    },
    {
      "phase": "Phase 3: Silent Failure Elimination",
      "priority": "HIGH",
      "files": [
        "core/validation/naming_config.py",
        "utils/safe_json_encoder.py",
        "shared/audit_client.py"
      ],
      "action": "Add proper error handling and logging"
    }
  ]
}