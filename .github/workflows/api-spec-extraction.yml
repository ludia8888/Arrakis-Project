name: API Specification Extraction

on:
  push:
    branches: [main, develop]
    paths:
      - "*/api/**"
      - "*/app/**"
      - "**/main.py"
      - "**/routes/**"
      - "**/endpoints/**"
      - "**/*.proto"
  pull_request:
    branches: [main, develop]
    paths:
      - "*/api/**"
      - "*/app/**"
      - "**/main.py"
      - "**/routes/**"
      - "**/endpoints/**"
      - "**/*.proto"
  schedule:
    # Run daily at 6 AM UTC
    - cron: "0 6 * * *"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to extract from"
        required: true
        default: "staging"
        type: choice
        options:
          - local
          - staging
          - production
      service:
        description: "Specific service (leave empty for all)"
        required: false
        type: string
      force_extraction:
        description: "Force extraction even if services are not running"
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.11"
  DEFAULT_ENVIRONMENT: "staging"

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      changed_services: ${{ steps.changes.outputs.services }}
      all_services: ${{ steps.services.outputs.list }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed services
        id: changes
        run: |
          # Define all services
          ALL_SERVICES=("ontology-management-service" "user-service" "audit-service" "data-kernel-service" "embedding-service" "scheduler-service" "event-gateway")

          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.service }}" ]; then
            # Manual dispatch with specific service
            CHANGED_SERVICES=("${{ github.event.inputs.service }}")
          elif [ "${{ github.event_name }}" == "schedule" ] || [ "${{ github.event.inputs.force_extraction }}" == "true" ]; then
            # Scheduled run or forced - check all services
            CHANGED_SERVICES=("${ALL_SERVICES[@]}")
          else
            # Check for actual changes
            CHANGED_SERVICES=()
            for service in "${ALL_SERVICES[@]}"; do
              if git diff --name-only HEAD~1 HEAD | grep -q "^${service}/"; then
                CHANGED_SERVICES+=("$service")
              fi
            done
          fi

          # Convert to JSON array
          printf -v SERVICES_JSON '%s\n' "${CHANGED_SERVICES[@]}" | jq -R . | jq -s .
          echo "services=${SERVICES_JSON}" >> $GITHUB_OUTPUT

          echo "Changed services: ${CHANGED_SERVICES[*]}"

      - name: Set all services list
        id: services
        run: |
          ALL_SERVICES='["ontology-management-service","user-service","audit-service","data-kernel-service","embedding-service","scheduler-service","event-gateway"]'
          echo "list=${ALL_SERVICES}" >> $GITHUB_OUTPUT

  prepare-environment:
    name: Prepare Test Environment
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.changed_services != '[]' }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.changed_services) }}
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install service dependencies
        run: |
          cd ${{ matrix.service }}
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          if [ -f "requirements-dev.txt" ]; then
            pip install -r requirements-dev.txt
          fi

      - name: Setup test environment variables
        run: |
          cat > .env.test <<EOF
          DATABASE_URL=postgresql://testuser:testpassword@localhost:5432/testdb
          REDIS_URL=redis://localhost:6379/0
          LOG_LEVEL=DEBUG
          TESTING=true
          JWT_SECRET=test-secret-key
          ENCRYPTION_KEY=test-encryption-key
          EOF

      - name: Start service for testing
        run: |
          cd ${{ matrix.service }}

          # Copy test environment
          cp ../.env.test .env

          # Start service in background
          if [ -f "main.py" ]; then
            python main.py &
          elif [ -f "app/main.py" ]; then
            python -m app.main &
          elif [ -f "api/main.py" ]; then
            python -m api.main &
          else
            echo "Could not find main.py, skipping service startup"
            exit 0
          fi

          SERVICE_PID=$!
          echo "SERVICE_PID=${SERVICE_PID}" >> $GITHUB_ENV

          # Wait for service to start
          sleep 10

          # Check if service is running
          if kill -0 $SERVICE_PID 2>/dev/null; then
            echo "Service ${{ matrix.service }} started successfully"
          else
            echo "Service ${{ matrix.service }} failed to start"
          fi

      - name: Health check
        run: |
          # Define service ports
          case "${{ matrix.service }}" in
            "ontology-management-service") PORT=8000 ;;
            "user-service") PORT=8000 ;;
            "audit-service") PORT=8000 ;;
            "data-kernel-service") PORT=8001 ;;
            "embedding-service") PORT=8002 ;;
            "scheduler-service") PORT=8003 ;;
            "event-gateway") PORT=8004 ;;
            *) PORT=8000 ;;
          esac

          # Wait for service to be ready
          for i in {1..30}; do
            if curl -s "http://localhost:${PORT}/health" > /dev/null; then
              echo "Service ${{ matrix.service }} is ready"
              break
            fi
            echo "Waiting for service... (attempt $i/30)"
            sleep 2
          done

      - name: Upload service readiness artifact
        uses: actions/upload-artifact@v4
        with:
          name: service-ready-${{ matrix.service }}
          path: .env.test
          retention-days: 1

  extract-specifications:
    name: Extract API Specifications
    runs-on: ubuntu-latest
    needs: [detect-changes, prepare-environment]
    if: ${{ needs.detect-changes.outputs.changed_services != '[]' }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.changed_services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install extraction dependencies
        run: |
          pip install --upgrade pip
          pip install aiohttp asyncio pyyaml certifi
          pip install openapi-spec-validator jsonschema

      - name: Download service readiness artifact
        uses: actions/download-artifact@v4
        with:
          name: service-ready-${{ matrix.service }}

      - name: Setup service environment
        run: |
          # Determine environment
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          else
            ENVIRONMENT="${{ env.DEFAULT_ENVIRONMENT }}"
          fi

          echo "EXTRACTION_ENVIRONMENT=${ENVIRONMENT}" >> $GITHUB_ENV

      - name: Extract API specifications
        run: |
          echo "Extracting specifications for ${{ matrix.service }} from ${EXTRACTION_ENVIRONMENT}"

          # Create output directory
          mkdir -p docs/api-specs

          # Run extraction
          python scripts/extract_api_specs.py \
            --environment local \
            --service ${{ matrix.service }} \
            --output docs/api-specs

      - name: Validate extracted specifications
        run: |
          # Validate OpenAPI specs
          for spec_file in docs/api-specs/${{ matrix.service }}/openapi.json; do
            if [ -f "$spec_file" ]; then
              echo "Validating OpenAPI spec: $spec_file"
              python -c "
                import json
                import sys
                from openapi_spec_validator import validate_spec
                try:
                    with open('$spec_file') as f:
                        spec = json.load(f)
                    validate_spec(spec)
                    print('✅ OpenAPI spec is valid')
                except Exception as e:
                    print(f'❌ OpenAPI spec validation failed: {e}')
                    sys.exit(1)
                "
            fi
          done

      - name: Generate diff report
        if: github.event_name == 'pull_request'
        run: |
          # Check if specs have changed
          if [ -d "docs/api-specs/${{ matrix.service }}" ]; then
            echo "## API Specification Changes - ${{ matrix.service }}" > spec_changes.md
            echo "" >> spec_changes.md

            # Compare with main branch
            git fetch origin main

            if git show origin/main:docs/api-specs/${{ matrix.service }}/openapi.json > /tmp/old_spec.json 2>/dev/null; then
              if [ -f "docs/api-specs/${{ matrix.service }}/openapi.json" ]; then
                echo "### OpenAPI Changes" >> spec_changes.md
                echo "\`\`\`diff" >> spec_changes.md
                diff -u /tmp/old_spec.json docs/api-specs/${{ matrix.service }}/openapi.json >> spec_changes.md || true
                echo "\`\`\`" >> spec_changes.md
              fi
            else
              echo "### New OpenAPI Specification" >> spec_changes.md
              echo "This is a new API specification for ${{ matrix.service }}" >> spec_changes.md
            fi

            echo "" >> spec_changes.md
            echo "[View full specifications](../tree/${{ github.head_ref }}/docs/api-specs/${{ matrix.service }}/)" >> spec_changes.md
          fi

      - name: Upload extracted specifications
        uses: actions/upload-artifact@v4
        with:
          name: api-specs-${{ matrix.service }}
          path: docs/api-specs/${{ matrix.service }}/
          retention-days: 30

      - name: Upload diff report
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: spec-changes-${{ matrix.service }}
          path: spec_changes.md
          retention-days: 7

  generate-combined-report:
    name: Generate Combined Report
    runs-on: ubuntu-latest
    needs: [detect-changes, extract-specifications]
    if: ${{ needs.detect-changes.outputs.changed_services != '[]' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all specification artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Combine specifications
        run: |
          mkdir -p docs/api-specs

          # Copy all extracted specs
          for artifact_dir in artifacts/api-specs-*; do
            if [ -d "$artifact_dir" ]; then
              service_name=$(basename "$artifact_dir" | sed 's/api-specs-//')
              cp -r "$artifact_dir" "docs/api-specs/$service_name"
            fi
          done

      - name: Generate OpenAPI registry
        run: |
          # Create registry of all OpenAPI specs
          cat > docs/api-specs/registry.json <<'EOF'
          {
            "version": "1.0.0",
            "generated": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "services": {}
          }
          EOF

          # Add each service to registry
          python3 << 'EOF'
          import json
          import os
          from datetime import datetime
          from pathlib import Path

          registry_file = "docs/api-specs/registry.json"
          with open(registry_file) as f:
              registry = json.load(f)

          registry["generated"] = datetime.utcnow().isoformat() + "Z"

          for service_dir in Path("docs/api-specs").iterdir():
              if service_dir.is_dir() and service_dir.name != "__pycache__":
                  service_name = service_dir.name
                  openapi_file = service_dir / "openapi.json"

                  if openapi_file.exists():
                      with open(openapi_file) as f:
                          spec = json.load(f)

                      registry["services"][service_name] = {
                          "title": spec.get("info", {}).get("title", service_name),
                          "version": spec.get("info", {}).get("version", "unknown"),
                          "description": spec.get("info", {}).get("description", ""),
                          "openapi_version": spec.get("openapi", "unknown"),
                          "paths_count": len(spec.get("paths", {})),
                          "schemas_count": len(spec.get("components", {}).get("schemas", {})),
                          "spec_url": f"./{service_name}/openapi.json",
                          "docs_url": f"./{service_name}/README.md"
                      }

          with open(registry_file, "w") as f:
              json.dump(registry, f, indent=2)
          EOF

      - name: Generate index page
        run: |
          cat > docs/api-specs/README.md <<'EOF'
          # Arrakis API Specifications Registry

          This directory contains automatically extracted API specifications for all Arrakis microservices.

          ## Services

          EOF

          # Add service table
          python3 << 'EOF'
          import json

          with open("docs/api-specs/registry.json") as f:
              registry = json.load(f)

          with open("docs/api-specs/README.md", "a") as f:
              f.write("| Service | Version | Endpoints | Schemas | Documentation |\n")
              f.write("|---------|---------|-----------|---------|---------------|\n")

              for service_name, info in registry["services"].items():
                  f.write(f"| [{info['title']}](./{service_name}/) | {info['version']} | {info['paths_count']} | {info['schemas_count']} | [View]({info['docs_url']}) |\n")

              f.write(f"\n**Last Updated:** {registry['generated']}\n\n")
              f.write("## Quick Links\n\n")

              for service_name, info in registry["services"].items():
                  f.write(f"- **{info['title']}**\n")
                  f.write(f"  - [OpenAPI Spec]({info['spec_url']})\n")
                  f.write(f"  - [Documentation]({info['docs_url']})\n")
                  f.write(f"  - Description: {info['description']}\n\n")

              f.write("## Usage\n\n")
              f.write("### Import into API Tools\n")
              f.write("- **Postman**: Import OpenAPI specs directly\n")
              f.write("- **Insomnia**: Use OpenAPI import feature\n")
              f.write("- **curl**: Generate requests from specs\n")
              f.write("- **SDKs**: Generate client libraries\n\n")

              f.write("### Automation\n\n")
              f.write("These specifications are automatically:\n")
              f.write("- Extracted on code changes\n")
              f.write("- Validated for correctness\n")
              f.write("- Updated in documentation portals\n")
              f.write("- Used for API testing\n")
          EOF

      - name: Create PR comment with changes
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## 📋 API Specification Extraction Report\n\n';

            const services = ${{ needs.detect-changes.outputs.changed_services }};

            if (services.length > 0) {
              comment += `**Services processed:** ${services.join(', ')}\n\n`;

              // Check for individual service changes
              for (const service of services) {
                const changeFile = `artifacts/spec-changes-${service}/spec_changes.md`;
                if (fs.existsSync(changeFile)) {
                  const changes = fs.readFileSync(changeFile, 'utf8');
                  comment += changes + '\n\n';
                }
              }

              comment += '### 📊 Summary\n\n';
              comment += `- **Services:** ${services.length}\n`;
              comment += '- **Validation:** ✅ All specifications validated\n';
              comment += '- **Registry:** Updated with latest specs\n\n';
              comment += '[View API Registry](../tree/${{ github.head_ref }}/docs/api-specs/)\n';
            } else {
              comment += '**No API changes detected** - No specification extraction needed.\n';
            }

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

      - name: Upload combined specifications
        uses: actions/upload-artifact@v4
        with:
          name: api-specs-combined
          path: docs/api-specs/
          retention-days: 90

  deploy-specifications:
    name: Deploy to Documentation Portal
    runs-on: ubuntu-latest
    needs: [detect-changes, generate-combined-report]
    if: github.ref == 'refs/heads/main' && needs.detect-changes.outputs.changed_services != '[]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download combined specifications
        uses: actions/download-artifact@v4
        with:
          name: api-specs-combined
          path: docs/api-specs/

      - name: Deploy to Redocly
        if: vars.REDOCLY_API_KEY
        run: |
          # Install Redocly CLI
          npm install -g @redocly/cli

          # Upload each OpenAPI spec to Redocly
          for spec_file in docs/api-specs/*/openapi.json; do
            if [ -f "$spec_file" ]; then
              service_name=$(dirname "$spec_file" | xargs basename)
              echo "Uploading $service_name to Redocly..."

              redocly push "$spec_file" \
                --organization arrakis \
                --name "$service_name" \
                --version "$(date +%Y%m%d-%H%M%S)" \
                --api-key "${{ vars.REDOCLY_API_KEY }}" || true
            fi
          done

      - name: Update Backstage catalog
        run: |
          # Update catalog-info.yaml files with latest API specs
          for service in ${{ needs.detect-changes.outputs.all_services }}; do
            if [ -f "$service/catalog-info.yaml" ] && [ -f "docs/api-specs/$service/openapi.json" ]; then
              echo "Updating catalog for $service"

              # Update API spec reference in catalog
              python3 << EOF
              import yaml
              import json

              # Load catalog
              with open('$service/catalog-info.yaml') as f:
                  catalog = yaml.safe_load(f)

              # Update spec reference
              if 'spec' not in catalog:
                  catalog['spec'] = {}
              if 'definition' not in catalog['spec']:
                  catalog['spec']['definition'] = {}

              catalog['spec']['definition']['$text'] = './openapi.json'

              # Save catalog
              with open('$service/catalog-info.yaml', 'w') as f:
                  yaml.dump(catalog, f, default_flow_style=False)
              EOF
            fi
          done

      - name: Commit updated specifications
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add docs/api-specs/
          git add */catalog-info.yaml

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update API specifications [skip ci]

            Auto-extracted specifications for: ${{ join(fromJson(needs.detect-changes.outputs.changed_services), ', ') }}

            🤖 Generated with [Claude Code](https://claude.ai/code)

            Co-Authored-By: Claude <noreply@anthropic.com>"
            git push
          fi

      - name: Send deployment notification
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="${{ job.status }}"
          COLOR="good"
          if [ "$STATUS" != "success" ]; then
            COLOR="danger"
          fi

          SERVICES="${{ join(fromJson(needs.detect-changes.outputs.changed_services), ', ') }}"

          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"title\": \"API Specification Extraction $STATUS\",
                \"text\": \"Extracted specifications for: $SERVICES\",
                \"fields\": [
                  {\"title\": \"Environment\", \"value\": \"${{ env.EXTRACTION_ENVIRONMENT }}\", \"short\": true},
                  {\"title\": \"Commit\", \"value\": \"${{ github.sha }}\", \"short\": true}
                ]
              }]
            }" \
            $SLACK_WEBHOOK_URL || true
