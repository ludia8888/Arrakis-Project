name: Architecture Diagrams Generation

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.py'
      - '**/*.yaml'
      - '**/*.yml'
      - 'docker-compose*.yml'
      - '**/catalog-info.yaml'
      - '.github/workflows/architecture-diagrams.yml'
  
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.py'
      - '**/*.yaml' 
      - '**/*.yml'
      - 'docker-compose*.yml'
      - '**/catalog-info.yaml'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Force regenerate all diagrams'
        required: false
        default: 'false'
        type: boolean
  
  # Schedule weekly diagram updates
  schedule:
    - cron: '0 2 * * 1'  # Monday at 2 AM UTC

env:
  PYTHON_VERSION: '3.11'

jobs:
  generate-diagrams:
    name: Generate Architecture Diagrams
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Full history for better analysis
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml
      
      - name: Create diagrams directory
        run: |
          mkdir -p docs/diagrams
      
      - name: Generate architecture diagrams
        run: |
          echo "🎨 Generating Arrakis architecture diagrams..."
          python scripts/generate_architecture_diagrams.py \
            --project-root . \
            --output-dir docs/diagrams
      
      - name: Validate generated diagrams
        run: |
          echo "✅ Validating generated diagrams..."
          
          # Check if all expected files were generated
          expected_files=(
            "docs/diagrams/README.md"
            "docs/diagrams/system-overview.md"
            "docs/diagrams/service-dependencies.md"
            "docs/diagrams/data-flow.md"
            "docs/diagrams/technology-stack.md"
            "docs/diagrams/metadata.json"
          )
          
          all_files_exist=true
          for file in "${expected_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing file: $file"
              all_files_exist=false
            else
              echo "✅ Found: $file"
            fi
          done
          
          if [ "$all_files_exist" = false ]; then
            echo "❌ Some expected files are missing"
            exit 1
          fi
          
          # Validate Mermaid syntax
          echo "🔍 Checking Mermaid syntax..."
          for md_file in docs/diagrams/*.md; do
            if [ -f "$md_file" ]; then
              if grep -q '```mermaid' "$md_file"; then
                echo "✅ Mermaid diagram found in $(basename "$md_file")"
              fi
            fi
          done
      
      - name: Generate diagram summary
        run: |
          echo "📊 Generating diagram summary..."
          
          # Count services and dependencies from metadata
          if [ -f "docs/diagrams/metadata.json" ]; then
            services_count=$(python3 -c "
            import json
            with open('docs/diagrams/metadata.json', 'r') as f:
                data = json.load(f)
                print(data.get('services_count', 0))
            ")
            
            dependencies_count=$(python3 -c "
            import json
            with open('docs/diagrams/metadata.json', 'r') as f:
                data = json.load(f)
                print(data.get('dependencies_count', 0))
            ")
            
            echo "SERVICES_COUNT=$services_count" >> $GITHUB_ENV
            echo "DEPENDENCIES_COUNT=$dependencies_count" >> $GITHUB_ENV
          fi
          
          # Generate summary for step summary
          cat > /tmp/diagram_summary.md << EOF
          # 🎨 Architecture Diagrams Generated
          
          ## 📊 Summary
          - **Services Analyzed**: ${services_count:-0}
          - **Dependencies Mapped**: ${dependencies_count:-0}
          - **Diagrams Generated**: 4
          
          ## 📋 Generated Diagrams
          - **System Overview** - High-level architecture view
          - **Service Dependencies** - Detailed service relationships
          - **Data Flow** - Data movement through the system
          - **Technology Stack** - Technology and infrastructure stack
          
          ## 🔗 View Diagrams
          The diagrams are available in the \`docs/diagrams/\` directory.
          EOF
          
          cat /tmp/diagram_summary.md >> $GITHUB_STEP_SUMMARY
      
      - name: Check for changes
        id: check_changes
        run: |
          echo "🔍 Checking for diagram changes..."
          
          if git diff --quiet docs/diagrams/; then
            echo "No changes detected in diagrams"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in diagrams"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # Show what changed
            echo "📝 Changes detected:"
            git diff --name-only docs/diagrams/ | while read -r file; do
              echo "  - $file"
            done
          fi
      
      - name: Upload diagrams artifact
        uses: actions/upload-artifact@v4
        with:
          name: architecture-diagrams
          path: docs/diagrams/
          retention-days: 30
      
      - name: Commit and push changes
        if: steps.check_changes.outputs.has_changes == 'true' && github.event_name != 'pull_request'
        run: |
          echo "💾 Committing diagram changes..."
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add docs/diagrams/
          git commit -m "📊 Update architecture diagrams
          
          - Services analyzed: ${{ env.SERVICES_COUNT }}
          - Dependencies mapped: ${{ env.DEPENDENCIES_COUNT }}
          - Auto-generated from commit ${{ github.sha }}
          
          🤖 Generated with GitHub Actions"
          
          git push origin ${{ github.ref_name }}
          
          echo "✅ Architecture diagrams updated and committed"
  
  validate-mermaid:
    name: Validate Mermaid Diagrams
    runs-on: ubuntu-latest
    needs: generate-diagrams
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download diagrams
        uses: actions/download-artifact@v4
        with:
          name: architecture-diagrams
          path: docs/diagrams/
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Mermaid CLI
        run: |
          npm install -g @mermaid-js/mermaid-cli
      
      - name: Validate Mermaid diagrams
        run: |
          echo "🔍 Validating Mermaid diagrams..."
          
          validation_failed=false
          
          for md_file in docs/diagrams/*.md; do
            if [ -f "$md_file" ] && grep -q '```mermaid' "$md_file"; then
              echo "Validating $(basename "$md_file")..."
              
              # Extract Mermaid code blocks
              awk '/```mermaid/,/```/' "$md_file" | grep -v '```' > "/tmp/$(basename "$md_file" .md).mmd"
              
              # Validate with Mermaid CLI
              if mmdc -i "/tmp/$(basename "$md_file" .md).mmd" -o "/tmp/$(basename "$md_file" .md).svg" 2>/dev/null; then
                echo "✅ $(basename "$md_file") is valid"
              else
                echo "❌ $(basename "$md_file") has invalid Mermaid syntax"
                validation_failed=true
              fi
            fi
          done
          
          if [ "$validation_failed" = true ]; then
            echo "❌ Some diagrams have invalid Mermaid syntax"
            exit 1
          fi
          
          echo "✅ All Mermaid diagrams are valid"
      
      - name: Generate diagram previews
        run: |
          echo "🖼️ Generating diagram previews..."
          
          mkdir -p docs/diagrams/previews
          
          for md_file in docs/diagrams/*.md; do
            if [ -f "$md_file" ] && grep -q '```mermaid' "$md_file"; then
              base_name=$(basename "$md_file" .md)
              
              # Extract and save Mermaid code
              awk '/```mermaid/,/```/' "$md_file" | grep -v '```' > "/tmp/$base_name.mmd"
              
              # Generate SVG preview
              if mmdc -i "/tmp/$base_name.mmd" -o "docs/diagrams/previews/$base_name.svg" -t dark -b transparent; then
                echo "✅ Generated preview for $base_name"
              else
                echo "⚠️  Could not generate preview for $base_name"
              fi
            fi
          done
      
      - name: Upload diagram previews
        uses: actions/upload-artifact@v4
        with:
          name: diagram-previews
          path: docs/diagrams/previews/
          retention-days: 7

  update-documentation:
    name: Update Documentation Index
    runs-on: ubuntu-latest
    needs: [generate-diagrams, validate-mermaid]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download diagrams
        uses: actions/download-artifact@v4
        with:
          name: architecture-diagrams
          path: docs/diagrams/
      
      - name: Update main documentation index
        run: |
          echo "📚 Updating documentation index..."
          
          # Create or update docs/README.md with links to diagrams
          cat > docs/README.md << 'EOF'
          # Arrakis Platform Documentation
          
          Welcome to the Arrakis Platform documentation. This directory contains comprehensive documentation for the entire platform.
          
          ## 📊 Architecture Diagrams
          
          Auto-generated architecture diagrams are available in the [diagrams](./diagrams/) directory:
          
          - [🏗️ System Overview](./diagrams/system-overview.md) - High-level system architecture
          - [🔗 Service Dependencies](./diagrams/service-dependencies.md) - Detailed service relationships
          - [🌊 Data Flow](./diagrams/data-flow.md) - Data flow through the system
          - [⚡ Technology Stack](./diagrams/technology-stack.md) - Technology stack visualization
          
          ## 📚 API Documentation
          
          OpenAPI specifications and API documentation:
          
          - [📖 API Documentation](./build/index.html) - Interactive API documentation
          - [📋 OpenAPI Specs](./openapi/) - Raw OpenAPI specifications
          - [⚙️ Redocly Configuration](./redocly.yaml) - Documentation configuration
          
          ## 🔧 Developer Resources
          
          - [🎯 Backstage Catalogs](../*/catalog-info.yaml) - Service catalog definitions
          - [🐳 Docker Compose](../docker-compose.yml) - Local development setup
          - [🔄 CI/CD Workflows](../.github/workflows/) - Automation workflows
          
          ## 📈 Monitoring & Observability
          
          - **Prometheus**: Metrics collection and monitoring
          - **Grafana**: Visualization and dashboards  
          - **Jaeger**: Distributed tracing
          - **AlertManager**: Alert routing and management
          
          ---
          
          *Documentation automatically updated on $(date)*
          EOF
          
          echo "✅ Updated documentation index"
      
      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if ! git diff --quiet docs/README.md; then
            git add docs/README.md
            git commit -m "📚 Update documentation index
            
            - Added links to architecture diagrams
            - Updated on $(date)
            
            🤖 Generated with GitHub Actions"
            
            git push origin ${{ github.ref_name }}
            echo "✅ Documentation index updated"
          else
            echo "ℹ️  No changes to documentation index"
          fi

  comment-on-pr:
    name: Comment on Pull Request
    runs-on: ubuntu-latest
    needs: [generate-diagrams, validate-mermaid]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Download diagrams
        uses: actions/download-artifact@v4
        with:
          name: architecture-diagrams
          path: docs/diagrams/
      
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read metadata
            let metadata = {};
            try {
              const metadataContent = fs.readFileSync('docs/diagrams/metadata.json', 'utf8');
              metadata = JSON.parse(metadataContent);
            } catch (e) {
              console.log('Could not read metadata:', e.message);
            }
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🎨 Architecture Diagrams')
            );
            
            const commentBody = `## 🎨 Architecture Diagrams Updated
            
            The architecture diagrams have been regenerated for this PR.
            
            ### 📊 Analysis Summary
            - **Services Analyzed**: ${metadata.services_count || 'N/A'}
            - **Dependencies Mapped**: ${metadata.dependencies_count || 'N/A'}
            - **Diagrams Generated**: 4
            
            ### 📋 Generated Diagrams
            - **System Overview** - High-level architecture view
            - **Service Dependencies** - Detailed service relationships  
            - **Data Flow** - Data movement through the system
            - **Technology Stack** - Technology and infrastructure stack
            
            ### 🔍 Validation Status
            - ✅ Mermaid syntax validation passed
            - ✅ All expected files generated
            - ✅ Diagram previews created
            
            📁 **Download**: Check the workflow artifacts for the generated diagrams.
            
            > This comment is automatically updated when diagrams change.`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }