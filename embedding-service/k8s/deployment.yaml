apiVersion: v1
kind: Namespace
metadata:
  name: embedding-service
  labels:
    app: embedding-service
    istio-injection: enabled

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: embedding-service
  namespace: embedding-service
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/embedding-service-irsa-role

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: embedding-service-config
  namespace: embedding-service
data:
  APP_NAME: "embedding-service"
  APP_ENV: "production"
  LOG_LEVEL: "info"
  PORT: "8002"
  GRPC_PORT: "50052"
  DEFAULT_EMBEDDING_MODEL: "sentence-transformers/all-MiniLM-L6-v2"
  AVAILABLE_MODELS: "all-MiniLM-L6-v2,all-mpnet-base-v2,paraphrase-multilingual-MiniLM-L12-v2"
  CACHE_ENABLED: "true"
  CACHE_TTL_HOURS: "24"
  MAX_BATCH_SIZE: "128"
  MAX_SEQUENCE_LENGTH: "512"
  MODEL_CACHE_DIR: "/models"
  USE_GPU: "true"
  CUDA_VISIBLE_DEVICES: "0"
  NUM_WORKERS: "4"
  QUEUE_SIZE: "1000"
  TIMEOUT_SECONDS: "60"
  ENABLE_MODEL_QUANTIZATION: "false"
  ENABLE_MIXED_PRECISION: "true"
  WARMUP_ENABLED: "true"
  PRELOAD_MODELS: "true"
  MAX_CONCURRENT_REQUESTS: "100"
  VECTOR_DIMENSION: "384"
  SIMILARITY_METRIC: "cosine"
  ENABLE_ONNX_RUNTIME: "true"

---
# WARNING: This Secret template should NOT be applied directly to production!
# Create secrets using kubectl or external secret management systems:
#
# kubectl create secret generic embedding-service-secrets \
#   --namespace=embedding-service \
#   --from-literal=DATABASE_URL="${DATABASE_URL}" \
#   --from-literal=REDIS_URL="${REDIS_URL}" \
#   --from-literal=NATS_URL="${NATS_URL}" \
#   --from-literal=S3_MODEL_BUCKET="${S3_MODEL_BUCKET}" \
#   --from-literal=S3_ACCESS_KEY="${S3_ACCESS_KEY}" \
#   --from-literal=S3_SECRET_KEY="${S3_SECRET_KEY}" \
#   --from-literal=HUGGINGFACE_TOKEN="${HUGGINGFACE_TOKEN}" \
#   --from-literal=OPENAI_API_KEY="${OPENAI_API_KEY}" \
#   --from-literal=ANTHROPIC_API_KEY="${ANTHROPIC_API_KEY}" \
#   --from-literal=COHERE_API_KEY="${COHERE_API_KEY}"
#
# SECURITY NOTE: AI API keys are highly sensitive and should be managed through
# external secret management systems (AWS Secrets Manager, HashiCorp Vault, etc.)
#
# apiVersion: v1
# kind: Secret
# metadata:
#   name: embedding-service-secrets
#   namespace: embedding-service
# type: Opaque
# # Data should be provided by external secret management system

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: embedding-service
  namespace: embedding-service
  labels:
    app: embedding-service
    version: v1
spec:
  replicas: 2
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: embedding-service
  template:
    metadata:
      labels:
        app: embedding-service
        version: v1
        workload-type: ml-intensive
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9092"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: embedding-service
      nodeSelector:
        node.kubernetes.io/instance-type: g4dn.xlarge
      tolerations:
        - key: nvidia.com/gpu
          operator: Exists
          effect: NoSchedule
        - key: ml-workload
          operator: Equal
          value: "true"
          effect: NoSchedule
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      initContainers:
        - name: model-downloader
          image: your-registry/model-downloader:latest
          env:
            - name: S3_MODEL_BUCKET
              valueFrom:
                secretKeyRef:
                  name: embedding-service-secrets
                  key: S3_MODEL_BUCKET
            - name: S3_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: embedding-service-secrets
                  key: S3_ACCESS_KEY
            - name: S3_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: embedding-service-secrets
                  key: S3_SECRET_KEY
            - name: HUGGINGFACE_TOKEN
              valueFrom:
                secretKeyRef:
                  name: embedding-service-secrets
                  key: HUGGINGFACE_TOKEN
            - name: DEFAULT_EMBEDDING_MODEL
              valueFrom:
                configMapKeyRef:
                  name: embedding-service-config
                  key: DEFAULT_EMBEDDING_MODEL
          volumeMounts:
            - name: model-cache
              mountPath: /models
      containers:
        - name: embedding-service
          image: your-registry/embedding-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8002
              name: http
              protocol: TCP
            - containerPort: 50052
              name: grpc
              protocol: TCP
            - containerPort: 9092
              name: metrics
              protocol: TCP
          env:
            - name: APP_NAME
              valueFrom:
                configMapKeyRef:
                  name: embedding-service-config
                  key: APP_NAME
            - name: APP_ENV
              valueFrom:
                configMapKeyRef:
                  name: embedding-service-config
                  key: APP_ENV
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: embedding-service-config
                  key: LOG_LEVEL
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: embedding-service-config
                  key: PORT
            - name: GRPC_PORT
              valueFrom:
                configMapKeyRef:
                  name: embedding-service-config
                  key: GRPC_PORT
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: embedding-service-secrets
                  key: DATABASE_URL
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: embedding-service-secrets
                  key: REDIS_URL
            - name: NATS_URL
              valueFrom:
                secretKeyRef:
                  name: embedding-service-secrets
                  key: NATS_URL
            - name: DEFAULT_EMBEDDING_MODEL
              valueFrom:
                configMapKeyRef:
                  name: embedding-service-config
                  key: DEFAULT_EMBEDDING_MODEL
            - name: MODEL_CACHE_DIR
              valueFrom:
                configMapKeyRef:
                  name: embedding-service-config
                  key: MODEL_CACHE_DIR
            - name: USE_GPU
              valueFrom:
                configMapKeyRef:
                  name: embedding-service-config
                  key: USE_GPU
            - name: CUDA_VISIBLE_DEVICES
              valueFrom:
                configMapKeyRef:
                  name: embedding-service-config
                  key: CUDA_VISIBLE_DEVICES
            - name: MAX_BATCH_SIZE
              valueFrom:
                configMapKeyRef:
                  name: embedding-service-config
                  key: MAX_BATCH_SIZE
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: embedding-service-secrets
                  key: OPENAI_API_KEY
            - name: ANTHROPIC_API_KEY
              valueFrom:
                secretKeyRef:
                  name: embedding-service-secrets
                  key: ANTHROPIC_API_KEY
            - name: COHERE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: embedding-service-secrets
                  key: COHERE_API_KEY
            - name: ENABLE_ONNX_RUNTIME
              valueFrom:
                configMapKeyRef:
                  name: embedding-service-config
                  key: ENABLE_ONNX_RUNTIME
          resources:
            requests:
              memory: "4Gi"
              cpu: "2000m"
              nvidia.com/gpu: 1
            limits:
              memory: "8Gi"
              cpu: "4000m"
              nvidia.com/gpu: 1
          livenessProbe:
            httpGet:
              path: /health
              port: 8002
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: 8002
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: 8002
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 60
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL
              add:
                - SYS_RESOURCE # For GPU access
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /app/.cache
            - name: model-cache
              mountPath: /models
              readOnly: true
            - name: shm
              mountPath: /dev/shm
      volumes:
        - name: tmp
          emptyDir: {}
        - name: cache
          emptyDir: {}
        - name: model-cache
          emptyDir:
            sizeLimit: 20Gi
        - name: shm
          emptyDir:
            medium: Memory
            sizeLimit: 2Gi
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - embedding-service
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node.kubernetes.io/instance-type
                    operator: In
                    values:
                      - g4dn.xlarge
                      - g4dn.2xlarge
                      - g4dn.4xlarge
                      - p3.2xlarge
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: embedding-service

---
apiVersion: v1
kind: Service
metadata:
  name: embedding-service
  namespace: embedding-service
  labels:
    app: embedding-service
spec:
  type: ClusterIP
  selector:
    app: embedding-service
  ports:
    - name: http
      port: 80
      targetPort: 8002
      protocol: TCP
    - name: grpc
      port: 50052
      targetPort: 50052
      protocol: TCP
    - name: metrics
      port: 9092
      targetPort: 9092
      protocol: TCP

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: embedding-service-hpa
  namespace: embedding-service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: embedding-service
  minReplicas: 2
  maxReplicas: 8
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 60
    - type: Pods
      pods:
        metric:
          name: gpu_utilization_percentage
        target:
          type: AverageValue
          averageValue: "70"
    - type: Pods
      pods:
        metric:
          name: embedding_queue_depth
        target:
          type: AverageValue
          averageValue: "500"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
        - type: Percent
          value: 25
          periodSeconds: 120
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: embedding-service-pdb
  namespace: embedding-service
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: embedding-service

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: embedding-service-network-policy
  namespace: embedding-service
spec:
  podSelector:
    matchLabels:
      app: embedding-service
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: istio-system
        - namespaceSelector:
            matchLabels:
              name: ontology-management-service
        - namespaceSelector:
            matchLabels:
              name: api-gateway
        - namespaceSelector:
            matchLabels:
              name: data-kernel-service
      ports:
        - port: 8002
          protocol: TCP
        - port: 50052
          protocol: TCP
    - from:
        - namespaceSelector:
            matchLabels:
              name: prometheus
      ports:
        - port: 9092
          protocol: TCP
  egress:
    - to:
        - namespaceSelector: {}
      ports:
        - port: 5432 # PostgreSQL
          protocol: TCP
        - port: 6379 # Redis
          protocol: TCP
        - port: 4222 # NATS
          protocol: TCP
    - to:
        - namespaceSelector: {}
      ports:
        - port: 53 # DNS
          protocol: UDP
        - port: 443 # HTTPS (for external APIs and S3)
          protocol: TCP

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: embedding-service-monitor
  namespace: embedding-service
  labels:
    app: embedding-service
    prometheus: kube-prometheus
spec:
  selector:
    matchLabels:
      app: embedding-service
  endpoints:
    - port: metrics
      path: /metrics
      interval: 30s
      scrapeTimeout: 10s
